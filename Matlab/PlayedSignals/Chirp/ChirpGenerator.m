%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Chirp Generator - 13/06/2019                      %
% Arkadi Rafalovich - Arkadiraf@gmail.com           %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clc
clear

% constants
sampleFreq = 1e6; % sample rate
emptySamples = 5* sampleFreq / 1e3; % num samples for 5 miliseconds

signalGain = 0.25; % set gain to generated signal
% chirp variables
startFreq = 1e3;    % Hz
endFreq   = 100e3;  % Hz
numSamples = 200*10^3; % number of samples for chirp signal
sweepTime  = numSamples/sampleFreq*0.5; % 0.5 for Bidirectional sweep

%Positioning Signal
Pos_Freq_1 = 25e3;      % Hz
Pos_Freq_2 = 37.5e3;    % Hz
Pos_Freq_3 = 50e3;      % Hz
NumRepitions = 10; %number for repetiotion for the frequency

% generate Signals - Including windowing effect
PosSignal_1 = sin(2*pi*Pos_Freq_1*((0:( sampleFreq / Pos_Freq_1 * NumRepitions))/sampleFreq))';
PosSignal_2 = sin(2*pi*Pos_Freq_2*((0:( sampleFreq / Pos_Freq_2 * NumRepitions))/sampleFreq))';
PosSignal_3 = sin(2*pi*Pos_Freq_3*((0:( sampleFreq / Pos_Freq_3 * NumRepitions))/sampleFreq))';
window_1 = window(@hann,size(PosSignal_1,1)); %@  hamming hann triang parzenwin
window_2 = window(@hann,size(PosSignal_2,1)); %@  hamming hann triang parzenwin
window_3 = window(@hann,size(PosSignal_3,1)); %@  hamming hann triang parzenwin
PosSignalWindow_1 = PosSignal_1.*window_1;
PosSignalWindow_2 = PosSignal_2.*window_2;
PosSignalWindow_3 = PosSignal_3.*window_3;

% combine generated sinuses
%PosSignal = [PosSignal_1 ; PosSignal_2];
%PosSignal = [PosSignalWindow_1 ; PosSignalWindow_2];
PosSignal = [PosSignalWindow_1 ; PosSignalWindow_2 ; PosSignalWindow_3];
% Variation with adjusted gains for cross corelation between microphones
%PosSignal = [PosSignalWindow_1 ; PosSignalWindow_2*1.5 ; PosSignalWindow_3*4];

%Plot generated signal
figure(1);
plot(PosSignal);

% Plot auto correlation
figure(2)
plot(abs(xcorr(PosSignal,PosSignal)))
%% Generate Chirp

%generate Chirp signal:
hchirp = dsp.Chirp( ... 
    'Type','Linear',... %Logarithmic
    'SweepDirection','Bidirectional',... %  Unidirectional
    'InitialFrequency', startFreq,... 
    'TargetFrequency', endFreq, ...
    'TargetTime',sweepTime,...
    'SweepTime',sweepTime, ...
    'SampleRate', sampleFreq, ...
    'SamplesPerFrame',numSamples);
%generate chirp
chirpData = step(hchirp);

% plot Chirp
figure(3);
plot(chirpData);

%% generate trapezoidal wave to wrap chirp signal and combine signal to one signal.
trap_rise=0.025; %rise time in %
trap_step=1/(trap_rise*numSamples);
trap=[trap_step:trap_step:1 , ones(1,numSamples*(1-2*trap_rise)) , 1:-trap_step:trap_step]';

%calculate trapezoidal chirp
chirp_trap=chirpData.*trap;

% Combine data apply gain
SignalChirp = [PosSignal ; zeros(emptySamples,1) ; chirp_trap]*signalGain;
    
% plot Chirp
figure(4);
plot (SignalChirp);

figure(5);
spec_window=256*4;
spec_nfft=256*4*4*4;
spec_ovlp=0.5;
spectrogram(SignalChirp,spec_window,spec_window*spec_ovlp,spec_nfft,sampleFreq,'yaxis');

% Plot auto correlation
figure(6)
plot(abs(xcorr(PosSignal,SignalChirp)))

%finddelay(PosSignal, [zeros(emptySamples,1) ; SignalChirp])

%% cast data to 12bit (dac resolution)
chirp_12bit=cast(((SignalChirp+1)*4095/2),'UINT16');
%number of samples used
totalnumSamples = size(chirp_12bit,1);

figure(10);
plot(chirp_12bit)

%% generate header file with desire coeficients
% check if file exists, delete if so.
if exist('chirp.h', 'file')==2
  delete('chirp.h');
end

% creat new file
file_id=fopen('chirp.h','w');

% file heading
fprintf(file_id,'/*\r\n');
fprintf(file_id,'Header File Generated by Matlab Script: Chirp_Generator.m \r\n');
fprintf(file_id,'Chirp Design: \r\n');
fprintf(file_id,'Chirp Number of Samples: %d \r\n', numSamples);
fprintf(file_id,'Total Number of Samples: %d \r\n', totalnumSamples);
fprintf(file_id,'Sample Rate: %d kHz \r\n', sampleFreq/1000);
fprintf(file_id,'Start Frequency: %d kHz \r\n', startFreq/1000);
fprintf(file_id,'End Frequency: %d kHz \r\n', endFreq/1000);
fprintf(file_id,'*/\r\n');

%init variable
fprintf(file_id,'#define NUM_SAMPLES %d\r\n', totalnumSamples);
fprintf(file_id,'const uint16_t chirpData[NUM_SAMPLES] = { \r\n');

for i =1:(totalnumSamples-1)
    fprintf(file_id,' %d, ', chirp_12bit(i));
    if (mod(i,10)==0) %insert spaces
        fprintf(file_id,'\r\n');
    end
end
fprintf(file_id,' %d}; \r\n', chirp_12bit(end));
% add last sample

% close file
fclose(file_id);


%% evaluate signal auto correlation and its power
%{ 
%PosSignal_Pow = PosSignal.^2.*sign(PosSignal);
PosSignal_Pow = PosSignal.^3;

%Plot generated signal
figure(20);
plot(PosSignal);
hold on
plot(PosSignal_Pow);
hold off

%Plot Signal fft
figure(21);
%SignalFFT=(fft(PosSignal_Pow));
SignalFFT=(fft(PosSignal));
P2 = abs(SignalFFT/size(PosSignal,1));
P1 = P2(1:size(PosSignal,1)/2+1);
P1(2:end-1) = 2*P1(2:end-1);
f = sampleFreq/1000*(0:(size(PosSignal,1)/2))/size(PosSignal,1);
plot(f,P1) 
title('Single-Sided Amplitude Spectrum of X(t)')
xlabel('f (kHz)')
ylabel('|P1(f)|')

% Plot auto correlation
figure(22)
plot(abs(xcorr(PosSignal,PosSignal)))
%plot(xcorr(PosSignal,PosSignal))
hold on
%plot(abs(xcorr(PosSignal_Pow,PosSignal_Pow)))
%plot(xcorr(PosSignal_Pow,PosSignal_Pow))
plot(abs(xcorr(PosSignal,PosSignal_Pow)))
hold off
%}

