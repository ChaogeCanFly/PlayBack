
Smart_Mic_V02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ec4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08009058  08009058  00019058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009490  08009490  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009490  08009490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009498  08009498  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009498  08009498  00019498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800949c  0800949c  0001949c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080094a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ce30  200001e8  08009688  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d018  08009688  0002d018  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012898  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025cf  00000000  00000000  00032ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee0  00000000  00000000  00035080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  00035f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c80  00000000  00000000  00036d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb0b  00000000  00000000  00059988  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4bfe  00000000  00000000  00066493  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000498c  00000000  00000000  0013b10c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800903c 	.word	0x0800903c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800903c 	.word	0x0800903c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b972 	b.w	8000f58 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	4688      	mov	r8, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14b      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4615      	mov	r5, r2
 8000c9e:	d967      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0720 	rsb	r7, r2, #32
 8000caa:	fa01 f302 	lsl.w	r3, r1, r2
 8000cae:	fa20 f707 	lsr.w	r7, r0, r7
 8000cb2:	4095      	lsls	r5, r2
 8000cb4:	ea47 0803 	orr.w	r8, r7, r3
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc4:	fa1f fc85 	uxth.w	ip, r5
 8000cc8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ccc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18eb      	adds	r3, r5, r3
 8000cda:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cde:	f080 811b 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8118 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000ce8:	3f02      	subs	r7, #2
 8000cea:	442b      	add	r3, r5
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d00:	45a4      	cmp	ip, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000d14:	3802      	subs	r0, #2
 8000d16:	442c      	add	r4, r5
 8000d18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d1c:	eba4 040c 	sub.w	r4, r4, ip
 8000d20:	2700      	movs	r7, #0
 8000d22:	b11e      	cbz	r6, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xbe>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80eb 	beq.w	8000f12 <__udivmoddi4+0x286>
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d42:	4638      	mov	r0, r7
 8000d44:	4639      	mov	r1, r7
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f783 	clz	r7, r3
 8000d4e:	2f00      	cmp	r7, #0
 8000d50:	d147      	bne.n	8000de2 <__udivmoddi4+0x156>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd0>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80fa 	bhi.w	8000f50 <__udivmoddi4+0x2c4>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	4698      	mov	r8, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000d6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xe8>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 808f 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7e:	1b49      	subs	r1, r1, r5
 8000d80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d84:	fa1f f885 	uxth.w	r8, r5
 8000d88:	2701      	movs	r7, #1
 8000d8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8e:	0c23      	lsrs	r3, r4, #16
 8000d90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb08 f10c 	mul.w	r1, r8, ip
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000da0:	18eb      	adds	r3, r5, r3
 8000da2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4299      	cmp	r1, r3
 8000daa:	f200 80cd 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000dae:	4684      	mov	ip, r0
 8000db0:	1a59      	subs	r1, r3, r1
 8000db2:	b2a3      	uxth	r3, r4
 8000db4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dc0:	fb08 f800 	mul.w	r8, r8, r0
 8000dc4:	45a0      	cmp	r8, r4
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x14c>
 8000dc8:	192c      	adds	r4, r5, r4
 8000dca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x14a>
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	f200 80b6 	bhi.w	8000f42 <__udivmoddi4+0x2b6>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000de0:	e79f      	b.n	8000d22 <__udivmoddi4+0x96>
 8000de2:	f1c7 0c20 	rsb	ip, r7, #32
 8000de6:	40bb      	lsls	r3, r7
 8000de8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000df0:	fa01 f407 	lsl.w	r4, r1, r7
 8000df4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e00:	4325      	orrs	r5, r4
 8000e02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e06:	0c2c      	lsrs	r4, r5, #16
 8000e08:	fb08 3319 	mls	r3, r8, r9, r3
 8000e0c:	fa1f fa8e 	uxth.w	sl, lr
 8000e10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e14:	fb09 f40a 	mul.w	r4, r9, sl
 8000e18:	429c      	cmp	r4, r3
 8000e1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1e 0303 	adds.w	r3, lr, r3
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	f080 8087 	bcs.w	8000f3e <__udivmoddi4+0x2b2>
 8000e30:	429c      	cmp	r4, r3
 8000e32:	f240 8084 	bls.w	8000f3e <__udivmoddi4+0x2b2>
 8000e36:	f1a9 0902 	sub.w	r9, r9, #2
 8000e3a:	4473      	add	r3, lr
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	b2ad      	uxth	r5, r5
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e50:	45a2      	cmp	sl, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1e 0404 	adds.w	r4, lr, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	d26b      	bcs.n	8000f36 <__udivmoddi4+0x2aa>
 8000e5e:	45a2      	cmp	sl, r4
 8000e60:	d969      	bls.n	8000f36 <__udivmoddi4+0x2aa>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4474      	add	r4, lr
 8000e66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	eba4 040a 	sub.w	r4, r4, sl
 8000e72:	454c      	cmp	r4, r9
 8000e74:	46c2      	mov	sl, r8
 8000e76:	464b      	mov	r3, r9
 8000e78:	d354      	bcc.n	8000f24 <__udivmoddi4+0x298>
 8000e7a:	d051      	beq.n	8000f20 <__udivmoddi4+0x294>
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d069      	beq.n	8000f54 <__udivmoddi4+0x2c8>
 8000e80:	ebb1 050a 	subs.w	r5, r1, sl
 8000e84:	eb64 0403 	sbc.w	r4, r4, r3
 8000e88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e8c:	40fd      	lsrs	r5, r7
 8000e8e:	40fc      	lsrs	r4, r7
 8000e90:	ea4c 0505 	orr.w	r5, ip, r5
 8000e94:	e9c6 5400 	strd	r5, r4, [r6]
 8000e98:	2700      	movs	r7, #0
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea4:	4095      	lsls	r5, r2
 8000ea6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8000eae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eb2:	4338      	orrs	r0, r7
 8000eb4:	0c01      	lsrs	r1, r0, #16
 8000eb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eba:	fa1f f885 	uxth.w	r8, r5
 8000ebe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ec2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec6:	fb07 f308 	mul.w	r3, r7, r8
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x256>
 8000ed2:	1869      	adds	r1, r5, r1
 8000ed4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed8:	d22f      	bcs.n	8000f3a <__udivmoddi4+0x2ae>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d92d      	bls.n	8000f3a <__udivmoddi4+0x2ae>
 8000ede:	3f02      	subs	r7, #2
 8000ee0:	4429      	add	r1, r5
 8000ee2:	1acb      	subs	r3, r1, r3
 8000ee4:	b281      	uxth	r1, r0
 8000ee6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb00 f308 	mul.w	r3, r0, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x27e>
 8000efa:	1869      	adds	r1, r5, r1
 8000efc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f00:	d217      	bcs.n	8000f32 <__udivmoddi4+0x2a6>
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d915      	bls.n	8000f32 <__udivmoddi4+0x2a6>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4429      	add	r1, r5
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f10:	e73b      	b.n	8000d8a <__udivmoddi4+0xfe>
 8000f12:	4637      	mov	r7, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e709      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f18:	4607      	mov	r7, r0
 8000f1a:	e6e7      	b.n	8000cec <__udivmoddi4+0x60>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f20:	4541      	cmp	r1, r8
 8000f22:	d2ab      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f28:	eb69 020e 	sbc.w	r2, r9, lr
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	4613      	mov	r3, r2
 8000f30:	e7a4      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f32:	4660      	mov	r0, ip
 8000f34:	e7e9      	b.n	8000f0a <__udivmoddi4+0x27e>
 8000f36:	4618      	mov	r0, r3
 8000f38:	e795      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3a:	4667      	mov	r7, ip
 8000f3c:	e7d1      	b.n	8000ee2 <__udivmoddi4+0x256>
 8000f3e:	4681      	mov	r9, r0
 8000f40:	e77c      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f42:	3802      	subs	r0, #2
 8000f44:	442c      	add	r4, r5
 8000f46:	e747      	b.n	8000dd8 <__udivmoddi4+0x14c>
 8000f48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f4c:	442b      	add	r3, r5
 8000f4e:	e72f      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f50:	4638      	mov	r0, r7
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xda>
 8000f54:	4637      	mov	r7, r6
 8000f56:	e6e9      	b.n	8000d2c <__udivmoddi4+0xa0>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f66:	2003      	movs	r0, #3
 8000f68:	f001 f85a 	bl	8002020 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f000 f80d 	bl	8000f8c <HAL_InitTick>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	e001      	b.n	8000f82 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f7e:	f005 fbbb 	bl	80066f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f82:	79fb      	ldrb	r3, [r7, #7]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_InitTick+0x68>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d022      	beq.n	8000fe6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_InitTick+0x6c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_InitTick+0x68>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fac:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 f868 	bl	800208a <HAL_SYSTICK_Config>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10f      	bne.n	8000fe0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b0f      	cmp	r3, #15
 8000fc4:	d809      	bhi.n	8000fda <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	f04f 30ff 	mov.w	r0, #4294967295
 8000fce:	f001 f832 	bl	8002036 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_InitTick+0x70>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e007      	b.n	8000fea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e004      	b.n	8000fea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e001      	b.n	8000fea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000004 	.word	0x20000004
 8000ff8:	20000014 	.word	0x20000014
 8000ffc:	20000000 	.word	0x20000000

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_IncTick+0x1c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_IncTick+0x20>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4413      	add	r3, r2
 800100e:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x1c>)
 8001010:	6013      	str	r3, [r2, #0]
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	2000ca24 	.word	0x2000ca24
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000ca24 	.word	0x2000ca24

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d004      	beq.n	8001060 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_Delay+0x40>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001060:	bf00      	nop
 8001062:	f7ff ffdf 	bl	8001024 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	429a      	cmp	r2, r3
 8001070:	d8f7      	bhi.n	8001062 <HAL_Delay+0x26>
  {
  }
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000004 	.word	0x20000004

08001080 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	431a      	orrs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	609a      	str	r2, [r3, #8]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	609a      	str	r2, [r3, #8]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010e8:	b490      	push	{r4, r7}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3360      	adds	r3, #96	; 0x60
 80010fa:	461a      	mov	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001104:	6822      	ldr	r2, [r4, #0]
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <LL_ADC_SetOffset+0x40>)
 8001108:	4013      	ands	r3, r2
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	430a      	orrs	r2, r1
 8001114:	4313      	orrs	r3, r2
 8001116:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800111a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bc90      	pop	{r4, r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	03fff000 	.word	0x03fff000

0800112c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800112c:	b490      	push	{r4, r7}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3360      	adds	r3, #96	; 0x60
 800113a:	461a      	mov	r2, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bc90      	pop	{r4, r7}
 8001152:	4770      	bx	lr

08001154 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001154:	b490      	push	{r4, r7}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3360      	adds	r3, #96	; 0x60
 8001164:	461a      	mov	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4313      	orrs	r3, r2
 8001178:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bc90      	pop	{r4, r7}
 8001182:	4770      	bx	lr

08001184 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001184:	b490      	push	{r4, r7}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3330      	adds	r3, #48	; 0x30
 8001194:	461a      	mov	r2, r3
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	f003 030c 	and.w	r3, r3, #12
 80011a0:	4413      	add	r3, r2
 80011a2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80011a4:	6822      	ldr	r2, [r4, #0]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	211f      	movs	r1, #31
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	401a      	ands	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	0e9b      	lsrs	r3, r3, #26
 80011ba:	f003 011f 	and.w	r1, r3, #31
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	f003 031f 	and.w	r3, r3, #31
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc90      	pop	{r4, r7}
 80011d4:	4770      	bx	lr

080011d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011d6:	b490      	push	{r4, r7}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60f8      	str	r0, [r7, #12]
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3314      	adds	r3, #20
 80011e6:	461a      	mov	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	0e5b      	lsrs	r3, r3, #25
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	4413      	add	r3, r2
 80011f4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80011f6:	6822      	ldr	r2, [r4, #0]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	0d1b      	lsrs	r3, r3, #20
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2107      	movs	r1, #7
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	401a      	ands	r2, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	0d1b      	lsrs	r3, r3, #20
 800120e:	f003 031f 	and.w	r3, r3, #31
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	fa01 f303 	lsl.w	r3, r1, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bc90      	pop	{r4, r7}
 8001224:	4770      	bx	lr
	...

08001228 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0318 	and.w	r3, r3, #24
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <LL_ADC_SetChannelSingleDiff+0x44>)
 800124c:	40d9      	lsrs	r1, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	400b      	ands	r3, r1
 8001252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001256:	431a      	orrs	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	0007ffff 	.word	0x0007ffff

08001270 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001280:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6093      	str	r3, [r2, #8]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012a8:	d101      	bne.n	80012ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012f8:	d101      	bne.n	80012fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800131c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001320:	f043 0201 	orr.w	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <LL_ADC_IsEnabled+0x18>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <LL_ADC_IsEnabled+0x1a>
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800136a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800136e:	f043 0204 	orr.w	r2, r3, #4
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	2b04      	cmp	r3, #4
 8001394:	d101      	bne.n	800139a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b08      	cmp	r3, #8
 80013ba:	d101      	bne.n	80013c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e12a      	b.n	8001640 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f005 f9a1 	bl	8006740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff3f 	bl	8001294 <LL_ADC_IsDeepPowerDownEnabled>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d004      	beq.n	8001426 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff25 	bl	8001270 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff5a 	bl	80012e4 <LL_ADC_IsInternalRegulatorEnabled>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d113      	bne.n	800145e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff3e 	bl	80012bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001440:	4b81      	ldr	r3, [pc, #516]	; (8001648 <HAL_ADC_Init+0x278>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	4a81      	ldr	r2, [pc, #516]	; (800164c <HAL_ADC_Init+0x27c>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	099b      	lsrs	r3, r3, #6
 800144e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001450:	e002      	b.n	8001458 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	3b01      	subs	r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f9      	bne.n	8001452 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff3e 	bl	80012e4 <LL_ADC_IsInternalRegulatorEnabled>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10d      	bne.n	800148a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001472:	f043 0210 	orr.w	r2, r3, #16
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147e:	f043 0201 	orr.w	r2, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff77 	bl	8001382 <LL_ADC_REG_IsConversionOngoing>
 8001494:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 80c5 	bne.w	800162e <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f040 80c1 	bne.w	800162e <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014b4:	f043 0202 	orr.w	r2, r3, #2
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff37 	bl	8001334 <LL_ADC_IsEnabled>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10b      	bne.n	80014e4 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014cc:	4860      	ldr	r0, [pc, #384]	; (8001650 <HAL_ADC_Init+0x280>)
 80014ce:	f7ff ff31 	bl	8001334 <LL_ADC_IsEnabled>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d105      	bne.n	80014e4 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4619      	mov	r1, r3
 80014de:	485d      	ldr	r0, [pc, #372]	; (8001654 <HAL_ADC_Init+0x284>)
 80014e0:	f7ff fdce 	bl	8001080 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7e5b      	ldrb	r3, [r3, #25]
 80014e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014ee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014f4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014fa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001502:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d106      	bne.n	8001520 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001516:	3b01      	subs	r3, #1
 8001518:	045b      	lsls	r3, r3, #17
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001524:	2b00      	cmp	r3, #0
 8001526:	d009      	beq.n	800153c <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001534:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	4b45      	ldr	r3, [pc, #276]	; (8001658 <HAL_ADC_Init+0x288>)
 8001544:	4013      	ands	r3, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	69b9      	ldr	r1, [r7, #24]
 800154c:	430b      	orrs	r3, r1
 800154e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff14 	bl	8001382 <LL_ADC_REG_IsConversionOngoing>
 800155a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff21 	bl	80013a8 <LL_ADC_INJ_IsConversionOngoing>
 8001566:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d13d      	bne.n	80015ea <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d13a      	bne.n	80015ea <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001578:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001580:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001590:	f023 0302 	bic.w	r3, r3, #2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	69b9      	ldr	r1, [r7, #24]
 800159a:	430b      	orrs	r3, r1
 800159c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d118      	bne.n	80015da <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015b2:	f023 0304 	bic.w	r3, r3, #4
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015be:	4311      	orrs	r1, r2
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015c4:	4311      	orrs	r1, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015ca:	430a      	orrs	r2, r1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0201 	orr.w	r2, r2, #1
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	e007      	b.n	80015ea <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d10c      	bne.n	800160c <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	f023 010f 	bic.w	r1, r3, #15
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	1e5a      	subs	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
 800160a:	e007      	b.n	800161c <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 020f 	bic.w	r2, r2, #15
 800161a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001620:	f023 0303 	bic.w	r3, r3, #3
 8001624:	f043 0201 	orr.w	r2, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	655a      	str	r2, [r3, #84]	; 0x54
 800162c:	e007      	b.n	800163e <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800163e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000014 	.word	0x20000014
 800164c:	053e2d63 	.word	0x053e2d63
 8001650:	50040000 	.word	0x50040000
 8001654:	50040300 	.word	0x50040300
 8001658:	fff0c007 	.word	0xfff0c007

0800165c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fe8a 	bl	8001382 <LL_ADC_REG_IsConversionOngoing>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d14f      	bne.n	8001714 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_ADC_Start+0x26>
 800167e:	2302      	movs	r3, #2
 8001680:	e04b      	b.n	800171a <HAL_ADC_Start+0xbe>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fb9e 	bl	8001dcc <ADC_Enable>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d137      	bne.n	800170a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016a2:	f023 0301 	bic.w	r3, r3, #1
 80016a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ba:	d106      	bne.n	80016ca <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	f023 0206 	bic.w	r2, r3, #6
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	659a      	str	r2, [r3, #88]	; 0x58
 80016c8:	e002      	b.n	80016d0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	221c      	movs	r2, #28
 80016d6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d007      	beq.n	80016fe <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fe29 	bl	800135a <LL_ADC_REG_StartConversion>
 8001708:	e006      	b.n	8001718 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001712:	e001      	b.n	8001718 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001714:	2302      	movs	r3, #2
 8001716:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b0a6      	sub	sp, #152	; 0x98
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_ADC_ConfigChannel+0x22>
 8001742:	2302      	movs	r3, #2
 8001744:	e338      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x694>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fe15 	bl	8001382 <LL_ADC_REG_IsConversionOngoing>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 831d 	bne.w	8001d9a <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b05      	cmp	r3, #5
 8001766:	d824      	bhi.n	80017b2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	3b02      	subs	r3, #2
 800176e:	2b03      	cmp	r3, #3
 8001770:	d81b      	bhi.n	80017aa <HAL_ADC_ConfigChannel+0x86>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <HAL_ADC_ConfigChannel+0x54>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	08001789 	.word	0x08001789
 800177c:	08001791 	.word	0x08001791
 8001780:	08001799 	.word	0x08001799
 8001784:	080017a1 	.word	0x080017a1
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	220c      	movs	r2, #12
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	e011      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2212      	movs	r2, #18
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	e00d      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2218      	movs	r2, #24
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	e009      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	e004      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2206      	movs	r2, #6
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	e000      	b.n	80017b4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80017b2:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	f7ff fcdf 	bl	8001184 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fdd9 	bl	8001382 <LL_ADC_REG_IsConversionOngoing>
 80017d0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fde5 	bl	80013a8 <LL_ADC_INJ_IsConversionOngoing>
 80017de:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 8148 	bne.w	8001a7c <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f040 8143 	bne.w	8001a7c <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	461a      	mov	r2, r3
 8001804:	f7ff fce7 	bl	80011d6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	08db      	lsrs	r3, r3, #3
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b04      	cmp	r3, #4
 8001828:	d00a      	beq.n	8001840 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6919      	ldr	r1, [r3, #16]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800183a:	f7ff fc55 	bl	80010e8 <LL_ADC_SetOffset>
 800183e:	e11d      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fc70 	bl	800112c <LL_ADC_GetOffsetChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10a      	bne.n	800186c <HAL_ADC_ConfigChannel+0x148>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fc65 	bl	800112c <LL_ADC_GetOffsetChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	0e9b      	lsrs	r3, r3, #26
 8001866:	f003 021f 	and.w	r2, r3, #31
 800186a:	e012      	b.n	8001892 <HAL_ADC_ConfigChannel+0x16e>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fc5a 	bl	800112c <LL_ADC_GetOffsetChannel>
 8001878:	4603      	mov	r3, r0
 800187a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001888:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x186>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0e9b      	lsrs	r3, r3, #26
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	e00a      	b.n	80018c0 <HAL_ADC_ConfigChannel+0x19c>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80018b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d106      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fc41 	bl	8001154 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2101      	movs	r1, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fc27 	bl	800112c <LL_ADC_GetOffsetChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10a      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x1da>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fc1c 	bl	800112c <LL_ADC_GetOffsetChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	0e9b      	lsrs	r3, r3, #26
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	e010      	b.n	8001920 <HAL_ADC_ConfigChannel+0x1fc>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2101      	movs	r1, #1
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fc11 	bl	800112c <LL_ADC_GetOffsetChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x214>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	0e9b      	lsrs	r3, r3, #26
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	e00a      	b.n	800194e <HAL_ADC_ConfigChannel+0x22a>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001948:	fab3 f383 	clz	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	429a      	cmp	r2, r3
 8001950:	d106      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2200      	movs	r2, #0
 8001958:	2101      	movs	r1, #1
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fbfa 	bl	8001154 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2102      	movs	r1, #2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fbe0 	bl	800112c <LL_ADC_GetOffsetChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10a      	bne.n	800198c <HAL_ADC_ConfigChannel+0x268>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2102      	movs	r1, #2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fbd5 	bl	800112c <LL_ADC_GetOffsetChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	0e9b      	lsrs	r3, r3, #26
 8001986:	f003 021f 	and.w	r2, r3, #31
 800198a:	e010      	b.n	80019ae <HAL_ADC_ConfigChannel+0x28a>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2102      	movs	r1, #2
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fbca 	bl	800112c <LL_ADC_GetOffsetChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800199e:	fa93 f3a3 	rbit	r3, r3
 80019a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80019a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a6:	fab3 f383 	clz	r3, r3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d105      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x2a2>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	0e9b      	lsrs	r3, r3, #26
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	e00a      	b.n	80019dc <HAL_ADC_ConfigChannel+0x2b8>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80019d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	429a      	cmp	r2, r3
 80019de:	d106      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2200      	movs	r2, #0
 80019e6:	2102      	movs	r1, #2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fbb3 	bl	8001154 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2103      	movs	r1, #3
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fb99 	bl	800112c <LL_ADC_GetOffsetChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10a      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x2f6>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2103      	movs	r1, #3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fb8e 	bl	800112c <LL_ADC_GetOffsetChannel>
 8001a10:	4603      	mov	r3, r0
 8001a12:	0e9b      	lsrs	r3, r3, #26
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	e010      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x318>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2103      	movs	r1, #3
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fb83 	bl	800112c <LL_ADC_GetOffsetChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a2c:	fa93 f3a3 	rbit	r3, r3
 8001a30:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a34:	fab3 f383 	clz	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d105      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x330>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	0e9b      	lsrs	r3, r3, #26
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	e00a      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x346>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d106      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	2103      	movs	r1, #3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fb6c 	bl	8001154 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fc57 	bl	8001334 <LL_ADC_IsEnabled>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f040 810c 	bne.w	8001ca6 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6819      	ldr	r1, [r3, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f7ff fbc4 	bl	8001228 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4aa8      	ldr	r2, [pc, #672]	; (8001d48 <HAL_ADC_ConfigChannel+0x624>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	f040 80fd 	bne.w	8001ca6 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10b      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x3b0>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	0e9b      	lsrs	r3, r3, #26
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	bf94      	ite	ls
 8001acc:	2301      	movls	r3, #1
 8001ace:	2300      	movhi	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	e012      	b.n	8001afa <HAL_ADC_ConfigChannel+0x3d6>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	3301      	adds	r3, #1
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	2b09      	cmp	r3, #9
 8001af2:	bf94      	ite	ls
 8001af4:	2301      	movls	r3, #1
 8001af6:	2300      	movhi	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d064      	beq.n	8001bc8 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x3f6>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0e9b      	lsrs	r3, r3, #26
 8001b10:	3301      	adds	r3, #1
 8001b12:	069b      	lsls	r3, r3, #26
 8001b14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b18:	e00e      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x414>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	3301      	adds	r3, #1
 8001b32:	069b      	lsls	r3, r3, #26
 8001b34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x434>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	0e9b      	lsrs	r3, r3, #26
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f003 031f 	and.w	r3, r3, #31
 8001b50:	2101      	movs	r1, #1
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	e010      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x456>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b68:	fab3 f383 	clz	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	2101      	movs	r1, #1
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	ea42 0103 	orr.w	r1, r2, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10a      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x47c>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	0e9b      	lsrs	r3, r3, #26
 8001b90:	3301      	adds	r3, #1
 8001b92:	f003 021f 	and.w	r2, r3, #31
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	051b      	lsls	r3, r3, #20
 8001b9e:	e011      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x4a0>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	e069      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x4c0>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0e9b      	lsrs	r3, r3, #26
 8001bda:	3301      	adds	r3, #1
 8001bdc:	069b      	lsls	r3, r3, #26
 8001bde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001be2:	e00e      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x4de>
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	61fb      	str	r3, [r7, #28]
  return result;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fab3 f383 	clz	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	069b      	lsls	r3, r3, #26
 8001bfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x4fe>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0e9b      	lsrs	r3, r3, #26
 8001c14:	3301      	adds	r3, #1
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	e010      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x520>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	617b      	str	r3, [r7, #20]
  return result;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	2101      	movs	r1, #1
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	ea42 0103 	orr.w	r1, r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10d      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x54c>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0e9b      	lsrs	r3, r3, #26
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	3b1e      	subs	r3, #30
 8001c68:	051b      	lsls	r3, r3, #20
 8001c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	e014      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x576>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	60fb      	str	r3, [r7, #12]
  return result;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	3b1e      	subs	r3, #30
 8001c94:	051b      	lsls	r3, r3, #20
 8001c96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c9a:	430b      	orrs	r3, r1
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	6892      	ldr	r2, [r2, #8]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7ff fa98 	bl	80011d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <HAL_ADC_ConfigChannel+0x628>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d07c      	beq.n	8001dac <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cb2:	4827      	ldr	r0, [pc, #156]	; (8001d50 <HAL_ADC_ConfigChannel+0x62c>)
 8001cb4:	f7ff fa0a 	bl	80010cc <LL_ADC_GetCommonPathInternalCh>
 8001cb8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a24      	ldr	r2, [pc, #144]	; (8001d54 <HAL_ADC_ConfigChannel+0x630>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d126      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x5f0>
 8001cc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d120      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a20      	ldr	r2, [pc, #128]	; (8001d58 <HAL_ADC_ConfigChannel+0x634>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d167      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ce0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481a      	ldr	r0, [pc, #104]	; (8001d50 <HAL_ADC_ConfigChannel+0x62c>)
 8001ce8:	f7ff f9dd 	bl	80010a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_ADC_ConfigChannel+0x638>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	099b      	lsrs	r3, r3, #6
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	; (8001d60 <HAL_ADC_ConfigChannel+0x63c>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	099a      	lsrs	r2, r3, #6
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d04:	e002      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f9      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d12:	e04b      	b.n	8001dac <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <HAL_ADC_ConfigChannel+0x640>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d124      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x644>
 8001d1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d11e      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_ADC_ConfigChannel+0x634>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d13b      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4804      	ldr	r0, [pc, #16]	; (8001d50 <HAL_ADC_ConfigChannel+0x62c>)
 8001d40:	f7ff f9b1 	bl	80010a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d44:	e032      	b.n	8001dac <HAL_ADC_ConfigChannel+0x688>
 8001d46:	bf00      	nop
 8001d48:	407f0000 	.word	0x407f0000
 8001d4c:	80080000 	.word	0x80080000
 8001d50:	50040300 	.word	0x50040300
 8001d54:	c7520000 	.word	0xc7520000
 8001d58:	50040000 	.word	0x50040000
 8001d5c:	20000014 	.word	0x20000014
 8001d60:	053e2d63 	.word	0x053e2d63
 8001d64:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a14      	ldr	r2, [pc, #80]	; (8001dc0 <HAL_ADC_ConfigChannel+0x69c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d11c      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d116      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <HAL_ADC_ConfigChannel+0x6a0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d111      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d90:	4619      	mov	r1, r3
 8001d92:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <HAL_ADC_ConfigChannel+0x6a4>)
 8001d94:	f7ff f987 	bl	80010a6 <LL_ADC_SetCommonPathInternalCh>
 8001d98:	e008      	b.n	8001dac <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	f043 0220 	orr.w	r2, r3, #32
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001db4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3798      	adds	r7, #152	; 0x98
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	80000001 	.word	0x80000001
 8001dc4:	50040000 	.word	0x50040000
 8001dc8:	50040300 	.word	0x50040300

08001dcc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff faab 	bl	8001334 <LL_ADC_IsEnabled>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d146      	bne.n	8001e72 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <ADC_Enable+0xb0>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00d      	beq.n	8001e0e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	f043 0210 	orr.w	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e032      	b.n	8001e74 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fa7a 	bl	800130c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e18:	f7ff f904 	bl	8001024 <HAL_GetTick>
 8001e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e1e:	e021      	b.n	8001e64 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fa85 	bl	8001334 <LL_ADC_IsEnabled>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d104      	bne.n	8001e3a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fa69 	bl	800130c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e3a:	f7ff f8f3 	bl	8001024 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d90d      	bls.n	8001e64 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4c:	f043 0210 	orr.w	r2, r3, #16
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e007      	b.n	8001e74 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d1d6      	bne.n	8001e20 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	8000003f 	.word	0x8000003f

08001e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb2:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	60d3      	str	r3, [r2, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db0b      	blt.n	8001f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <__NVIC_EnableIRQ+0x38>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	2001      	movs	r0, #1
 8001f06:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
         );
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fec:	d301      	bcc.n	8001ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00f      	b.n	8002012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <SysTick_Config+0x40>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8002000:	f7ff ff8e 	bl	8001f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <SysTick_Config+0x40>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200a:	4b04      	ldr	r3, [pc, #16]	; (800201c <SysTick_Config+0x40>)
 800200c:	2207      	movs	r2, #7
 800200e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	e000e010 	.word	0xe000e010

08002020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff ff29 	bl	8001e80 <__NVIC_SetPriorityGrouping>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002048:	f7ff ff3e 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 800204c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	6978      	ldr	r0, [r7, #20]
 8002054:	f7ff ff8e 	bl	8001f74 <NVIC_EncodePriority>
 8002058:	4602      	mov	r2, r0
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff5d 	bl	8001f20 <__NVIC_SetPriority>
}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff31 	bl	8001ee4 <__NVIC_EnableIRQ>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ffa2 	bl	8001fdc <SysTick_Config>
 8002098:	4603      	mov	r3, r0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e014      	b.n	80020de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	791b      	ldrb	r3, [r3, #4]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f004 fb79 	bl	80067bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2202      	movs	r2, #2
 80020ce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	795b      	ldrb	r3, [r3, #5]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_DAC_Start+0x16>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e03b      	b.n	8002174 <HAL_DAC_Start+0x8e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2202      	movs	r2, #2
 8002106:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2201      	movs	r2, #1
 8002116:	409a      	lsls	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10f      	bne.n	8002146 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002130:	2b04      	cmp	r3, #4
 8002132:	d118      	bne.n	8002166 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	e00f      	b.n	8002166 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002150:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002154:	d107      	bne.n	8002166 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0202 	orr.w	r2, r2, #2
 8002164:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	795b      	ldrb	r3, [r3, #5]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_DAC_ConfigChannel+0x1c>
 8002198:	2302      	movs	r3, #2
 800219a:	e107      	b.n	80023ac <HAL_DAC_ConfigChannel+0x22c>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2202      	movs	r2, #2
 80021a6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d174      	bne.n	800229a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d137      	bne.n	8002226 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80021b6:	f7fe ff35 	bl	8001024 <HAL_GetTick>
 80021ba:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80021bc:	e011      	b.n	80021e2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80021be:	f7fe ff31 	bl	8001024 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d90a      	bls.n	80021e2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f043 0208 	orr.w	r2, r3, #8
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2203      	movs	r2, #3
 80021dc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e0e4      	b.n	80023ac <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e6      	bne.n	80021be <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80021f0:	2001      	movs	r0, #1
 80021f2:	f7fe ff23 	bl	800103c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	6992      	ldr	r2, [r2, #24]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002200:	e01e      	b.n	8002240 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002202:	f7fe ff0f 	bl	8001024 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d90a      	bls.n	8002226 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f043 0208 	orr.w	r2, r3, #8
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2203      	movs	r2, #3
 8002220:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e0c2      	b.n	80023ac <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222c:	2b00      	cmp	r3, #0
 800222e:	dbe8      	blt.n	8002202 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002230:	2001      	movs	r0, #1
 8002232:	f7fe ff03 	bl	800103c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	6992      	ldr	r2, [r2, #24]
 800223e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	ea02 0103 	and.w	r1, r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	409a      	lsls	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	21ff      	movs	r1, #255	; 0xff
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	ea02 0103 	and.w	r1, r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	6a1a      	ldr	r2, [r3, #32]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	409a      	lsls	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d11d      	bne.n	80022de <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
  /* Get the DAC CCR value */
  tmpreg1 = hdac->Instance->CCR;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	61bb      	str	r3, [r7, #24]
  /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	221f      	movs	r2, #31
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected trimming offset */
  tmpreg2 = sConfig->DAC_TrimmingValue;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	617b      	str	r3, [r7, #20]
  /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CCR */
  hdac->Instance->CCR = tmpreg1;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	2207      	movs	r2, #7
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	431a      	orrs	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6819      	ldr	r1, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	400a      	ands	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	22c0      	movs	r2, #192	; 0xc0
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43da      	mvns	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	400a      	ands	r2, r1
 800239c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3720      	adds	r7, #32
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d005      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2204      	movs	r2, #4
 80023d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	e029      	b.n	800242c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 020e 	bic.w	r2, r2, #14
 80023e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	f003 021c 	and.w	r2, r3, #28
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f202 	lsl.w	r2, r1, r2
 800240a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
    }
  }
  return status;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002446:	e148      	b.n	80026da <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2101      	movs	r1, #1
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 813a 	beq.w	80026d4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x38>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b12      	cmp	r3, #18
 800246e:	d123      	bne.n	80024b8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	08da      	lsrs	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3208      	adds	r2, #8
 8002478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	220f      	movs	r2, #15
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	08da      	lsrs	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3208      	adds	r2, #8
 80024b2:	6939      	ldr	r1, [r7, #16]
 80024b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0203 	and.w	r2, r3, #3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d00b      	beq.n	800250c <HAL_GPIO_Init+0xd4>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d007      	beq.n	800250c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002500:	2b11      	cmp	r3, #17
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b12      	cmp	r3, #18
 800250a:	d130      	bne.n	800256e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002542:	2201      	movs	r2, #1
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 0201 	and.w	r2, r3, #1
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8094 	beq.w	80026d4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ac:	4b52      	ldr	r3, [pc, #328]	; (80026f8 <HAL_GPIO_Init+0x2c0>)
 80025ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b0:	4a51      	ldr	r2, [pc, #324]	; (80026f8 <HAL_GPIO_Init+0x2c0>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6613      	str	r3, [r2, #96]	; 0x60
 80025b8:	4b4f      	ldr	r3, [pc, #316]	; (80026f8 <HAL_GPIO_Init+0x2c0>)
 80025ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025c4:	4a4d      	ldr	r2, [pc, #308]	; (80026fc <HAL_GPIO_Init+0x2c4>)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	089b      	lsrs	r3, r3, #2
 80025ca:	3302      	adds	r3, #2
 80025cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025ee:	d00d      	beq.n	800260c <HAL_GPIO_Init+0x1d4>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a43      	ldr	r2, [pc, #268]	; (8002700 <HAL_GPIO_Init+0x2c8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d007      	beq.n	8002608 <HAL_GPIO_Init+0x1d0>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a42      	ldr	r2, [pc, #264]	; (8002704 <HAL_GPIO_Init+0x2cc>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_GPIO_Init+0x1cc>
 8002600:	2302      	movs	r3, #2
 8002602:	e004      	b.n	800260e <HAL_GPIO_Init+0x1d6>
 8002604:	2307      	movs	r3, #7
 8002606:	e002      	b.n	800260e <HAL_GPIO_Init+0x1d6>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <HAL_GPIO_Init+0x1d6>
 800260c:	2300      	movs	r3, #0
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	f002 0203 	and.w	r2, r2, #3
 8002614:	0092      	lsls	r2, r2, #2
 8002616:	4093      	lsls	r3, r2
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800261e:	4937      	ldr	r1, [pc, #220]	; (80026fc <HAL_GPIO_Init+0x2c4>)
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800262c:	4b36      	ldr	r3, [pc, #216]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002650:	4a2d      	ldr	r2, [pc, #180]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002656:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	43db      	mvns	r3, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800267a:	4a23      	ldr	r2, [pc, #140]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002680:	4b21      	ldr	r3, [pc, #132]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	43db      	mvns	r3, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026a4:	4a18      	ldr	r2, [pc, #96]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026aa:	4b17      	ldr	r3, [pc, #92]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026ce:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <HAL_GPIO_Init+0x2d0>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3301      	adds	r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f47f aeaf 	bne.w	8002448 <HAL_GPIO_Init+0x10>
  }
}
 80026ea:	bf00      	nop
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40010000 	.word	0x40010000
 8002700:	48000400 	.word	0x48000400
 8002704:	48000800 	.word	0x48000800
 8002708:	40010400 	.word	0x40010400

0800270c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
 8002718:	4613      	mov	r3, r2
 800271a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800271c:	787b      	ldrb	r3, [r7, #1]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002722:	887a      	ldrh	r2, [r7, #2]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002728:	e002      	b.n	8002730 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_PWREx_GetVoltageRange+0x18>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40007000 	.word	0x40007000

08002758 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002766:	d130      	bne.n	80027ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002768:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002774:	d038      	beq.n	80027e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800277e:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002780:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002784:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2232      	movs	r2, #50	; 0x32
 800278c:	fb02 f303 	mul.w	r3, r2, r3
 8002790:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	0c9b      	lsrs	r3, r3, #18
 8002798:	3301      	adds	r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800279c:	e002      	b.n	80027a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b0:	d102      	bne.n	80027b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f2      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027b8:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c4:	d110      	bne.n	80027e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e00f      	b.n	80027ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d6:	d007      	beq.n	80027e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027d8:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027e0:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40007000 	.word	0x40007000
 80027fc:	20000014 	.word	0x20000014
 8002800:	431bde83 	.word	0x431bde83

08002804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e3db      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002816:	4ba4      	ldr	r3, [pc, #656]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002820:	4ba1      	ldr	r3, [pc, #644]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80e1 	beq.w	80029fa <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <HAL_RCC_OscConfig+0x4a>
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b0c      	cmp	r3, #12
 8002842:	f040 8088 	bne.w	8002956 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 8084 	bne.w	8002956 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800284e:	4b96      	ldr	r3, [pc, #600]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_RCC_OscConfig+0x62>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e3b3      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1a      	ldr	r2, [r3, #32]
 800286a:	4b8f      	ldr	r3, [pc, #572]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <HAL_RCC_OscConfig+0x7c>
 8002876:	4b8c      	ldr	r3, [pc, #560]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800287e:	e005      	b.n	800288c <HAL_RCC_OscConfig+0x88>
 8002880:	4b89      	ldr	r3, [pc, #548]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800288c:	4293      	cmp	r3, r2
 800288e:	d223      	bcs.n	80028d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fd47 	bl	8003328 <RCC_SetFlashLatencyFromMSIRange>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e394      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a4:	4b80      	ldr	r3, [pc, #512]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a7f      	ldr	r2, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80028aa:	f043 0308 	orr.w	r3, r3, #8
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b7d      	ldr	r3, [pc, #500]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	497a      	ldr	r1, [pc, #488]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028c2:	4b79      	ldr	r3, [pc, #484]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	021b      	lsls	r3, r3, #8
 80028d0:	4975      	ldr	r1, [pc, #468]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
 80028d6:	e022      	b.n	800291e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028d8:	4b73      	ldr	r3, [pc, #460]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a72      	ldr	r2, [pc, #456]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80028de:	f043 0308 	orr.w	r3, r3, #8
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b70      	ldr	r3, [pc, #448]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	496d      	ldr	r1, [pc, #436]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028f6:	4b6c      	ldr	r3, [pc, #432]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	4968      	ldr	r1, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fd0a 	bl	8003328 <RCC_SetFlashLatencyFromMSIRange>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e357      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800291e:	f000 fc41 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8002922:	4601      	mov	r1, r0
 8002924:	4b60      	ldr	r3, [pc, #384]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	4a5f      	ldr	r2, [pc, #380]	; (8002aac <HAL_RCC_OscConfig+0x2a8>)
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	fa21 f303 	lsr.w	r3, r1, r3
 800293a:	4a5d      	ldr	r2, [pc, #372]	; (8002ab0 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800293e:	4b5d      	ldr	r3, [pc, #372]	; (8002ab4 <HAL_RCC_OscConfig+0x2b0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fe fb22 	bl	8000f8c <HAL_InitTick>
 8002948:	4603      	mov	r3, r0
 800294a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d052      	beq.n	80029f8 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	e33b      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d032      	beq.n	80029c4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800295e:	4b52      	ldr	r3, [pc, #328]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a51      	ldr	r2, [pc, #324]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800296a:	f7fe fb5b 	bl	8001024 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002972:	f7fe fb57 	bl	8001024 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e324      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002984:	4b48      	ldr	r3, [pc, #288]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002990:	4b45      	ldr	r3, [pc, #276]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a44      	ldr	r2, [pc, #272]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002996:	f043 0308 	orr.w	r3, r3, #8
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	4b42      	ldr	r3, [pc, #264]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	493f      	ldr	r1, [pc, #252]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ae:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	493a      	ldr	r1, [pc, #232]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
 80029c2:	e01a      	b.n	80029fa <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029c4:	4b38      	ldr	r3, [pc, #224]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a37      	ldr	r2, [pc, #220]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029d0:	f7fe fb28 	bl	8001024 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029d8:	f7fe fb24 	bl	8001024 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e2f1      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029ea:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x1d4>
 80029f6:	e000      	b.n	80029fa <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d074      	beq.n	8002af0 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_OscConfig+0x214>
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2b0c      	cmp	r3, #12
 8002a10:	d10e      	bne.n	8002a30 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d10b      	bne.n	8002a30 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a18:	4b23      	ldr	r3, [pc, #140]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d064      	beq.n	8002aee <HAL_RCC_OscConfig+0x2ea>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d160      	bne.n	8002aee <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e2ce      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a38:	d106      	bne.n	8002a48 <HAL_RCC_OscConfig+0x244>
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e01d      	b.n	8002a84 <HAL_RCC_OscConfig+0x280>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x268>
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a11      	ldr	r2, [pc, #68]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0x280>
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_RCC_OscConfig+0x2a4>)
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01c      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe faca 	bl	8001024 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a92:	e011      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe fac6 	bl	8001024 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	; 0x64
 8002aa0:	d90a      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e293      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	080091a8 	.word	0x080091a8
 8002ab0:	20000014 	.word	0x20000014
 8002ab4:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab8:	4bae      	ldr	r3, [pc, #696]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0e7      	beq.n	8002a94 <HAL_RCC_OscConfig+0x290>
 8002ac4:	e014      	b.n	8002af0 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac6:	f7fe faad 	bl	8001024 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ace:	f7fe faa9 	bl	8001024 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b64      	cmp	r3, #100	; 0x64
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e276      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ae0:	4ba4      	ldr	r3, [pc, #656]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f0      	bne.n	8002ace <HAL_RCC_OscConfig+0x2ca>
 8002aec:	e000      	b.n	8002af0 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d060      	beq.n	8002bbe <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d005      	beq.n	8002b0e <HAL_RCC_OscConfig+0x30a>
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d119      	bne.n	8002b3c <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d116      	bne.n	8002b3c <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b0e:	4b99      	ldr	r3, [pc, #612]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_RCC_OscConfig+0x322>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e253      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b93      	ldr	r3, [pc, #588]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	498f      	ldr	r1, [pc, #572]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b3a:	e040      	b.n	8002bbe <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d023      	beq.n	8002b8c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b44:	4b8b      	ldr	r3, [pc, #556]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a8a      	ldr	r2, [pc, #552]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fa68 	bl	8001024 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b58:	f7fe fa64 	bl	8001024 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e231      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b6a:	4b82      	ldr	r3, [pc, #520]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b76:	4b7f      	ldr	r3, [pc, #508]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	061b      	lsls	r3, r3, #24
 8002b84:	497b      	ldr	r1, [pc, #492]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
 8002b8a:	e018      	b.n	8002bbe <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8c:	4b79      	ldr	r3, [pc, #484]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a78      	ldr	r2, [pc, #480]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe fa44 	bl	8001024 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba0:	f7fe fa40 	bl	8001024 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e20d      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bb2:	4b70      	ldr	r3, [pc, #448]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d03c      	beq.n	8002c44 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd2:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd8:	4a66      	ldr	r2, [pc, #408]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be2:	f7fe fa1f 	bl	8001024 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bea:	f7fe fa1b 	bl	8001024 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e1e8      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bfc:	4b5d      	ldr	r3, [pc, #372]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0ef      	beq.n	8002bea <HAL_RCC_OscConfig+0x3e6>
 8002c0a:	e01b      	b.n	8002c44 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0c:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c12:	4a58      	ldr	r2, [pc, #352]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002c14:	f023 0301 	bic.w	r3, r3, #1
 8002c18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7fe fa02 	bl	8001024 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c24:	f7fe f9fe 	bl	8001024 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e1cb      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c36:	4b4f      	ldr	r3, [pc, #316]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ef      	bne.n	8002c24 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80a5 	beq.w	8002d9c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	4b44      	ldr	r3, [pc, #272]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	4a43      	ldr	r2, [pc, #268]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c6e:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	; (8002d78 <HAL_RCC_OscConfig+0x574>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d118      	bne.n	8002cbc <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_RCC_OscConfig+0x574>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a3a      	ldr	r2, [pc, #232]	; (8002d78 <HAL_RCC_OscConfig+0x574>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c96:	f7fe f9c5 	bl	8001024 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9e:	f7fe f9c1 	bl	8001024 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e18e      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <HAL_RCC_OscConfig+0x574>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d108      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x4d2>
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	4a2a      	ldr	r2, [pc, #168]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd4:	e024      	b.n	8002d20 <HAL_RCC_OscConfig+0x51c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d110      	bne.n	8002d00 <HAL_RCC_OscConfig+0x4fc>
 8002cde:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce4:	4a23      	ldr	r2, [pc, #140]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002ce6:	f043 0304 	orr.w	r3, r3, #4
 8002cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cee:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cfe:	e00f      	b.n	8002d20 <HAL_RCC_OscConfig+0x51c>
 8002d00:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	4a1b      	ldr	r2, [pc, #108]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002d08:	f023 0301 	bic.w	r3, r3, #1
 8002d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d016      	beq.n	8002d56 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe f97c 	bl	8001024 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe f978 	bl	8001024 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e143      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_OscConfig+0x570>)
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ed      	beq.n	8002d30 <HAL_RCC_OscConfig+0x52c>
 8002d54:	e019      	b.n	8002d8a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d56:	f7fe f965 	bl	8001024 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d5c:	e00e      	b.n	8002d7c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fe f961 	bl	8001024 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d905      	bls.n	8002d7c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e12c      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d7c:	4b96      	ldr	r3, [pc, #600]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e9      	bne.n	8002d5e <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d8a:	7ffb      	ldrb	r3, [r7, #31]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d90:	4b91      	ldr	r3, [pc, #580]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d94:	4a90      	ldr	r2, [pc, #576]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d03c      	beq.n	8002e22 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01c      	beq.n	8002dea <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002db0:	4b89      	ldr	r3, [pc, #548]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002db6:	4a88      	ldr	r2, [pc, #544]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe f930 	bl	8001024 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dc8:	f7fe f92c 	bl	8001024 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e0f9      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dda:	4b7f      	ldr	r3, [pc, #508]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0ef      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x5c4>
 8002de8:	e01b      	b.n	8002e22 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dea:	4b7b      	ldr	r3, [pc, #492]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df0:	4a79      	ldr	r2, [pc, #484]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002df2:	f023 0301 	bic.w	r3, r3, #1
 8002df6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfa:	f7fe f913 	bl	8001024 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e02:	f7fe f90f 	bl	8001024 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0dc      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e14:	4b70      	ldr	r3, [pc, #448]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ef      	bne.n	8002e02 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80d0 	beq.w	8002fcc <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	f000 808d 	beq.w	8002f4e <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d15a      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3c:	4b66      	ldr	r3, [pc, #408]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a65      	ldr	r2, [pc, #404]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe f8ec 	bl	8001024 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe f8e8 	bl	8001024 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e0b5      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e62:	4b5d      	ldr	r3, [pc, #372]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e6e:	4b5a      	ldr	r3, [pc, #360]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	4b5a      	ldr	r3, [pc, #360]	; (8002fdc <HAL_RCC_OscConfig+0x7d8>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e7e:	3a01      	subs	r2, #1
 8002e80:	0112      	lsls	r2, r2, #4
 8002e82:	4311      	orrs	r1, r2
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e88:	0212      	lsls	r2, r2, #8
 8002e8a:	4311      	orrs	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e90:	0852      	lsrs	r2, r2, #1
 8002e92:	3a01      	subs	r2, #1
 8002e94:	0552      	lsls	r2, r2, #21
 8002e96:	4311      	orrs	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e9c:	0852      	lsrs	r2, r2, #1
 8002e9e:	3a01      	subs	r2, #1
 8002ea0:	0652      	lsls	r2, r2, #25
 8002ea2:	4311      	orrs	r1, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ea8:	06d2      	lsls	r2, r2, #27
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	494a      	ldr	r1, [pc, #296]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb2:	4b49      	ldr	r3, [pc, #292]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a48      	ldr	r2, [pc, #288]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ebc:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ebe:	4b46      	ldr	r3, [pc, #280]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4a45      	ldr	r2, [pc, #276]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002ec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eca:	f7fe f8ab 	bl	8001024 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed2:	f7fe f8a7 	bl	8001024 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e074      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee4:	4b3c      	ldr	r3, [pc, #240]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x6ce>
 8002ef0:	e06c      	b.n	8002fcc <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef2:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a38      	ldr	r2, [pc, #224]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002efc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002efe:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f0a:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	4a32      	ldr	r2, [pc, #200]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002f10:	f023 0303 	bic.w	r3, r3, #3
 8002f14:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002f16:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	4a2f      	ldr	r2, [pc, #188]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002f1c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f24:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7fe f87d 	bl	8001024 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7fe f879 	bl	8001024 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e046      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x72a>
 8002f4c:	e03e      	b.n	8002fcc <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e039      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002f5a:	4b1f      	ldr	r3, [pc, #124]	; (8002fd8 <HAL_RCC_OscConfig+0x7d4>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f003 0203 	and.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d12c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d123      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d113      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	3b01      	subs	r3, #1
 8002fae:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d109      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3720      	adds	r7, #32
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	019d808c 	.word	0x019d808c

08002fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0c8      	b.n	8003186 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b66      	ldr	r3, [pc, #408]	; (8003190 <HAL_RCC_ClockConfig+0x1b0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d910      	bls.n	8003024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b63      	ldr	r3, [pc, #396]	; (8003190 <HAL_RCC_ClockConfig+0x1b0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 0207 	bic.w	r2, r3, #7
 800300a:	4961      	ldr	r1, [pc, #388]	; (8003190 <HAL_RCC_ClockConfig+0x1b0>)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b5f      	ldr	r3, [pc, #380]	; (8003190 <HAL_RCC_ClockConfig+0x1b0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0b0      	b.n	8003186 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d04c      	beq.n	80030ca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d107      	bne.n	8003048 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003038:	4b56      	ldr	r3, [pc, #344]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d121      	bne.n	8003088 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e09e      	b.n	8003186 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d107      	bne.n	8003060 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003050:	4b50      	ldr	r3, [pc, #320]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d115      	bne.n	8003088 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e092      	b.n	8003186 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d107      	bne.n	8003078 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003068:	4b4a      	ldr	r3, [pc, #296]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e086      	b.n	8003186 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003078:	4b46      	ldr	r3, [pc, #280]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e07e      	b.n	8003186 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003088:	4b42      	ldr	r3, [pc, #264]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 0203 	bic.w	r2, r3, #3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	493f      	ldr	r1, [pc, #252]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800309a:	f7fd ffc3 	bl	8001024 <HAL_GetTick>
 800309e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a2:	f7fd ffbf 	bl	8001024 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e066      	b.n	8003186 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b8:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 020c 	and.w	r2, r3, #12
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d1eb      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d6:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	492c      	ldr	r1, [pc, #176]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b29      	ldr	r3, [pc, #164]	; (8003190 <HAL_RCC_ClockConfig+0x1b0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d210      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b26      	ldr	r3, [pc, #152]	; (8003190 <HAL_RCC_ClockConfig+0x1b0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 0207 	bic.w	r2, r3, #7
 80030fe:	4924      	ldr	r1, [pc, #144]	; (8003190 <HAL_RCC_ClockConfig+0x1b0>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b22      	ldr	r3, [pc, #136]	; (8003190 <HAL_RCC_ClockConfig+0x1b0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e036      	b.n	8003186 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4918      	ldr	r1, [pc, #96]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4910      	ldr	r1, [pc, #64]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003156:	f000 f825 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 800315a:	4601      	mov	r1, r0
 800315c:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <HAL_RCC_ClockConfig+0x1b4>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	4a0c      	ldr	r2, [pc, #48]	; (8003198 <HAL_RCC_ClockConfig+0x1b8>)
 8003168:	5cd3      	ldrb	r3, [r2, r3]
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	fa21 f303 	lsr.w	r3, r1, r3
 8003172:	4a0a      	ldr	r2, [pc, #40]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd ff06 	bl	8000f8c <HAL_InitTick>
 8003180:	4603      	mov	r3, r0
 8003182:	72fb      	strb	r3, [r7, #11]

  return status;
 8003184:	7afb      	ldrb	r3, [r7, #11]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40022000 	.word	0x40022000
 8003194:	40021000 	.word	0x40021000
 8003198:	080091a8 	.word	0x080091a8
 800319c:	20000014 	.word	0x20000014
 80031a0:	20000000 	.word	0x20000000

080031a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	; 0x24
 80031a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b2:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031bc:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x34>
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b0c      	cmp	r3, #12
 80031d0:	d121      	bne.n	8003216 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d11e      	bne.n	8003216 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031d8:	4b33      	ldr	r3, [pc, #204]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d107      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031e4:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80031e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	e005      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031f4:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x104>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003200:	4a2a      	ldr	r2, [pc, #168]	; (80032ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003208:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10d      	bne.n	800322c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003214:	e00a      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b04      	cmp	r3, #4
 800321a:	d102      	bne.n	8003222 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800321c:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	e004      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d101      	bne.n	800322c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003228:	4b22      	ldr	r3, [pc, #136]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800322a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d133      	bne.n	800329a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003232:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d002      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0xa4>
 8003242:	2b03      	cmp	r3, #3
 8003244:	d003      	beq.n	800324e <HAL_RCC_GetSysClockFreq+0xaa>
 8003246:	e005      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800324a:	617b      	str	r3, [r7, #20]
      break;
 800324c:	e005      	b.n	800325a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800324e:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003250:	617b      	str	r3, [r7, #20]
      break;
 8003252:	e002      	b.n	800325a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	617b      	str	r3, [r7, #20]
      break;
 8003258:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	3301      	adds	r3, #1
 8003266:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	fb02 f203 	mul.w	r2, r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	fbb2 f3f3 	udiv	r3, r2, r3
 800327e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	0e5b      	lsrs	r3, r3, #25
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	3301      	adds	r3, #1
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800329a:	69bb      	ldr	r3, [r7, #24]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3724      	adds	r7, #36	; 0x24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	40021000 	.word	0x40021000
 80032ac:	080091c0 	.word	0x080091c0
 80032b0:	00f42400 	.word	0x00f42400
 80032b4:	007a1200 	.word	0x007a1200

080032b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032bc:	4b03      	ldr	r3, [pc, #12]	; (80032cc <HAL_RCC_GetHCLKFreq+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000014 	.word	0x20000014

080032d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032d4:	f7ff fff0 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 80032d8:	4601      	mov	r1, r0
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	4a04      	ldr	r2, [pc, #16]	; (80032f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032e6:	5cd3      	ldrb	r3, [r2, r3]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	080091b8 	.word	0x080091b8

080032fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003300:	f7ff ffda 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 8003304:	4601      	mov	r1, r0
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0adb      	lsrs	r3, r3, #11
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4a04      	ldr	r2, [pc, #16]	; (8003324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003312:	5cd3      	ldrb	r3, [r2, r3]
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	fa21 f303 	lsr.w	r3, r1, r3
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40021000 	.word	0x40021000
 8003324:	080091b8 	.word	0x080091b8

08003328 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003334:	4b2a      	ldr	r3, [pc, #168]	; (80033e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003340:	f7ff f9fc 	bl	800273c <HAL_PWREx_GetVoltageRange>
 8003344:	6178      	str	r0, [r7, #20]
 8003346:	e014      	b.n	8003372 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003348:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	4a24      	ldr	r2, [pc, #144]	; (80033e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800334e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003352:	6593      	str	r3, [r2, #88]	; 0x58
 8003354:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003360:	f7ff f9ec 	bl	800273c <HAL_PWREx_GetVoltageRange>
 8003364:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003366:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	4a1d      	ldr	r2, [pc, #116]	; (80033e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800336c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003370:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003378:	d10b      	bne.n	8003392 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b80      	cmp	r3, #128	; 0x80
 800337e:	d919      	bls.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2ba0      	cmp	r3, #160	; 0xa0
 8003384:	d902      	bls.n	800338c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003386:	2302      	movs	r3, #2
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	e013      	b.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800338c:	2301      	movs	r3, #1
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	e010      	b.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b80      	cmp	r3, #128	; 0x80
 8003396:	d902      	bls.n	800339e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003398:	2303      	movs	r3, #3
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	e00a      	b.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b80      	cmp	r3, #128	; 0x80
 80033a2:	d102      	bne.n	80033aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033a4:	2302      	movs	r3, #2
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	e004      	b.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b70      	cmp	r3, #112	; 0x70
 80033ae:	d101      	bne.n	80033b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033b0:	2301      	movs	r3, #1
 80033b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 0207 	bic.w	r2, r3, #7
 80033bc:	4909      	ldr	r1, [pc, #36]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d001      	beq.n	80033d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40022000 	.word	0x40022000

080033e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033f0:	2300      	movs	r3, #0
 80033f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033f4:	2300      	movs	r3, #0
 80033f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003400:	2b00      	cmp	r3, #0
 8003402:	d02f      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800340c:	d005      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800340e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003412:	d015      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003418:	e00f      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800341a:	4bac      	ldr	r3, [pc, #688]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	4aab      	ldr	r2, [pc, #684]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003426:	e00c      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f000 f9cc 	bl	80037cc <RCCEx_PLLSAI1_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003438:	e003      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	74fb      	strb	r3, [r7, #19]
      break;
 800343e:	e000      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003442:	7cfb      	ldrb	r3, [r7, #19]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003448:	4ba0      	ldr	r3, [pc, #640]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003456:	499d      	ldr	r1, [pc, #628]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800345e:	e001      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 8099 	beq.w	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003476:	4b95      	ldr	r3, [pc, #596]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003486:	2300      	movs	r3, #0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00d      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348c:	4b8f      	ldr	r3, [pc, #572]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	4a8e      	ldr	r2, [pc, #568]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003496:	6593      	str	r3, [r2, #88]	; 0x58
 8003498:	4b8c      	ldr	r3, [pc, #560]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a4:	2301      	movs	r3, #1
 80034a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a8:	4b89      	ldr	r3, [pc, #548]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a88      	ldr	r2, [pc, #544]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034b4:	f7fd fdb6 	bl	8001024 <HAL_GetTick>
 80034b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034ba:	e009      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034bc:	f7fd fdb2 	bl	8001024 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d902      	bls.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	74fb      	strb	r3, [r7, #19]
        break;
 80034ce:	e005      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034d0:	4b7f      	ldr	r3, [pc, #508]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ef      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80034dc:	7cfb      	ldrb	r3, [r7, #19]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d155      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034e2:	4b7a      	ldr	r3, [pc, #488]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01e      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d019      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034fe:	4b73      	ldr	r3, [pc, #460]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003508:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800350a:	4b70      	ldr	r3, [pc, #448]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	4a6e      	ldr	r2, [pc, #440]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800351a:	4b6c      	ldr	r3, [pc, #432]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003520:	4a6a      	ldr	r2, [pc, #424]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800352a:	4a68      	ldr	r2, [pc, #416]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d016      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fd fd72 	bl	8001024 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003542:	e00b      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003544:	f7fd fd6e 	bl	8001024 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d902      	bls.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	74fb      	strb	r3, [r7, #19]
            break;
 800355a:	e006      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355c:	4b5b      	ldr	r3, [pc, #364]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ec      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10b      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003570:	4b56      	ldr	r3, [pc, #344]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800357e:	4953      	ldr	r1, [pc, #332]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003586:	e004      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	74bb      	strb	r3, [r7, #18]
 800358c:	e001      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358e:	7cfb      	ldrb	r3, [r7, #19]
 8003590:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003592:	7c7b      	ldrb	r3, [r7, #17]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d105      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003598:	4b4c      	ldr	r3, [pc, #304]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	4a4b      	ldr	r2, [pc, #300]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800359e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035b0:	4b46      	ldr	r3, [pc, #280]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	f023 0203 	bic.w	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4943      	ldr	r1, [pc, #268]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035d2:	4b3e      	ldr	r3, [pc, #248]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d8:	f023 020c 	bic.w	r2, r3, #12
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	493a      	ldr	r1, [pc, #232]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035f4:	4b35      	ldr	r3, [pc, #212]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	4932      	ldr	r1, [pc, #200]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003616:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003624:	4929      	ldr	r1, [pc, #164]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003638:	4b24      	ldr	r3, [pc, #144]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	4921      	ldr	r1, [pc, #132]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800365a:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003660:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	4918      	ldr	r1, [pc, #96]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800367c:	4b13      	ldr	r3, [pc, #76]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	4910      	ldr	r1, [pc, #64]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d02c      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	4907      	ldr	r1, [pc, #28]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036bc:	d10a      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036be:	4b03      	ldr	r3, [pc, #12]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	4a02      	ldr	r2, [pc, #8]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036c8:	60d3      	str	r3, [r2, #12]
 80036ca:	e015      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2101      	movs	r1, #1
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f871 	bl	80037cc <RCCEx_PLLSAI1_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d028      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003704:	4b30      	ldr	r3, [pc, #192]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	492d      	ldr	r1, [pc, #180]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003722:	d106      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003724:	4b28      	ldr	r3, [pc, #160]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4a27      	ldr	r2, [pc, #156]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800372a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800372e:	60d3      	str	r3, [r2, #12]
 8003730:	e011      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800373a:	d10c      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	2101      	movs	r1, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f842 	bl	80037cc <RCCEx_PLLSAI1_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01c      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003762:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003768:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003770:	4915      	ldr	r1, [pc, #84]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003780:	d10c      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3304      	adds	r3, #4
 8003786:	2102      	movs	r1, #2
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f81f 	bl	80037cc <RCCEx_PLLSAI1_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037a8:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	4904      	ldr	r1, [pc, #16]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037be:	7cbb      	ldrb	r3, [r7, #18]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000

080037cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037da:	4b73      	ldr	r3, [pc, #460]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037e6:	4b70      	ldr	r3, [pc, #448]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0203 	and.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d10d      	bne.n	8003812 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
       ||
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037fe:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
       ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d044      	beq.n	800389c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
 8003816:	e041      	b.n	800389c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b02      	cmp	r3, #2
 800381e:	d00c      	beq.n	800383a <RCCEx_PLLSAI1_Config+0x6e>
 8003820:	2b03      	cmp	r3, #3
 8003822:	d013      	beq.n	800384c <RCCEx_PLLSAI1_Config+0x80>
 8003824:	2b01      	cmp	r3, #1
 8003826:	d120      	bne.n	800386a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003828:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d11d      	bne.n	8003870 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003838:	e01a      	b.n	8003870 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800383a:	4b5b      	ldr	r3, [pc, #364]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003842:	2b00      	cmp	r3, #0
 8003844:	d116      	bne.n	8003874 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384a:	e013      	b.n	8003874 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800384c:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10f      	bne.n	8003878 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003858:	4b53      	ldr	r3, [pc, #332]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003868:	e006      	b.n	8003878 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
      break;
 800386e:	e004      	b.n	800387a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003870:	bf00      	nop
 8003872:	e002      	b.n	800387a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003874:	bf00      	nop
 8003876:	e000      	b.n	800387a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003878:	bf00      	nop
    }

    if(status == HAL_OK)
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10d      	bne.n	800389c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003880:	4b49      	ldr	r3, [pc, #292]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6819      	ldr	r1, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	3b01      	subs	r3, #1
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	430b      	orrs	r3, r1
 8003896:	4944      	ldr	r1, [pc, #272]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d17c      	bne.n	800399c <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038a2:	4b41      	ldr	r3, [pc, #260]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a40      	ldr	r2, [pc, #256]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ae:	f7fd fbb9 	bl	8001024 <HAL_GetTick>
 80038b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038b4:	e009      	b.n	80038ca <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038b6:	f7fd fbb5 	bl	8001024 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d902      	bls.n	80038ca <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	73fb      	strb	r3, [r7, #15]
        break;
 80038c8:	e005      	b.n	80038d6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ca:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1ef      	bne.n	80038b6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d15f      	bne.n	800399c <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d110      	bne.n	8003904 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038e2:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80038ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6892      	ldr	r2, [r2, #8]
 80038f2:	0211      	lsls	r1, r2, #8
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	68d2      	ldr	r2, [r2, #12]
 80038f8:	06d2      	lsls	r2, r2, #27
 80038fa:	430a      	orrs	r2, r1
 80038fc:	492a      	ldr	r1, [pc, #168]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	610b      	str	r3, [r1, #16]
 8003902:	e027      	b.n	8003954 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d112      	bne.n	8003930 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800390a:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003912:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6892      	ldr	r2, [r2, #8]
 800391a:	0211      	lsls	r1, r2, #8
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6912      	ldr	r2, [r2, #16]
 8003920:	0852      	lsrs	r2, r2, #1
 8003922:	3a01      	subs	r2, #1
 8003924:	0552      	lsls	r2, r2, #21
 8003926:	430a      	orrs	r2, r1
 8003928:	491f      	ldr	r1, [pc, #124]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	610b      	str	r3, [r1, #16]
 800392e:	e011      	b.n	8003954 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003930:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003938:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6892      	ldr	r2, [r2, #8]
 8003940:	0211      	lsls	r1, r2, #8
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6952      	ldr	r2, [r2, #20]
 8003946:	0852      	lsrs	r2, r2, #1
 8003948:	3a01      	subs	r2, #1
 800394a:	0652      	lsls	r2, r2, #25
 800394c:	430a      	orrs	r2, r1
 800394e:	4916      	ldr	r1, [pc, #88]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003950:	4313      	orrs	r3, r2
 8003952:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003954:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a13      	ldr	r2, [pc, #76]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800395a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800395e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003960:	f7fd fb60 	bl	8001024 <HAL_GetTick>
 8003964:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003966:	e009      	b.n	800397c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003968:	f7fd fb5c 	bl	8001024 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d902      	bls.n	800397c <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	73fb      	strb	r3, [r7, #15]
          break;
 800397a:	e005      	b.n	8003988 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ef      	beq.n	8003968 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	4904      	ldr	r1, [pc, #16]	; (80039a8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800399c:	7bfb      	ldrb	r3, [r7, #15]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000

080039ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e07c      	b.n	8003ab8 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d106      	bne.n	80039de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f002 ff2d 	bl	8006838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039fe:	d902      	bls.n	8003a06 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	e002      	b.n	8003a0c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a0a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a14:	d007      	beq.n	8003a26 <HAL_SPI_Init+0x7a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a1e:	d002      	beq.n	8003a26 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10b      	bne.n	8003a46 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a36:	d903      	bls.n	8003a40 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a3e:	e002      	b.n	8003a46 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	ea42 0103 	orr.w	r1, r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	f003 0204 	and.w	r2, r3, #4
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	ea42 0103 	orr.w	r1, r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d101      	bne.n	8003ae2 <HAL_SPI_Transmit+0x22>
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e150      	b.n	8003d84 <HAL_SPI_Transmit+0x2c4>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aea:	f7fd fa9b 	bl	8001024 <HAL_GetTick>
 8003aee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d002      	beq.n	8003b06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b00:	2302      	movs	r3, #2
 8003b02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b04:	e135      	b.n	8003d72 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_SPI_Transmit+0x52>
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d102      	bne.n	8003b18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b16:	e12c      	b.n	8003d72 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	88fa      	ldrh	r2, [r7, #6]
 8003b30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	88fa      	ldrh	r2, [r7, #6]
 8003b36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b62:	d107      	bne.n	8003b74 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	d007      	beq.n	8003b92 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b9a:	d94b      	bls.n	8003c34 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_SPI_Transmit+0xea>
 8003ba4:	8afb      	ldrh	r3, [r7, #22]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d13e      	bne.n	8003c28 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	881a      	ldrh	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	1c9a      	adds	r2, r3, #2
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bce:	e02b      	b.n	8003c28 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d112      	bne.n	8003c04 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	881a      	ldrh	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	1c9a      	adds	r2, r3, #2
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c02:	e011      	b.n	8003c28 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c04:	f7fd fa0e 	bl	8001024 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d803      	bhi.n	8003c1c <HAL_SPI_Transmit+0x15c>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1a:	d102      	bne.n	8003c22 <HAL_SPI_Transmit+0x162>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d102      	bne.n	8003c28 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c26:	e0a4      	b.n	8003d72 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1ce      	bne.n	8003bd0 <HAL_SPI_Transmit+0x110>
 8003c32:	e07c      	b.n	8003d2e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_SPI_Transmit+0x182>
 8003c3c:	8afb      	ldrh	r3, [r7, #22]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d170      	bne.n	8003d24 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d912      	bls.n	8003c72 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	881a      	ldrh	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	1c9a      	adds	r2, r3, #2
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b02      	subs	r3, #2
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c70:	e058      	b.n	8003d24 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c98:	e044      	b.n	8003d24 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d12b      	bne.n	8003d00 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d912      	bls.n	8003cd8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	881a      	ldrh	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	1c9a      	adds	r2, r3, #2
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b02      	subs	r3, #2
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cd6:	e025      	b.n	8003d24 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	330c      	adds	r3, #12
 8003ce2:	7812      	ldrb	r2, [r2, #0]
 8003ce4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cfe:	e011      	b.n	8003d24 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d00:	f7fd f990 	bl	8001024 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d803      	bhi.n	8003d18 <HAL_SPI_Transmit+0x258>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d102      	bne.n	8003d1e <HAL_SPI_Transmit+0x25e>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d22:	e026      	b.n	8003d72 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1b5      	bne.n	8003c9a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	6839      	ldr	r1, [r7, #0]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f901 	bl	8003f3a <SPI_EndRxTxTransaction>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	77fb      	strb	r3, [r7, #31]
 8003d6e:	e000      	b.n	8003d72 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003d70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d82:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3720      	adds	r7, #32
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d9c:	e04c      	b.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d048      	beq.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003da6:	f7fd f93d 	bl	8001024 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d902      	bls.n	8003dbc <SPI_WaitFlagStateUntilTimeout+0x30>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d13d      	bne.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd4:	d111      	bne.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dde:	d004      	beq.n	8003dea <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de8:	d107      	bne.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e02:	d10f      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e00f      	b.n	8003e58 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4013      	ands	r3, r2
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d1a3      	bne.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e6e:	e057      	b.n	8003f20 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e76:	d106      	bne.n	8003e86 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d048      	beq.n	8003f20 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003e8e:	f7fd f8c9 	bl	8001024 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d902      	bls.n	8003ea4 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d13d      	bne.n	8003f20 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003eb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ebc:	d111      	bne.n	8003ee2 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec6:	d004      	beq.n	8003ed2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed0:	d107      	bne.n	8003ee2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ee0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eea:	d10f      	bne.n	8003f0c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e008      	b.n	8003f32 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d19f      	bne.n	8003e70 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b086      	sub	sp, #24
 8003f3e:	af02      	add	r7, sp, #8
 8003f40:	60f8      	str	r0, [r7, #12]
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f7ff ff84 	bl	8003e60 <SPI_WaitFifoStateUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f62:	f043 0220 	orr.w	r2, r3, #32
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e027      	b.n	8003fbe <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2180      	movs	r1, #128	; 0x80
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f7ff ff07 	bl	8003d8c <SPI_WaitFlagStateUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f88:	f043 0220 	orr.w	r2, r3, #32
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e014      	b.n	8003fbe <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7ff ff5d 	bl	8003e60 <SPI_WaitFifoStateUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb0:	f043 0220 	orr.w	r2, r3, #32
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e000      	b.n	8003fbe <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e040      	b.n	800405a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f002 fc69 	bl	80068c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2224      	movs	r2, #36	; 0x24
 8003ff2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 faa5 	bl	8004554 <UART_SetConfig>
 800400a:	4603      	mov	r3, r0
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e022      	b.n	800405a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fd63 	bl	8004ae8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004030:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004040:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fdea 	bl	8004c2c <UART_CheckIdleState>
 8004058:	4603      	mov	r3, r0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b08a      	sub	sp, #40	; 0x28
 8004066:	af02      	add	r7, sp, #8
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	603b      	str	r3, [r7, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004076:	2b20      	cmp	r3, #32
 8004078:	f040 8081 	bne.w	800417e <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_UART_Transmit+0x26>
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e079      	b.n	8004180 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_UART_Transmit+0x38>
 8004096:	2302      	movs	r3, #2
 8004098:	e072      	b.n	8004180 <HAL_UART_Transmit+0x11e>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2221      	movs	r2, #33	; 0x21
 80040ac:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80040ae:	f7fc ffb9 	bl	8001024 <HAL_GetTick>
 80040b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	88fa      	ldrh	r2, [r7, #6]
 80040b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040cc:	d108      	bne.n	80040e0 <HAL_UART_Transmit+0x7e>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d104      	bne.n	80040e0 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	e003      	b.n	80040e8 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040e8:	e02d      	b.n	8004146 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2200      	movs	r2, #0
 80040f2:	2180      	movs	r1, #128	; 0x80
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fdde 	bl	8004cb6 <UART_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e03d      	b.n	8004180 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	881a      	ldrh	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004116:	b292      	uxth	r2, r2
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	3302      	adds	r3, #2
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	e008      	b.n	8004134 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	b292      	uxth	r2, r2
 800412c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3301      	adds	r3, #1
 8004132:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1cb      	bne.n	80040ea <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2200      	movs	r2, #0
 800415a:	2140      	movs	r1, #64	; 0x40
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fdaa 	bl	8004cb6 <UART_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e009      	b.n	8004180 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800419a:	2b20      	cmp	r3, #32
 800419c:	f040 808a 	bne.w	80042b4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_UART_Receive_IT+0x24>
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e082      	b.n	80042b6 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <HAL_UART_Receive_IT+0x36>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e07b      	b.n	80042b6 <HAL_UART_Receive_IT+0x12e>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	88fa      	ldrh	r2, [r7, #6]
 80041d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	d10e      	bne.n	800420a <HAL_UART_Receive_IT+0x82>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <HAL_UART_Receive_IT+0x78>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80041fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041fe:	e02d      	b.n	800425c <HAL_UART_Receive_IT+0xd4>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	22ff      	movs	r2, #255	; 0xff
 8004204:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004208:	e028      	b.n	800425c <HAL_UART_Receive_IT+0xd4>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10d      	bne.n	800422e <HAL_UART_Receive_IT+0xa6>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d104      	bne.n	8004224 <HAL_UART_Receive_IT+0x9c>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	22ff      	movs	r2, #255	; 0xff
 800421e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004222:	e01b      	b.n	800425c <HAL_UART_Receive_IT+0xd4>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	227f      	movs	r2, #127	; 0x7f
 8004228:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800422c:	e016      	b.n	800425c <HAL_UART_Receive_IT+0xd4>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004236:	d10d      	bne.n	8004254 <HAL_UART_Receive_IT+0xcc>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d104      	bne.n	800424a <HAL_UART_Receive_IT+0xc2>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	227f      	movs	r2, #127	; 0x7f
 8004244:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004248:	e008      	b.n	800425c <HAL_UART_Receive_IT+0xd4>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	223f      	movs	r2, #63	; 0x3f
 800424e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004252:	e003      	b.n	800425c <HAL_UART_Receive_IT+0xd4>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2222      	movs	r2, #34	; 0x22
 8004266:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004280:	d107      	bne.n	8004292 <HAL_UART_Receive_IT+0x10a>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a0d      	ldr	r2, [pc, #52]	; (80042c4 <HAL_UART_Receive_IT+0x13c>)
 800428e:	661a      	str	r2, [r3, #96]	; 0x60
 8004290:	e002      	b.n	8004298 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4a0c      	ldr	r2, [pc, #48]	; (80042c8 <HAL_UART_Receive_IT+0x140>)
 8004296:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80042ae:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
  }
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	08004e8f 	.word	0x08004e8f
 80042c8:	08004de5 	.word	0x08004de5

080042cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d113      	bne.n	8004322 <HAL_UART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00e      	beq.n	8004322 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <HAL_UART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 80ff 	beq.w	8004516 <HAL_UART_IRQHandler+0x24a>
      {
        huart->RxISR(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	4798      	blx	r3
      }
      return;
 8004320:	e0f9      	b.n	8004516 <HAL_UART_IRQHandler+0x24a>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80c1 	beq.w	80044ac <HAL_UART_IRQHandler+0x1e0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80b6 	beq.w	80044ac <HAL_UART_IRQHandler+0x1e0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00e      	beq.n	8004368 <HAL_UART_IRQHandler+0x9c>
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d009      	beq.n	8004368 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2201      	movs	r2, #1
 800435a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004360:	f043 0201 	orr.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00e      	beq.n	8004390 <HAL_UART_IRQHandler+0xc4>
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d009      	beq.n	8004390 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2202      	movs	r2, #2
 8004382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004388:	f043 0204 	orr.w	r2, r3, #4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00e      	beq.n	80043b8 <HAL_UART_IRQHandler+0xec>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d009      	beq.n	80043b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2204      	movs	r2, #4
 80043aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043b0:	f043 0202 	orr.w	r2, r3, #2
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d013      	beq.n	80043ea <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_UART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2208      	movs	r2, #8
 80043dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e2:	f043 0208 	orr.w	r2, r3, #8
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 8093 	beq.w	800451a <HAL_UART_IRQHandler+0x24e>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <HAL_UART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_UART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_UART_IRQHandler+0x14c>
        {
          huart->RxISR(huart);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800441c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004428:	2b40      	cmp	r3, #64	; 0x40
 800442a:	d004      	beq.n	8004436 <HAL_UART_IRQHandler+0x16a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004432:	2b00      	cmp	r3, #0
 8004434:	d031      	beq.n	800449a <HAL_UART_IRQHandler+0x1ce>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fc85 	bl	8004d46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004446:	2b40      	cmp	r3, #64	; 0x40
 8004448:	d123      	bne.n	8004492 <HAL_UART_IRQHandler+0x1c6>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004458:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d013      	beq.n	800448a <HAL_UART_IRQHandler+0x1be>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004466:	4a30      	ldr	r2, [pc, #192]	; (8004528 <HAL_UART_IRQHandler+0x25c>)
 8004468:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800446e:	4618      	mov	r0, r3
 8004470:	f7fd ffa0 	bl	80023b4 <HAL_DMA_Abort_IT>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_UART_IRQHandler+0x1dc>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004484:	4610      	mov	r0, r2
 8004486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004488:	e00e      	b.n	80044a8 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f858 	bl	8004540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004490:	e00a      	b.n	80044a8 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f854 	bl	8004540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	e006      	b.n	80044a8 <HAL_UART_IRQHandler+0x1dc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f850 	bl	8004540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80044a6:	e038      	b.n	800451a <HAL_UART_IRQHandler+0x24e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a8:	bf00      	nop
    return;
 80044aa:	e036      	b.n	800451a <HAL_UART_IRQHandler+0x24e>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <HAL_UART_IRQHandler+0x206>
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_UART_IRQHandler+0x206>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80044c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fd34 	bl	8004f38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044d0:	e026      	b.n	8004520 <HAL_UART_IRQHandler+0x254>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00d      	beq.n	80044f8 <HAL_UART_IRQHandler+0x22c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d008      	beq.n	80044f8 <HAL_UART_IRQHandler+0x22c>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d017      	beq.n	800451e <HAL_UART_IRQHandler+0x252>
    {
      huart->TxISR(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
    }
    return;
 80044f6:	e012      	b.n	800451e <HAL_UART_IRQHandler+0x252>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00e      	beq.n	8004520 <HAL_UART_IRQHandler+0x254>
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d009      	beq.n	8004520 <HAL_UART_IRQHandler+0x254>
  {
    UART_EndTransmit_IT(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fc50 	bl	8004db2 <UART_EndTransmit_IT>
    return;
 8004512:	bf00      	nop
 8004514:	e004      	b.n	8004520 <HAL_UART_IRQHandler+0x254>
      return;
 8004516:	bf00      	nop
 8004518:	e002      	b.n	8004520 <HAL_UART_IRQHandler+0x254>
    return;
 800451a:	bf00      	nop
 800451c:	e000      	b.n	8004520 <HAL_UART_IRQHandler+0x254>
    return;
 800451e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	08004d87 	.word	0x08004d87

0800452c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004554:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004558:	b088      	sub	sp, #32
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	4313      	orrs	r3, r2
 8004580:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4bbc      	ldr	r3, [pc, #752]	; (800487c <UART_SetConfig+0x328>)
 800458a:	4013      	ands	r3, r2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	69f9      	ldr	r1, [r7, #28]
 8004592:	430b      	orrs	r3, r1
 8004594:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4ab2      	ldr	r2, [pc, #712]	; (8004880 <UART_SetConfig+0x32c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d004      	beq.n	80045c6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4aa9      	ldr	r2, [pc, #676]	; (8004884 <UART_SetConfig+0x330>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d121      	bne.n	8004628 <UART_SetConfig+0xd4>
 80045e4:	4ba8      	ldr	r3, [pc, #672]	; (8004888 <UART_SetConfig+0x334>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d816      	bhi.n	8004620 <UART_SetConfig+0xcc>
 80045f2:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <UART_SetConfig+0xa4>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	08004609 	.word	0x08004609
 80045fc:	08004615 	.word	0x08004615
 8004600:	0800460f 	.word	0x0800460f
 8004604:	0800461b 	.word	0x0800461b
 8004608:	2301      	movs	r3, #1
 800460a:	76fb      	strb	r3, [r7, #27]
 800460c:	e072      	b.n	80046f4 <UART_SetConfig+0x1a0>
 800460e:	2302      	movs	r3, #2
 8004610:	76fb      	strb	r3, [r7, #27]
 8004612:	e06f      	b.n	80046f4 <UART_SetConfig+0x1a0>
 8004614:	2304      	movs	r3, #4
 8004616:	76fb      	strb	r3, [r7, #27]
 8004618:	e06c      	b.n	80046f4 <UART_SetConfig+0x1a0>
 800461a:	2308      	movs	r3, #8
 800461c:	76fb      	strb	r3, [r7, #27]
 800461e:	e069      	b.n	80046f4 <UART_SetConfig+0x1a0>
 8004620:	2310      	movs	r3, #16
 8004622:	76fb      	strb	r3, [r7, #27]
 8004624:	bf00      	nop
 8004626:	e065      	b.n	80046f4 <UART_SetConfig+0x1a0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a97      	ldr	r2, [pc, #604]	; (800488c <UART_SetConfig+0x338>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d134      	bne.n	800469c <UART_SetConfig+0x148>
 8004632:	4b95      	ldr	r3, [pc, #596]	; (8004888 <UART_SetConfig+0x334>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	f003 030c 	and.w	r3, r3, #12
 800463c:	2b0c      	cmp	r3, #12
 800463e:	d829      	bhi.n	8004694 <UART_SetConfig+0x140>
 8004640:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <UART_SetConfig+0xf4>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	0800467d 	.word	0x0800467d
 800464c:	08004695 	.word	0x08004695
 8004650:	08004695 	.word	0x08004695
 8004654:	08004695 	.word	0x08004695
 8004658:	08004689 	.word	0x08004689
 800465c:	08004695 	.word	0x08004695
 8004660:	08004695 	.word	0x08004695
 8004664:	08004695 	.word	0x08004695
 8004668:	08004683 	.word	0x08004683
 800466c:	08004695 	.word	0x08004695
 8004670:	08004695 	.word	0x08004695
 8004674:	08004695 	.word	0x08004695
 8004678:	0800468f 	.word	0x0800468f
 800467c:	2300      	movs	r3, #0
 800467e:	76fb      	strb	r3, [r7, #27]
 8004680:	e038      	b.n	80046f4 <UART_SetConfig+0x1a0>
 8004682:	2302      	movs	r3, #2
 8004684:	76fb      	strb	r3, [r7, #27]
 8004686:	e035      	b.n	80046f4 <UART_SetConfig+0x1a0>
 8004688:	2304      	movs	r3, #4
 800468a:	76fb      	strb	r3, [r7, #27]
 800468c:	e032      	b.n	80046f4 <UART_SetConfig+0x1a0>
 800468e:	2308      	movs	r3, #8
 8004690:	76fb      	strb	r3, [r7, #27]
 8004692:	e02f      	b.n	80046f4 <UART_SetConfig+0x1a0>
 8004694:	2310      	movs	r3, #16
 8004696:	76fb      	strb	r3, [r7, #27]
 8004698:	bf00      	nop
 800469a:	e02b      	b.n	80046f4 <UART_SetConfig+0x1a0>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a77      	ldr	r2, [pc, #476]	; (8004880 <UART_SetConfig+0x32c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d124      	bne.n	80046f0 <UART_SetConfig+0x19c>
 80046a6:	4b78      	ldr	r3, [pc, #480]	; (8004888 <UART_SetConfig+0x334>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b4:	d012      	beq.n	80046dc <UART_SetConfig+0x188>
 80046b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ba:	d802      	bhi.n	80046c2 <UART_SetConfig+0x16e>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <UART_SetConfig+0x17c>
 80046c0:	e012      	b.n	80046e8 <UART_SetConfig+0x194>
 80046c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c6:	d006      	beq.n	80046d6 <UART_SetConfig+0x182>
 80046c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046cc:	d009      	beq.n	80046e2 <UART_SetConfig+0x18e>
 80046ce:	e00b      	b.n	80046e8 <UART_SetConfig+0x194>
 80046d0:	2300      	movs	r3, #0
 80046d2:	76fb      	strb	r3, [r7, #27]
 80046d4:	e00e      	b.n	80046f4 <UART_SetConfig+0x1a0>
 80046d6:	2302      	movs	r3, #2
 80046d8:	76fb      	strb	r3, [r7, #27]
 80046da:	e00b      	b.n	80046f4 <UART_SetConfig+0x1a0>
 80046dc:	2304      	movs	r3, #4
 80046de:	76fb      	strb	r3, [r7, #27]
 80046e0:	e008      	b.n	80046f4 <UART_SetConfig+0x1a0>
 80046e2:	2308      	movs	r3, #8
 80046e4:	76fb      	strb	r3, [r7, #27]
 80046e6:	e005      	b.n	80046f4 <UART_SetConfig+0x1a0>
 80046e8:	2310      	movs	r3, #16
 80046ea:	76fb      	strb	r3, [r7, #27]
 80046ec:	bf00      	nop
 80046ee:	e001      	b.n	80046f4 <UART_SetConfig+0x1a0>
 80046f0:	2310      	movs	r3, #16
 80046f2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a61      	ldr	r2, [pc, #388]	; (8004880 <UART_SetConfig+0x32c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	f040 80f4 	bne.w	80048e8 <UART_SetConfig+0x394>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004700:	7efb      	ldrb	r3, [r7, #27]
 8004702:	2b08      	cmp	r3, #8
 8004704:	d823      	bhi.n	800474e <UART_SetConfig+0x1fa>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <UART_SetConfig+0x1b8>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004731 	.word	0x08004731
 8004710:	0800474f 	.word	0x0800474f
 8004714:	08004739 	.word	0x08004739
 8004718:	0800474f 	.word	0x0800474f
 800471c:	0800473f 	.word	0x0800473f
 8004720:	0800474f 	.word	0x0800474f
 8004724:	0800474f 	.word	0x0800474f
 8004728:	0800474f 	.word	0x0800474f
 800472c:	08004747 	.word	0x08004747
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8004730:	f7fe fdce 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 8004734:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004736:	e00d      	b.n	8004754 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8004738:	4b55      	ldr	r3, [pc, #340]	; (8004890 <UART_SetConfig+0x33c>)
 800473a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800473c:	e00a      	b.n	8004754 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800473e:	f7fe fd31 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8004742:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004744:	e006      	b.n	8004754 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8004746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800474a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800474c:	e002      	b.n	8004754 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	74fb      	strb	r3, [r7, #19]
        break;
 8004752:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 81b9 	beq.w	8004ace <UART_SetConfig+0x57a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4413      	add	r3, r2
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	429a      	cmp	r2, r3
 800476a:	d305      	bcc.n	8004778 <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	429a      	cmp	r2, r3
 8004776:	d902      	bls.n	800477e <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	74fb      	strb	r3, [r7, #19]
 800477c:	e1a7      	b.n	8004ace <UART_SetConfig+0x57a>
      }
      else
      {
        switch (clocksource)
 800477e:	7efb      	ldrb	r3, [r7, #27]
 8004780:	2b08      	cmp	r3, #8
 8004782:	f200 809e 	bhi.w	80048c2 <UART_SetConfig+0x36e>
 8004786:	a201      	add	r2, pc, #4	; (adr r2, 800478c <UART_SetConfig+0x238>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080048c3 	.word	0x080048c3
 8004794:	080047fd 	.word	0x080047fd
 8004798:	080048c3 	.word	0x080048c3
 800479c:	08004831 	.word	0x08004831
 80047a0:	080048c3 	.word	0x080048c3
 80047a4:	080048c3 	.word	0x080048c3
 80047a8:	080048c3 	.word	0x080048c3
 80047ac:	08004899 	.word	0x08004899
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80047b0:	f7fe fd8e 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 80047b4:	4603      	mov	r3, r0
 80047b6:	4619      	mov	r1, r3
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	f04f 0400 	mov.w	r4, #0
 80047c4:	0214      	lsls	r4, r2, #8
 80047c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80047ca:	020b      	lsls	r3, r1, #8
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6852      	ldr	r2, [r2, #4]
 80047d0:	0852      	lsrs	r2, r2, #1
 80047d2:	4611      	mov	r1, r2
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	eb13 0b01 	adds.w	fp, r3, r1
 80047dc:	eb44 0c02 	adc.w	ip, r4, r2
 80047e0:	4658      	mov	r0, fp
 80047e2:	4661      	mov	r1, ip
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f04f 0400 	mov.w	r4, #0
 80047ec:	461a      	mov	r2, r3
 80047ee:	4623      	mov	r3, r4
 80047f0:	f7fc fa34 	bl	8000c5c <__aeabi_uldivmod>
 80047f4:	4603      	mov	r3, r0
 80047f6:	460c      	mov	r4, r1
 80047f8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80047fa:	e065      	b.n	80048c8 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	085b      	lsrs	r3, r3, #1
 8004802:	f04f 0400 	mov.w	r4, #0
 8004806:	4923      	ldr	r1, [pc, #140]	; (8004894 <UART_SetConfig+0x340>)
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	eb13 0b01 	adds.w	fp, r3, r1
 8004810:	eb44 0c02 	adc.w	ip, r4, r2
 8004814:	4658      	mov	r0, fp
 8004816:	4661      	mov	r1, ip
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f04f 0400 	mov.w	r4, #0
 8004820:	461a      	mov	r2, r3
 8004822:	4623      	mov	r3, r4
 8004824:	f7fc fa1a 	bl	8000c5c <__aeabi_uldivmod>
 8004828:	4603      	mov	r3, r0
 800482a:	460c      	mov	r4, r1
 800482c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800482e:	e04b      	b.n	80048c8 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004830:	f7fe fcb8 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8004834:	4603      	mov	r3, r0
 8004836:	4619      	mov	r1, r3
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	f04f 0400 	mov.w	r4, #0
 8004844:	0214      	lsls	r4, r2, #8
 8004846:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800484a:	020b      	lsls	r3, r1, #8
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6852      	ldr	r2, [r2, #4]
 8004850:	0852      	lsrs	r2, r2, #1
 8004852:	4611      	mov	r1, r2
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	eb13 0b01 	adds.w	fp, r3, r1
 800485c:	eb44 0c02 	adc.w	ip, r4, r2
 8004860:	4658      	mov	r0, fp
 8004862:	4661      	mov	r1, ip
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f04f 0400 	mov.w	r4, #0
 800486c:	461a      	mov	r2, r3
 800486e:	4623      	mov	r3, r4
 8004870:	f7fc f9f4 	bl	8000c5c <__aeabi_uldivmod>
 8004874:	4603      	mov	r3, r0
 8004876:	460c      	mov	r4, r1
 8004878:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800487a:	e025      	b.n	80048c8 <UART_SetConfig+0x374>
 800487c:	efff69f3 	.word	0xefff69f3
 8004880:	40008000 	.word	0x40008000
 8004884:	40013800 	.word	0x40013800
 8004888:	40021000 	.word	0x40021000
 800488c:	40004400 	.word	0x40004400
 8004890:	00f42400 	.word	0x00f42400
 8004894:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	f04f 0400 	mov.w	r4, #0
 80048a2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80048a6:	f144 0100 	adc.w	r1, r4, #0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f04f 0400 	mov.w	r4, #0
 80048b2:	461a      	mov	r2, r3
 80048b4:	4623      	mov	r3, r4
 80048b6:	f7fc f9d1 	bl	8000c5c <__aeabi_uldivmod>
 80048ba:	4603      	mov	r3, r0
 80048bc:	460c      	mov	r4, r1
 80048be:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80048c0:	e002      	b.n	80048c8 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	74fb      	strb	r3, [r7, #19]
            break;
 80048c6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ce:	d308      	bcc.n	80048e2 <UART_SetConfig+0x38e>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d6:	d204      	bcs.n	80048e2 <UART_SetConfig+0x38e>
        {
          huart->Instance->BRR = usartdiv;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	60da      	str	r2, [r3, #12]
 80048e0:	e0f5      	b.n	8004ace <UART_SetConfig+0x57a>
        }
        else
        {
          ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	74fb      	strb	r3, [r7, #19]
 80048e6:	e0f2      	b.n	8004ace <UART_SetConfig+0x57a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f0:	d17f      	bne.n	80049f2 <UART_SetConfig+0x49e>
  {
    switch (clocksource)
 80048f2:	7efb      	ldrb	r3, [r7, #27]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d85c      	bhi.n	80049b2 <UART_SetConfig+0x45e>
 80048f8:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <UART_SetConfig+0x3ac>)
 80048fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fe:	bf00      	nop
 8004900:	08004925 	.word	0x08004925
 8004904:	08004943 	.word	0x08004943
 8004908:	08004961 	.word	0x08004961
 800490c:	080049b3 	.word	0x080049b3
 8004910:	0800497d 	.word	0x0800497d
 8004914:	080049b3 	.word	0x080049b3
 8004918:	080049b3 	.word	0x080049b3
 800491c:	080049b3 	.word	0x080049b3
 8004920:	0800499b 	.word	0x0800499b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004924:	f7fe fcd4 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 8004928:	4603      	mov	r3, r0
 800492a:	005a      	lsls	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	441a      	add	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	b29b      	uxth	r3, r3
 800493e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004940:	e03a      	b.n	80049b8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004942:	f7fe fcdb 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 8004946:	4603      	mov	r3, r0
 8004948:	005a      	lsls	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	441a      	add	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	fbb2 f3f3 	udiv	r3, r2, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800495e:	e02b      	b.n	80049b8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800496a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6852      	ldr	r2, [r2, #4]
 8004972:	fbb3 f3f2 	udiv	r3, r3, r2
 8004976:	b29b      	uxth	r3, r3
 8004978:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800497a:	e01d      	b.n	80049b8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800497c:	f7fe fc12 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8004980:	4603      	mov	r3, r0
 8004982:	005a      	lsls	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	441a      	add	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	b29b      	uxth	r3, r3
 8004996:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004998:	e00e      	b.n	80049b8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80049b0:	e002      	b.n	80049b8 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	74fb      	strb	r3, [r7, #19]
        break;
 80049b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	d916      	bls.n	80049ec <UART_SetConfig+0x498>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c4:	d212      	bcs.n	80049ec <UART_SetConfig+0x498>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f023 030f 	bic.w	r3, r3, #15
 80049ce:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	b29a      	uxth	r2, r3
 80049dc:	897b      	ldrh	r3, [r7, #10]
 80049de:	4313      	orrs	r3, r2
 80049e0:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	897a      	ldrh	r2, [r7, #10]
 80049e8:	60da      	str	r2, [r3, #12]
 80049ea:	e070      	b.n	8004ace <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	74fb      	strb	r3, [r7, #19]
 80049f0:	e06d      	b.n	8004ace <UART_SetConfig+0x57a>
    }
  }
  else
  {
    switch (clocksource)
 80049f2:	7efb      	ldrb	r3, [r7, #27]
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d859      	bhi.n	8004aac <UART_SetConfig+0x558>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <UART_SetConfig+0x4ac>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a25 	.word	0x08004a25
 8004a04:	08004a41 	.word	0x08004a41
 8004a08:	08004a5d 	.word	0x08004a5d
 8004a0c:	08004aad 	.word	0x08004aad
 8004a10:	08004a79 	.word	0x08004a79
 8004a14:	08004aad 	.word	0x08004aad
 8004a18:	08004aad 	.word	0x08004aad
 8004a1c:	08004aad 	.word	0x08004aad
 8004a20:	08004a95 	.word	0x08004a95
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004a24:	f7fe fc54 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	085b      	lsrs	r3, r3, #1
 8004a30:	441a      	add	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a3e:	e038      	b.n	8004ab2 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004a40:	f7fe fc5c 	bl	80032fc <HAL_RCC_GetPCLK2Freq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	441a      	add	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a5a:	e02a      	b.n	8004ab2 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004a66:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6852      	ldr	r2, [r2, #4]
 8004a6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a76:	e01c      	b.n	8004ab2 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004a78:	f7fe fb94 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	441a      	add	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a92:	e00e      	b.n	8004ab2 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004aaa:	e002      	b.n	8004ab2 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	74fb      	strb	r3, [r7, #19]
        break;
 8004ab0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b0f      	cmp	r3, #15
 8004ab6:	d908      	bls.n	8004aca <UART_SetConfig+0x576>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abe:	d204      	bcs.n	8004aca <UART_SetConfig+0x576>
    {
      huart->Instance->BRR = usartdiv;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	60da      	str	r2, [r3, #12]
 8004ac8:	e001      	b.n	8004ace <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004ada:	7cfb      	ldrb	r3, [r7, #19]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004ae6:	bf00      	nop

08004ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	f003 0310 	and.w	r3, r3, #16
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01a      	beq.n	8004bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be6:	d10a      	bne.n	8004bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]
  }
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004c3a:	f7fc f9f3 	bl	8001024 <HAL_GetTick>
 8004c3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d10e      	bne.n	8004c6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f82a 	bl	8004cb6 <UART_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e020      	b.n	8004cae <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d10e      	bne.n	8004c98 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f814 	bl	8004cb6 <UART_WaitOnFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e00a      	b.n	8004cae <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	603b      	str	r3, [r7, #0]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc6:	e02a      	b.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d026      	beq.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd0:	f7fc f9a8 	bl	8001024 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d302      	bcc.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11b      	bne.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cf4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e00f      	b.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	bf0c      	ite	eq
 8004d2e:	2301      	moveq	r3, #1
 8004d30:	2300      	movne	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d0c5      	beq.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d5c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0201 	bic.w	r2, r2, #1
 8004d6c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	661a      	str	r2, [r3, #96]	; 0x60
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff fbcb 	bl	8004540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff fba8 	bl	800452c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ddc:	bf00      	nop
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004df2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004df8:	2b22      	cmp	r3, #34	; 0x22
 8004dfa:	d13a      	bne.n	8004e72 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e02:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e04:	89bb      	ldrh	r3, [r7, #12]
 8004e06:	b2d9      	uxtb	r1, r3
 8004e08:	89fb      	ldrh	r3, [r7, #14]
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e10:	400a      	ands	r2, r1
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d123      	bne.n	8004e86 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e4c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f8c2 	bl	8004ff4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e70:	e009      	b.n	8004e86 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	8b1b      	ldrh	r3, [r3, #24]
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0208 	orr.w	r2, r2, #8
 8004e82:	b292      	uxth	r2, r2
 8004e84:	831a      	strh	r2, [r3, #24]
}
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e9c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ea2:	2b22      	cmp	r3, #34	; 0x22
 8004ea4:	d13a      	bne.n	8004f1c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004eac:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004eb4:	89ba      	ldrh	r2, [r7, #12]
 8004eb6:	89fb      	ldrh	r3, [r7, #14]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	1c9a      	adds	r2, r3, #2
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d123      	bne.n	8004f30 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ef6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f86d 	bl	8004ff4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f1a:	e009      	b.n	8004f30 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	8b1b      	ldrh	r3, [r3, #24]
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0208 	orr.w	r2, r2, #8
 8004f2c:	b292      	uxth	r2, r2
 8004f2e:	831a      	strh	r2, [r3, #24]
}
 8004f30:	bf00      	nop
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <setup_init>:

// incoming packet
PacketMSG_struct packetMSG;

// functions
void setup_init(void) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
	// init PGA_CS pin to high (disable)
	HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin , GPIO_PIN_SET);
 8004f52:	2201      	movs	r2, #1
 8004f54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f5c:	f7fd fbd6 	bl	800270c <HAL_GPIO_WritePin>
	HAL_Delay(100); // delay for PGA PowerUp
 8004f60:	2064      	movs	r0, #100	; 0x64
 8004f62:	f7fc f86b 	bl	800103c <HAL_Delay>
	// Init PGA SPI
	HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin , GPIO_PIN_RESET);
 8004f66:	2200      	movs	r2, #0
 8004f68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f70:	f7fd fbcc 	bl	800270c <HAL_GPIO_WritePin>
	uint16_t spiTransmit[1] = {0x0000};
 8004f74:	2300      	movs	r3, #0
 8004f76:	80bb      	strh	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi3, (uint8_t*)spiTransmit, 1, 5000);
 8004f78:	1d39      	adds	r1, r7, #4
 8004f7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f7e:	2201      	movs	r2, #1
 8004f80:	4815      	ldr	r0, [pc, #84]	; (8004fd8 <setup_init+0x8c>)
 8004f82:	f7fe fd9d 	bl	8003ac0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin , GPIO_PIN_SET);
 8004f86:	2201      	movs	r2, #1
 8004f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f90:	f7fd fbbc 	bl	800270c <HAL_GPIO_WritePin>

	// init adc / dac
	HAL_ADC_Start(&hadc1);
 8004f94:	4811      	ldr	r0, [pc, #68]	; (8004fdc <setup_init+0x90>)
 8004f96:	f7fc fb61 	bl	800165c <HAL_ADC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	4810      	ldr	r0, [pc, #64]	; (8004fe0 <setup_init+0x94>)
 8004f9e:	f7fd f8a2 	bl	80020e6 <HAL_DAC_Start>

	// init dac register
	Dac1_Reg = (uint32_t) (hdac1.Instance);
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <setup_init+0x94>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <setup_init+0x98>)
 8004faa:	601a      	str	r2, [r3, #0]
	Dac1_Reg += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <setup_init+0x98>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	4a0c      	ldr	r2, [pc, #48]	; (8004fe4 <setup_init+0x98>)
 8004fb4:	6013      	str	r3, [r2, #0]
	if (HAL_UART_Receive_IT(&huart1, (uint8_t *) aRxBuffer, sizeof(aRxBuffer))
			!= HAL_OK) {
		Error_Handler();
	}
#else
	if (HAL_UART_Receive_IT(&huart2, (uint8_t *) aRxBuffer, sizeof(aRxBuffer))
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	490b      	ldr	r1, [pc, #44]	; (8004fe8 <setup_init+0x9c>)
 8004fba:	480c      	ldr	r0, [pc, #48]	; (8004fec <setup_init+0xa0>)
 8004fbc:	f7ff f8e4 	bl	8004188 <HAL_UART_Receive_IT>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <setup_init+0x7e>
			!= HAL_OK) {
		Error_Handler();
 8004fc6:	f001 fb8f 	bl	80066e8 <Error_Handler>
	}
#endif
	// set flag for waiting for incoming data
	UartReady = RESET;
 8004fca:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <setup_init+0xa4>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	2000ce4c 	.word	0x2000ce4c
 8004fdc:	2000ceb0 	.word	0x2000ceb0
 8004fe0:	2000ce38 	.word	0x2000ce38
 8004fe4:	2000ca10 	.word	0x2000ca10
 8004fe8:	2000ce34 	.word	0x2000ce34
 8004fec:	2000cf94 	.word	0x2000cf94
 8004ff0:	2000ca0b 	.word	0x2000ca0b

08004ff4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1) {
	/* Set transmission flag: transfer complete */
	UartReady = SET;
}
#else
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2) {
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8004ffc:	4b04      	ldr	r3, [pc, #16]	; (8005010 <HAL_UART_RxCpltCallback+0x1c>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	701a      	strb	r2, [r3, #0]
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	2000ca0b 	.word	0x2000ca0b

08005014 <serialEvent>:
#endif

// Serial Event function
void serialEvent(uint8_t inByte) {
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	71fb      	strb	r3, [r7, #7]
	// detect start message , end message
	switch (packetMSG.syncFlag) {
 800501e:	4b5f      	ldr	r3, [pc, #380]	; (800519c <serialEvent+0x188>)
 8005020:	7a1b      	ldrb	r3, [r3, #8]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d025      	beq.n	8005072 <serialEvent+0x5e>
 8005026:	2b02      	cmp	r3, #2
 8005028:	d051      	beq.n	80050ce <serialEvent+0xba>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d000      	beq.n	8005030 <serialEvent+0x1c>
		}
		break;
	}
	default: {
		// something went wrong
		break;
 800502e:	e0b1      	b.n	8005194 <serialEvent+0x180>
		if (packetMSG.header[packetMSG.syncIndex] == inByte) {
 8005030:	4b5a      	ldr	r3, [pc, #360]	; (800519c <serialEvent+0x188>)
 8005032:	79db      	ldrb	r3, [r3, #7]
 8005034:	461a      	mov	r2, r3
 8005036:	4b59      	ldr	r3, [pc, #356]	; (800519c <serialEvent+0x188>)
 8005038:	5c9b      	ldrb	r3, [r3, r2]
 800503a:	79fa      	ldrb	r2, [r7, #7]
 800503c:	429a      	cmp	r2, r3
 800503e:	d114      	bne.n	800506a <serialEvent+0x56>
			packetMSG.syncIndex++;
 8005040:	4b56      	ldr	r3, [pc, #344]	; (800519c <serialEvent+0x188>)
 8005042:	79db      	ldrb	r3, [r3, #7]
 8005044:	3301      	adds	r3, #1
 8005046:	b2da      	uxtb	r2, r3
 8005048:	4b54      	ldr	r3, [pc, #336]	; (800519c <serialEvent+0x188>)
 800504a:	71da      	strb	r2, [r3, #7]
			if (packetMSG.syncIndex == HEADER_SIZE) { // finish header SYNC
 800504c:	4b53      	ldr	r3, [pc, #332]	; (800519c <serialEvent+0x188>)
 800504e:	79db      	ldrb	r3, [r3, #7]
 8005050:	2b05      	cmp	r3, #5
 8005052:	f040 809a 	bne.w	800518a <serialEvent+0x176>
				packetMSG.syncFlag = 1; // start collecting data, wait for footer
 8005056:	4b51      	ldr	r3, [pc, #324]	; (800519c <serialEvent+0x188>)
 8005058:	2201      	movs	r2, #1
 800505a:	721a      	strb	r2, [r3, #8]
				packetMSG.bufferIndex = 0;
 800505c:	4b4f      	ldr	r3, [pc, #316]	; (800519c <serialEvent+0x188>)
 800505e:	2200      	movs	r2, #0
 8005060:	815a      	strh	r2, [r3, #10]
				packetMSG.syncIndex = 0;
 8005062:	4b4e      	ldr	r3, [pc, #312]	; (800519c <serialEvent+0x188>)
 8005064:	2200      	movs	r2, #0
 8005066:	71da      	strb	r2, [r3, #7]
		break;
 8005068:	e08f      	b.n	800518a <serialEvent+0x176>
			packetMSG.syncIndex = 0;
 800506a:	4b4c      	ldr	r3, [pc, #304]	; (800519c <serialEvent+0x188>)
 800506c:	2200      	movs	r2, #0
 800506e:	71da      	strb	r2, [r3, #7]
		break;
 8005070:	e08b      	b.n	800518a <serialEvent+0x176>
		packetMSG.buffer[packetMSG.bufferIndex] = inByte;
 8005072:	4b4a      	ldr	r3, [pc, #296]	; (800519c <serialEvent+0x188>)
 8005074:	895b      	ldrh	r3, [r3, #10]
 8005076:	461a      	mov	r2, r3
 8005078:	4b48      	ldr	r3, [pc, #288]	; (800519c <serialEvent+0x188>)
 800507a:	4413      	add	r3, r2
 800507c:	79fa      	ldrb	r2, [r7, #7]
 800507e:	731a      	strb	r2, [r3, #12]
		packetMSG.bufferIndex++;
 8005080:	4b46      	ldr	r3, [pc, #280]	; (800519c <serialEvent+0x188>)
 8005082:	895b      	ldrh	r3, [r3, #10]
 8005084:	3301      	adds	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	4b44      	ldr	r3, [pc, #272]	; (800519c <serialEvent+0x188>)
 800508a:	815a      	strh	r2, [r3, #10]
		if (packetMSG.bufferIndex >= MSG_BUFFER_SIZE) { // buffer overflow
 800508c:	4b43      	ldr	r3, [pc, #268]	; (800519c <serialEvent+0x188>)
 800508e:	895b      	ldrh	r3, [r3, #10]
 8005090:	2bff      	cmp	r3, #255	; 0xff
 8005092:	d909      	bls.n	80050a8 <serialEvent+0x94>
			packetMSG.bufferIndex = 0;
 8005094:	4b41      	ldr	r3, [pc, #260]	; (800519c <serialEvent+0x188>)
 8005096:	2200      	movs	r2, #0
 8005098:	815a      	strh	r2, [r3, #10]
			packetMSG.syncIndex = 0;
 800509a:	4b40      	ldr	r3, [pc, #256]	; (800519c <serialEvent+0x188>)
 800509c:	2200      	movs	r2, #0
 800509e:	71da      	strb	r2, [r3, #7]
			packetMSG.syncFlag = 0;
 80050a0:	4b3e      	ldr	r3, [pc, #248]	; (800519c <serialEvent+0x188>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	721a      	strb	r2, [r3, #8]
		break;
 80050a6:	e072      	b.n	800518e <serialEvent+0x17a>
		} else if (packetMSG.footer[packetMSG.syncIndex] == inByte) { // footer char recieved
 80050a8:	4b3c      	ldr	r3, [pc, #240]	; (800519c <serialEvent+0x188>)
 80050aa:	79db      	ldrb	r3, [r3, #7]
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b3b      	ldr	r3, [pc, #236]	; (800519c <serialEvent+0x188>)
 80050b0:	4413      	add	r3, r2
 80050b2:	795b      	ldrb	r3, [r3, #5]
 80050b4:	79fa      	ldrb	r2, [r7, #7]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d169      	bne.n	800518e <serialEvent+0x17a>
			packetMSG.syncIndex++;
 80050ba:	4b38      	ldr	r3, [pc, #224]	; (800519c <serialEvent+0x188>)
 80050bc:	79db      	ldrb	r3, [r3, #7]
 80050be:	3301      	adds	r3, #1
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	4b36      	ldr	r3, [pc, #216]	; (800519c <serialEvent+0x188>)
 80050c4:	71da      	strb	r2, [r3, #7]
			packetMSG.syncFlag = 2; // move to verify footer
 80050c6:	4b35      	ldr	r3, [pc, #212]	; (800519c <serialEvent+0x188>)
 80050c8:	2202      	movs	r2, #2
 80050ca:	721a      	strb	r2, [r3, #8]
		break;
 80050cc:	e05f      	b.n	800518e <serialEvent+0x17a>
		packetMSG.buffer[packetMSG.bufferIndex] = inByte;
 80050ce:	4b33      	ldr	r3, [pc, #204]	; (800519c <serialEvent+0x188>)
 80050d0:	895b      	ldrh	r3, [r3, #10]
 80050d2:	461a      	mov	r2, r3
 80050d4:	4b31      	ldr	r3, [pc, #196]	; (800519c <serialEvent+0x188>)
 80050d6:	4413      	add	r3, r2
 80050d8:	79fa      	ldrb	r2, [r7, #7]
 80050da:	731a      	strb	r2, [r3, #12]
		packetMSG.bufferIndex++;
 80050dc:	4b2f      	ldr	r3, [pc, #188]	; (800519c <serialEvent+0x188>)
 80050de:	895b      	ldrh	r3, [r3, #10]
 80050e0:	3301      	adds	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	4b2d      	ldr	r3, [pc, #180]	; (800519c <serialEvent+0x188>)
 80050e6:	815a      	strh	r2, [r3, #10]
		if (packetMSG.bufferIndex >= MSG_BUFFER_SIZE) { // buffer overflow
 80050e8:	4b2c      	ldr	r3, [pc, #176]	; (800519c <serialEvent+0x188>)
 80050ea:	895b      	ldrh	r3, [r3, #10]
 80050ec:	2bff      	cmp	r3, #255	; 0xff
 80050ee:	d909      	bls.n	8005104 <serialEvent+0xf0>
			packetMSG.bufferIndex = 0;
 80050f0:	4b2a      	ldr	r3, [pc, #168]	; (800519c <serialEvent+0x188>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	815a      	strh	r2, [r3, #10]
			packetMSG.syncIndex = 0;
 80050f6:	4b29      	ldr	r3, [pc, #164]	; (800519c <serialEvent+0x188>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	71da      	strb	r2, [r3, #7]
			packetMSG.syncFlag = 0;
 80050fc:	4b27      	ldr	r3, [pc, #156]	; (800519c <serialEvent+0x188>)
 80050fe:	2200      	movs	r2, #0
 8005100:	721a      	strb	r2, [r3, #8]
		break;
 8005102:	e046      	b.n	8005192 <serialEvent+0x17e>
		} else if (packetMSG.footer[packetMSG.syncIndex] == inByte) { // footer char received
 8005104:	4b25      	ldr	r3, [pc, #148]	; (800519c <serialEvent+0x188>)
 8005106:	79db      	ldrb	r3, [r3, #7]
 8005108:	461a      	mov	r2, r3
 800510a:	4b24      	ldr	r3, [pc, #144]	; (800519c <serialEvent+0x188>)
 800510c:	4413      	add	r3, r2
 800510e:	795b      	ldrb	r3, [r3, #5]
 8005110:	79fa      	ldrb	r2, [r7, #7]
 8005112:	429a      	cmp	r2, r3
 8005114:	d129      	bne.n	800516a <serialEvent+0x156>
			packetMSG.syncIndex++;
 8005116:	4b21      	ldr	r3, [pc, #132]	; (800519c <serialEvent+0x188>)
 8005118:	79db      	ldrb	r3, [r3, #7]
 800511a:	3301      	adds	r3, #1
 800511c:	b2da      	uxtb	r2, r3
 800511e:	4b1f      	ldr	r3, [pc, #124]	; (800519c <serialEvent+0x188>)
 8005120:	71da      	strb	r2, [r3, #7]
			if (packetMSG.syncIndex == FOOTER_SIZE) { // finish footer SYNC
 8005122:	4b1e      	ldr	r3, [pc, #120]	; (800519c <serialEvent+0x188>)
 8005124:	79db      	ldrb	r3, [r3, #7]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d133      	bne.n	8005192 <serialEvent+0x17e>
				packetMSG.syncFlag = 3;
 800512a:	4b1c      	ldr	r3, [pc, #112]	; (800519c <serialEvent+0x188>)
 800512c:	2203      	movs	r2, #3
 800512e:	721a      	strb	r2, [r3, #8]
				memcpy(&json, &packetMSG.buffer, packetMSG.bufferIndex);
 8005130:	4b1a      	ldr	r3, [pc, #104]	; (800519c <serialEvent+0x188>)
 8005132:	895b      	ldrh	r3, [r3, #10]
 8005134:	461a      	mov	r2, r3
 8005136:	491a      	ldr	r1, [pc, #104]	; (80051a0 <serialEvent+0x18c>)
 8005138:	481a      	ldr	r0, [pc, #104]	; (80051a4 <serialEvent+0x190>)
 800513a:	f001 fd45 	bl	8006bc8 <memcpy>
				json[packetMSG.bufferIndex] = 0; //NULL; // end with NULL to indicate end of string
 800513e:	4b17      	ldr	r3, [pc, #92]	; (800519c <serialEvent+0x188>)
 8005140:	895b      	ldrh	r3, [r3, #10]
 8005142:	461a      	mov	r2, r3
 8005144:	4b17      	ldr	r3, [pc, #92]	; (80051a4 <serialEvent+0x190>)
 8005146:	2100      	movs	r1, #0
 8005148:	5499      	strb	r1, [r3, r2]
				jsonLength = packetMSG.bufferIndex;
 800514a:	4b14      	ldr	r3, [pc, #80]	; (800519c <serialEvent+0x188>)
 800514c:	895a      	ldrh	r2, [r3, #10]
 800514e:	4b16      	ldr	r3, [pc, #88]	; (80051a8 <serialEvent+0x194>)
 8005150:	801a      	strh	r2, [r3, #0]
				parsePacket();
 8005152:	f000 f85b 	bl	800520c <parsePacket>
				packetMSG.bufferIndex = 0;
 8005156:	4b11      	ldr	r3, [pc, #68]	; (800519c <serialEvent+0x188>)
 8005158:	2200      	movs	r2, #0
 800515a:	815a      	strh	r2, [r3, #10]
				packetMSG.syncIndex = 0;
 800515c:	4b0f      	ldr	r3, [pc, #60]	; (800519c <serialEvent+0x188>)
 800515e:	2200      	movs	r2, #0
 8005160:	71da      	strb	r2, [r3, #7]
				packetMSG.syncFlag = 0;
 8005162:	4b0e      	ldr	r3, [pc, #56]	; (800519c <serialEvent+0x188>)
 8005164:	2200      	movs	r2, #0
 8005166:	721a      	strb	r2, [r3, #8]
		break;
 8005168:	e013      	b.n	8005192 <serialEvent+0x17e>
			packetMSG.syncFlag = 1;
 800516a:	4b0c      	ldr	r3, [pc, #48]	; (800519c <serialEvent+0x188>)
 800516c:	2201      	movs	r2, #1
 800516e:	721a      	strb	r2, [r3, #8]
			if (packetMSG.footer[0] == inByte) {
 8005170:	4b0a      	ldr	r3, [pc, #40]	; (800519c <serialEvent+0x188>)
 8005172:	795b      	ldrb	r3, [r3, #5]
 8005174:	79fa      	ldrb	r2, [r7, #7]
 8005176:	429a      	cmp	r2, r3
 8005178:	d103      	bne.n	8005182 <serialEvent+0x16e>
				packetMSG.syncIndex = 1;
 800517a:	4b08      	ldr	r3, [pc, #32]	; (800519c <serialEvent+0x188>)
 800517c:	2201      	movs	r2, #1
 800517e:	71da      	strb	r2, [r3, #7]
		break;
 8005180:	e007      	b.n	8005192 <serialEvent+0x17e>
				packetMSG.syncIndex = 0;
 8005182:	4b06      	ldr	r3, [pc, #24]	; (800519c <serialEvent+0x188>)
 8005184:	2200      	movs	r2, #0
 8005186:	71da      	strb	r2, [r3, #7]
		break;
 8005188:	e003      	b.n	8005192 <serialEvent+0x17e>
		break;
 800518a:	bf00      	nop
 800518c:	e002      	b.n	8005194 <serialEvent+0x180>
		break;
 800518e:	bf00      	nop
 8005190:	e000      	b.n	8005194 <serialEvent+0x180>
		break;
 8005192:	bf00      	nop
	}
	} // end switch
} // end serialEvent
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	2000cb28 	.word	0x2000cb28
 80051a0:	2000cb34 	.word	0x2000cb34
 80051a4:	2000cd34 	.word	0x2000cd34
 80051a8:	2000ca0c 	.word	0x2000ca0c

080051ac <jsoneq>:

// compare to json tokens
int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
	if (tok->type == JSMN_STRING && (int) strlen(s) == tok->end - tok->start
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d11e      	bne.n	80051fe <jsoneq+0x52>
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7fb f805 	bl	80001d0 <strlen>
 80051c6:	4603      	mov	r3, r0
 80051c8:	4619      	mov	r1, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	4299      	cmp	r1, r3
 80051d6:	d112      	bne.n	80051fe <jsoneq+0x52>
			&& strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	461a      	mov	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1898      	adds	r0, r3, r2
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	f001 fd1e 	bl	8006c30 <strncmp>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <jsoneq+0x52>
		return 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e001      	b.n	8005202 <jsoneq+0x56>
	}
	return -1;
 80051fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <parsePacket>:

// Packet Parser
void parsePacket(void) {
 800520c:	b5b0      	push	{r4, r5, r7, lr}
 800520e:	b0f2      	sub	sp, #456	; 0x1c8
 8005210:	af06      	add	r7, sp, #24
	int i;
	int r;
	jsmn_parser p;
	jsmntok_t t[20]; /* We expect no more than 128 tokens */

	jsmn_init(&p);
 8005212:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8005216:	4618      	mov	r0, r3
 8005218:	f000 ff71 	bl	80060fe <jsmn_init>
	r = jsmn_parse(&p, json, strlen(json), t, sizeof(t) / sizeof(t[0]));
 800521c:	48a8      	ldr	r0, [pc, #672]	; (80054c0 <parsePacket+0x2b4>)
 800521e:	f7fa ffd7 	bl	80001d0 <strlen>
 8005222:	4601      	mov	r1, r0
 8005224:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005228:	f507 70ca 	add.w	r0, r7, #404	; 0x194
 800522c:	2314      	movs	r3, #20
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	4613      	mov	r3, r2
 8005232:	460a      	mov	r2, r1
 8005234:	49a2      	ldr	r1, [pc, #648]	; (80054c0 <parsePacket+0x2b4>)
 8005236:	f000 fdc7 	bl	8005dc8 <jsmn_parse>
 800523a:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4

	// test received  message
	//sprintf(messageSend, "r: %.d\r\n", r);
	//HAL_UART_Transmit(&huart2, (uint8_t*) messageSend, strlen(messageSend),5000);  // send json packet
	// verify root token is the specific mic
	if (jsoneq(json, &t[1], "mic") == 0) {
 800523e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005242:	3310      	adds	r3, #16
 8005244:	4a9f      	ldr	r2, [pc, #636]	; (80054c4 <parsePacket+0x2b8>)
 8005246:	4619      	mov	r1, r3
 8005248:	489d      	ldr	r0, [pc, #628]	; (80054c0 <parsePacket+0x2b4>)
 800524a:	f7ff ffaf 	bl	80051ac <jsoneq>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	f040 825f 	bne.w	8005714 <parsePacket+0x508>
		// copy token into array - consider switching to strndup()
		char numString[10];
		sprintf(numString, "%.*s", t[2].end - t[2].start,json + t[2].start);
 8005256:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800525a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800525c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	1ad2      	subs	r2, r2, r3
 8005264:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	4619      	mov	r1, r3
 800526c:	4b94      	ldr	r3, [pc, #592]	; (80054c0 <parsePacket+0x2b4>)
 800526e:	440b      	add	r3, r1
 8005270:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8005274:	4994      	ldr	r1, [pc, #592]	; (80054c8 <parsePacket+0x2bc>)
 8005276:	f001 fcbb 	bl	8006bf0 <siprintf>
		int micAddr = atoi(numString);
 800527a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800527e:	4618      	mov	r0, r3
 8005280:	f001 fc74 	bl	8006b6c <atoi>
 8005284:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
#ifdef DEBUGGING_MSGS
		sprintf(messageSend, "micAddr: %d\r\n", micAddr);
		HAL_UART_Transmit(&huart2, (uint8_t*) messageSend,strlen(messageSend), 5000);  // send json packet
#endif
		// verify its the correct mic or the golden mic
		if ((micAddr == MICNUM) || (micAddr == 0)) {
 8005288:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800528c:	2b01      	cmp	r3, #1
 800528e:	d004      	beq.n	800529a <parsePacket+0x8e>
 8005290:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005294:	2b00      	cmp	r3, #0
 8005296:	f040 823d 	bne.w	8005714 <parsePacket+0x508>
			ackSend(1, MICNUM);
 800529a:	2101      	movs	r1, #1
 800529c:	2001      	movs	r0, #1
 800529e:	f000 fabd 	bl	800581c <ackSend>
			/* Loop over all keys of the root object */
			for (i = 3; i < r; i++) {
 80052a2:	2303      	movs	r3, #3
 80052a4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80052a8:	e22d      	b.n	8005706 <parsePacket+0x4fa>

				if (jsoneq(json, &t[i], "getSettings") == 0) {
 80052aa:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80052ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	4413      	add	r3, r2
 80052b6:	4a85      	ldr	r2, [pc, #532]	; (80054cc <parsePacket+0x2c0>)
 80052b8:	4619      	mov	r1, r3
 80052ba:	4881      	ldr	r0, [pc, #516]	; (80054c0 <parsePacket+0x2b4>)
 80052bc:	f7ff ff76 	bl	80051ac <jsoneq>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d126      	bne.n	8005314 <parsePacket+0x108>
					sprintf(messageSend, "{\"Settings\":%d,\"gain\":%d,\"channel\":%d,\"threshOn\":%d,\"sigThresh\":%d,\"adcLatency\":%d,\"recordState\":%d}\r\n"
 80052c6:	4b82      	ldr	r3, [pc, #520]	; (80054d0 <parsePacket+0x2c4>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	461d      	mov	r5, r3
 80052cc:	4b81      	ldr	r3, [pc, #516]	; (80054d4 <parsePacket+0x2c8>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	461a      	mov	r2, r3
 80052d2:	4b81      	ldr	r3, [pc, #516]	; (80054d8 <parsePacket+0x2cc>)
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	4619      	mov	r1, r3
 80052d8:	4b80      	ldr	r3, [pc, #512]	; (80054dc <parsePacket+0x2d0>)
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	4b80      	ldr	r3, [pc, #512]	; (80054e0 <parsePacket+0x2d4>)
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	461c      	mov	r4, r3
 80052e4:	4b7f      	ldr	r3, [pc, #508]	; (80054e4 <parsePacket+0x2d8>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	9304      	str	r3, [sp, #16]
 80052ea:	9403      	str	r4, [sp, #12]
 80052ec:	9002      	str	r0, [sp, #8]
 80052ee:	9101      	str	r1, [sp, #4]
 80052f0:	9200      	str	r2, [sp, #0]
 80052f2:	462b      	mov	r3, r5
 80052f4:	2201      	movs	r2, #1
 80052f6:	497c      	ldr	r1, [pc, #496]	; (80054e8 <parsePacket+0x2dc>)
 80052f8:	487c      	ldr	r0, [pc, #496]	; (80054ec <parsePacket+0x2e0>)
 80052fa:	f001 fc79 	bl	8006bf0 <siprintf>
							, MICNUM , pgaGain , pgaChannel , threshOnSet , sigThresh , adcLatency , recordState );
#ifdef WIRELESS
					HAL_UART_Transmit(&huart1, (uint8_t*) messageSend,strlen(messageSend), 5000);
					HAL_Delay(100); // allow xbee to finish packet
#else
					HAL_UART_Transmit(&huart2, (uint8_t*) messageSend,strlen(messageSend), 5000);
 80052fe:	487b      	ldr	r0, [pc, #492]	; (80054ec <parsePacket+0x2e0>)
 8005300:	f7fa ff66 	bl	80001d0 <strlen>
 8005304:	4603      	mov	r3, r0
 8005306:	b29a      	uxth	r2, r3
 8005308:	f241 3388 	movw	r3, #5000	; 0x1388
 800530c:	4977      	ldr	r1, [pc, #476]	; (80054ec <parsePacket+0x2e0>)
 800530e:	4878      	ldr	r0, [pc, #480]	; (80054f0 <parsePacket+0x2e4>)
 8005310:	f7fe fea7 	bl	8004062 <HAL_UART_Transmit>
#endif

				}if (jsoneq(json, &t[i], "gain") == 0) {
 8005314:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005318:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	4413      	add	r3, r2
 8005320:	4a74      	ldr	r2, [pc, #464]	; (80054f4 <parsePacket+0x2e8>)
 8005322:	4619      	mov	r1, r3
 8005324:	4866      	ldr	r0, [pc, #408]	; (80054c0 <parsePacket+0x2b4>)
 8005326:	f7ff ff41 	bl	80051ac <jsoneq>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d13b      	bne.n	80053a8 <parsePacket+0x19c>

					// copy token into array - consider switching to strndup()
					char numString[10];
					sprintf(numString, "%.*s", t[i + 1].end - t[i + 1].start,json + t[i + 1].start);
 8005330:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005334:	3301      	adds	r3, #1
 8005336:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800533a:	011b      	lsls	r3, r3, #4
 800533c:	4413      	add	r3, r2
 800533e:	3308      	adds	r3, #8
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005346:	3301      	adds	r3, #1
 8005348:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	440b      	add	r3, r1
 8005350:	3304      	adds	r3, #4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	1ad1      	subs	r1, r2, r3
 8005356:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800535a:	3301      	adds	r3, #1
 800535c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	4413      	add	r3, r2
 8005364:	3304      	adds	r3, #4
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	4b55      	ldr	r3, [pc, #340]	; (80054c0 <parsePacket+0x2b4>)
 800536c:	4413      	add	r3, r2
 800536e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8005372:	460a      	mov	r2, r1
 8005374:	4954      	ldr	r1, [pc, #336]	; (80054c8 <parsePacket+0x2bc>)
 8005376:	f001 fc3b 	bl	8006bf0 <siprintf>
					pgaGain = atoi(numString);
 800537a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800537e:	4618      	mov	r0, r3
 8005380:	f001 fbf4 	bl	8006b6c <atoi>
 8005384:	4603      	mov	r3, r0
 8005386:	b2da      	uxtb	r2, r3
 8005388:	4b51      	ldr	r3, [pc, #324]	; (80054d0 <parsePacket+0x2c4>)
 800538a:	701a      	strb	r2, [r3, #0]
#ifdef DEBUGGING_MSGS
					sprintf(messageSend, "pgaGain: %d\r\n", pgaGain);
					HAL_UART_Transmit(&huart2, (uint8_t*) messageSend,strlen(messageSend), 5000);  // send json packet
#endif
					// update PGA Settings
					writePGA(pgaGain , pgaChannel);
 800538c:	4b50      	ldr	r3, [pc, #320]	; (80054d0 <parsePacket+0x2c4>)
 800538e:	781a      	ldrb	r2, [r3, #0]
 8005390:	4b50      	ldr	r3, [pc, #320]	; (80054d4 <parsePacket+0x2c8>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	4619      	mov	r1, r3
 8005396:	4610      	mov	r0, r2
 8005398:	f000 f9fe 	bl	8005798 <writePGA>

					i++;
 800539c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80053a0:	3301      	adds	r3, #1
 80053a2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80053a6:	e1a9      	b.n	80056fc <parsePacket+0x4f0>
				}else if (jsoneq(json, &t[i], "channel") == 0) {
 80053a8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80053ac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	4413      	add	r3, r2
 80053b4:	4a50      	ldr	r2, [pc, #320]	; (80054f8 <parsePacket+0x2ec>)
 80053b6:	4619      	mov	r1, r3
 80053b8:	4841      	ldr	r0, [pc, #260]	; (80054c0 <parsePacket+0x2b4>)
 80053ba:	f7ff fef7 	bl	80051ac <jsoneq>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d13b      	bne.n	800543c <parsePacket+0x230>

					// copy token into array - consider switching to strndup()
					char numString[10];
					sprintf(numString, "%.*s", t[i + 1].end - t[i + 1].start,json + t[i + 1].start);
 80053c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80053c8:	3301      	adds	r3, #1
 80053ca:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	4413      	add	r3, r2
 80053d2:	3308      	adds	r3, #8
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80053da:	3301      	adds	r3, #1
 80053dc:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	440b      	add	r3, r1
 80053e4:	3304      	adds	r3, #4
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	1ad1      	subs	r1, r2, r3
 80053ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80053ee:	3301      	adds	r3, #1
 80053f0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	4413      	add	r3, r2
 80053f8:	3304      	adds	r3, #4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	461a      	mov	r2, r3
 80053fe:	4b30      	ldr	r3, [pc, #192]	; (80054c0 <parsePacket+0x2b4>)
 8005400:	4413      	add	r3, r2
 8005402:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8005406:	460a      	mov	r2, r1
 8005408:	492f      	ldr	r1, [pc, #188]	; (80054c8 <parsePacket+0x2bc>)
 800540a:	f001 fbf1 	bl	8006bf0 <siprintf>
					pgaChannel = atoi(numString);
 800540e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005412:	4618      	mov	r0, r3
 8005414:	f001 fbaa 	bl	8006b6c <atoi>
 8005418:	4603      	mov	r3, r0
 800541a:	b2da      	uxtb	r2, r3
 800541c:	4b2d      	ldr	r3, [pc, #180]	; (80054d4 <parsePacket+0x2c8>)
 800541e:	701a      	strb	r2, [r3, #0]
#ifdef DEBUGGING_MSGS
					sprintf(messageSend, "pgaChannel: %d\r\n", pgaChannel);
					HAL_UART_Transmit(&huart2, (uint8_t*) messageSend,strlen(messageSend), 5000);  // send json packet
#endif
					// update PGA Settings
					writePGA(pgaGain , pgaChannel);
 8005420:	4b2b      	ldr	r3, [pc, #172]	; (80054d0 <parsePacket+0x2c4>)
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	4b2b      	ldr	r3, [pc, #172]	; (80054d4 <parsePacket+0x2c8>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	4619      	mov	r1, r3
 800542a:	4610      	mov	r0, r2
 800542c:	f000 f9b4 	bl	8005798 <writePGA>

					i++;
 8005430:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005434:	3301      	adds	r3, #1
 8005436:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800543a:	e15f      	b.n	80056fc <parsePacket+0x4f0>
				}else if (jsoneq(json, &t[i], "threshOn") == 0) {
 800543c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005440:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	4413      	add	r3, r2
 8005448:	4a2c      	ldr	r2, [pc, #176]	; (80054fc <parsePacket+0x2f0>)
 800544a:	4619      	mov	r1, r3
 800544c:	481c      	ldr	r0, [pc, #112]	; (80054c0 <parsePacket+0x2b4>)
 800544e:	f7ff fead 	bl	80051ac <jsoneq>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d153      	bne.n	8005500 <parsePacket+0x2f4>

					// copy token into array - consider switching to strndup()
					char numString[10];
					sprintf(numString, "%.*s", t[i + 1].end - t[i + 1].start,json + t[i + 1].start);
 8005458:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800545c:	3301      	adds	r3, #1
 800545e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	4413      	add	r3, r2
 8005466:	3308      	adds	r3, #8
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800546e:	3301      	adds	r3, #1
 8005470:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	440b      	add	r3, r1
 8005478:	3304      	adds	r3, #4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	1ad1      	subs	r1, r2, r3
 800547e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005482:	3301      	adds	r3, #1
 8005484:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	4413      	add	r3, r2
 800548c:	3304      	adds	r3, #4
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <parsePacket+0x2b4>)
 8005494:	4413      	add	r3, r2
 8005496:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800549a:	460a      	mov	r2, r1
 800549c:	490a      	ldr	r1, [pc, #40]	; (80054c8 <parsePacket+0x2bc>)
 800549e:	f001 fba7 	bl	8006bf0 <siprintf>
					threshOnSet = atoi(numString);
 80054a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 fb60 	bl	8006b6c <atoi>
 80054ac:	4603      	mov	r3, r0
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <parsePacket+0x2cc>)
 80054b2:	801a      	strh	r2, [r3, #0]
					//EE_WriteVariable(EE_threshOnSet_add,  (uint16_t)threshOnSet);
#ifdef DEBUGGING_MSGS
					sprintf(messageSend, "threshOnSet: %d \r\n", (int)threshOnSet);
					HAL_UART_Transmit(&huart2, (uint8_t*) messageSend,strlen(messageSend), 5000);  // send json packet
#endif
					i++;
 80054b4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80054b8:	3301      	adds	r3, #1
 80054ba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80054be:	e11d      	b.n	80056fc <parsePacket+0x4f0>
 80054c0:	2000cd34 	.word	0x2000cd34
 80054c4:	08009058 	.word	0x08009058
 80054c8:	0800905c 	.word	0x0800905c
 80054cc:	08009064 	.word	0x08009064
 80054d0:	20000010 	.word	0x20000010
 80054d4:	2000ca0a 	.word	0x2000ca0a
 80054d8:	20000008 	.word	0x20000008
 80054dc:	2000000e 	.word	0x2000000e
 80054e0:	2000000c 	.word	0x2000000c
 80054e4:	2000000a 	.word	0x2000000a
 80054e8:	08009070 	.word	0x08009070
 80054ec:	2000cc34 	.word	0x2000cc34
 80054f0:	2000cf94 	.word	0x2000cf94
 80054f4:	080090d8 	.word	0x080090d8
 80054f8:	080090e0 	.word	0x080090e0
 80054fc:	080090e8 	.word	0x080090e8
				}else if (jsoneq(json, &t[i], "sigThresh") == 0) {
 8005500:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005504:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	4413      	add	r3, r2
 800550c:	4a84      	ldr	r2, [pc, #528]	; (8005720 <parsePacket+0x514>)
 800550e:	4619      	mov	r1, r3
 8005510:	4884      	ldr	r0, [pc, #528]	; (8005724 <parsePacket+0x518>)
 8005512:	f7ff fe4b 	bl	80051ac <jsoneq>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d165      	bne.n	80055e8 <parsePacket+0x3dc>

					// copy token into array - consider switching to strndup()
					char numString[10];
					sprintf(numString, "%.*s", t[i + 1].end - t[i + 1].start,json + t[i + 1].start);
 800551c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005520:	3301      	adds	r3, #1
 8005522:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	4413      	add	r3, r2
 800552a:	3308      	adds	r3, #8
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005532:	3301      	adds	r3, #1
 8005534:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	440b      	add	r3, r1
 800553c:	3304      	adds	r3, #4
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	1ad1      	subs	r1, r2, r3
 8005542:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005546:	3301      	adds	r3, #1
 8005548:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	4413      	add	r3, r2
 8005550:	3304      	adds	r3, #4
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	4b73      	ldr	r3, [pc, #460]	; (8005724 <parsePacket+0x518>)
 8005558:	4413      	add	r3, r2
 800555a:	f107 0018 	add.w	r0, r7, #24
 800555e:	460a      	mov	r2, r1
 8005560:	4971      	ldr	r1, [pc, #452]	; (8005728 <parsePacket+0x51c>)
 8005562:	f001 fb45 	bl	8006bf0 <siprintf>
					float sigThreshFloat = atof(numString);
 8005566:	f107 0318 	add.w	r3, r7, #24
 800556a:	4618      	mov	r0, r3
 800556c:	f001 fafb 	bl	8006b66 <atof>
 8005570:	ec54 3b10 	vmov	r3, r4, d0
 8005574:	4618      	mov	r0, r3
 8005576:	4621      	mov	r1, r4
 8005578:	f7fb fb20 	bl	8000bbc <__aeabi_d2f>
 800557c:	4603      	mov	r3, r0
 800557e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					if (sigThreshFloat>1) sigThreshFloat=1;
 8005582:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 8005586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800558a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800558e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005592:	dd03      	ble.n	800559c <parsePacket+0x390>
 8005594:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005598:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					if (sigThreshFloat<0) sigThreshFloat=0;
 800559c:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 80055a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a8:	d503      	bpl.n	80055b2 <parsePacket+0x3a6>
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
					sigThresh = (uint16_t) ( ((sigThreshFloat) * 4095/2) + 4095/2);
 80055b2:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 80055b6:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800572c <parsePacket+0x520>
 80055ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80055c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055c6:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8005730 <parsePacket+0x524>
 80055ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d2:	ee17 3a90 	vmov	r3, s15
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	4b56      	ldr	r3, [pc, #344]	; (8005734 <parsePacket+0x528>)
 80055da:	801a      	strh	r2, [r3, #0]
					//EE_WriteVariable(EE_sigThresh_add,  (uint16_t)sigThresh);
#ifdef DEBUGGING_MSGS
					sprintf(messageSend, "sigThresh: %d \r\n", (int)sigThresh);
					HAL_UART_Transmit(&huart2, (uint8_t*) messageSend,strlen(messageSend), 5000);  // send json packet
#endif
					i++;
 80055dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80055e0:	3301      	adds	r3, #1
 80055e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80055e6:	e089      	b.n	80056fc <parsePacket+0x4f0>
				}else if (jsoneq(json, &t[i], "adcLatency") == 0) {
 80055e8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80055ec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	4413      	add	r3, r2
 80055f4:	4a50      	ldr	r2, [pc, #320]	; (8005738 <parsePacket+0x52c>)
 80055f6:	4619      	mov	r1, r3
 80055f8:	484a      	ldr	r0, [pc, #296]	; (8005724 <parsePacket+0x518>)
 80055fa:	f7ff fdd7 	bl	80051ac <jsoneq>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d13c      	bne.n	800567e <parsePacket+0x472>

					// copy token into array - consider switching to strndup()
					char numString[10];
					sprintf(numString, "%.*s", t[i + 1].end - t[i + 1].start,json + t[i + 1].start);
 8005604:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005608:	3301      	adds	r3, #1
 800560a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	4413      	add	r3, r2
 8005612:	3308      	adds	r3, #8
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800561a:	3301      	adds	r3, #1
 800561c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	440b      	add	r3, r1
 8005624:	3304      	adds	r3, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	1ad1      	subs	r1, r2, r3
 800562a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800562e:	3301      	adds	r3, #1
 8005630:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	4413      	add	r3, r2
 8005638:	3304      	adds	r3, #4
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	4b39      	ldr	r3, [pc, #228]	; (8005724 <parsePacket+0x518>)
 8005640:	4413      	add	r3, r2
 8005642:	f107 000c 	add.w	r0, r7, #12
 8005646:	460a      	mov	r2, r1
 8005648:	4937      	ldr	r1, [pc, #220]	; (8005728 <parsePacket+0x51c>)
 800564a:	f001 fad1 	bl	8006bf0 <siprintf>
					adcLatency = atoi(numString);
 800564e:	f107 030c 	add.w	r3, r7, #12
 8005652:	4618      	mov	r0, r3
 8005654:	f001 fa8a 	bl	8006b6c <atoi>
 8005658:	4603      	mov	r3, r0
 800565a:	b29a      	uxth	r2, r3
 800565c:	4b37      	ldr	r3, [pc, #220]	; (800573c <parsePacket+0x530>)
 800565e:	801a      	strh	r2, [r3, #0]
					if (adcLatency>=ADC_BUFFER_SIZE) adcLatency = (ADC_BUFFER_SIZE - 1);
 8005660:	4b36      	ldr	r3, [pc, #216]	; (800573c <parsePacket+0x530>)
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	f5b3 4fc8 	cmp.w	r3, #25600	; 0x6400
 8005668:	d303      	bcc.n	8005672 <parsePacket+0x466>
 800566a:	4b34      	ldr	r3, [pc, #208]	; (800573c <parsePacket+0x530>)
 800566c:	f246 32ff 	movw	r2, #25599	; 0x63ff
 8005670:	801a      	strh	r2, [r3, #0]
					//EE_WriteVariable(EE_adcLatency_add,  (uint16_t)adcLatency);
#ifdef DEBUGGING_MSGS
					sprintf(messageSend, "adcLatency: %d \r\n", (int)adcLatency);
					HAL_UART_Transmit(&huart2, (uint8_t*) messageSend,strlen(messageSend), 5000);  // send json packet
#endif
					i++;
 8005672:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005676:	3301      	adds	r3, #1
 8005678:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800567c:	e03e      	b.n	80056fc <parsePacket+0x4f0>
				}else if (jsoneq(json, &t[i], "recordState") == 0) {
 800567e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8005682:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	4413      	add	r3, r2
 800568a:	4a2d      	ldr	r2, [pc, #180]	; (8005740 <parsePacket+0x534>)
 800568c:	4619      	mov	r1, r3
 800568e:	4825      	ldr	r0, [pc, #148]	; (8005724 <parsePacket+0x518>)
 8005690:	f7ff fd8c 	bl	80051ac <jsoneq>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d130      	bne.n	80056fc <parsePacket+0x4f0>

					// copy token into array - consider switching to strndup()
					char numString[10];
					sprintf(numString, "%.*s", t[i + 1].end - t[i + 1].start,json + t[i + 1].start);
 800569a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800569e:	3301      	adds	r3, #1
 80056a0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	4413      	add	r3, r2
 80056a8:	3308      	adds	r3, #8
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80056b0:	3301      	adds	r3, #1
 80056b2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	440b      	add	r3, r1
 80056ba:	3304      	adds	r3, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	1ad1      	subs	r1, r2, r3
 80056c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80056c4:	3301      	adds	r3, #1
 80056c6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	4413      	add	r3, r2
 80056ce:	3304      	adds	r3, #4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	4b13      	ldr	r3, [pc, #76]	; (8005724 <parsePacket+0x518>)
 80056d6:	4413      	add	r3, r2
 80056d8:	4638      	mov	r0, r7
 80056da:	460a      	mov	r2, r1
 80056dc:	4912      	ldr	r1, [pc, #72]	; (8005728 <parsePacket+0x51c>)
 80056de:	f001 fa87 	bl	8006bf0 <siprintf>
					recordState = atoi(numString);
 80056e2:	463b      	mov	r3, r7
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 fa41 	bl	8006b6c <atoi>
 80056ea:	4603      	mov	r3, r0
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	4b15      	ldr	r3, [pc, #84]	; (8005744 <parsePacket+0x538>)
 80056f0:	701a      	strb	r2, [r3, #0]
#ifdef DEBUGGING_MSGS

					sprintf(messageSend, "recordState: %d \r\n", (int)recordState);
					HAL_UART_Transmit(&huart2, (uint8_t*) messageSend,strlen(messageSend), 5000);  // send json packet
#endif
					i++;
 80056f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80056f6:	3301      	adds	r3, #1
 80056f8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
			for (i = 3; i < r; i++) {
 80056fc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005700:	3301      	adds	r3, #1
 8005702:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8005706:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800570a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800570e:	429a      	cmp	r2, r3
 8005710:	f6ff adcb 	blt.w	80052aa <parsePacket+0x9e>
				}
			} /* End loop over all keys of the root object */
		} // end correct Mic address
	} // end Mic token
}
 8005714:	bf00      	nop
 8005716:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800571a:	46bd      	mov	sp, r7
 800571c:	bdb0      	pop	{r4, r5, r7, pc}
 800571e:	bf00      	nop
 8005720:	080090f4 	.word	0x080090f4
 8005724:	2000cd34 	.word	0x2000cd34
 8005728:	0800905c 	.word	0x0800905c
 800572c:	457ff000 	.word	0x457ff000
 8005730:	44ffe000 	.word	0x44ffe000
 8005734:	2000000e 	.word	0x2000000e
 8005738:	08009100 	.word	0x08009100
 800573c:	2000000c 	.word	0x2000000c
 8005740:	0800910c 	.word	0x0800910c
 8005744:	2000000a 	.word	0x2000000a

08005748 <initPacket>:

// initialize packet struct
void initPacket(void) {
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
	// init variables to default:
	packetMSG.header[0] = 'j';
 800574c:	4b11      	ldr	r3, [pc, #68]	; (8005794 <initPacket+0x4c>)
 800574e:	226a      	movs	r2, #106	; 0x6a
 8005750:	701a      	strb	r2, [r3, #0]
	packetMSG.header[1] = 's';
 8005752:	4b10      	ldr	r3, [pc, #64]	; (8005794 <initPacket+0x4c>)
 8005754:	2273      	movs	r2, #115	; 0x73
 8005756:	705a      	strb	r2, [r3, #1]
	packetMSG.header[2] = 'o';
 8005758:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <initPacket+0x4c>)
 800575a:	226f      	movs	r2, #111	; 0x6f
 800575c:	709a      	strb	r2, [r3, #2]
	packetMSG.header[3] = 'n';
 800575e:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <initPacket+0x4c>)
 8005760:	226e      	movs	r2, #110	; 0x6e
 8005762:	70da      	strb	r2, [r3, #3]
	packetMSG.header[4] = ':';
 8005764:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <initPacket+0x4c>)
 8005766:	223a      	movs	r2, #58	; 0x3a
 8005768:	711a      	strb	r2, [r3, #4]

	packetMSG.footer[0] = 13; // /r
 800576a:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <initPacket+0x4c>)
 800576c:	220d      	movs	r2, #13
 800576e:	715a      	strb	r2, [r3, #5]
	packetMSG.footer[1] = 10; // /n
 8005770:	4b08      	ldr	r3, [pc, #32]	; (8005794 <initPacket+0x4c>)
 8005772:	220a      	movs	r2, #10
 8005774:	719a      	strb	r2, [r3, #6]

	packetMSG.syncIndex = 0; // sync index for header / footer
 8005776:	4b07      	ldr	r3, [pc, #28]	; (8005794 <initPacket+0x4c>)
 8005778:	2200      	movs	r2, #0
 800577a:	71da      	strb	r2, [r3, #7]
	packetMSG.syncFlag = 0; // 0 - waiting for header, 1 -  waiting for footer, 2 - verify footer, 3 - finish footer send to parser, flash buffer
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <initPacket+0x4c>)
 800577e:	2200      	movs	r2, #0
 8005780:	721a      	strb	r2, [r3, #8]
	packetMSG.bufferIndex = 0; // buffer index
 8005782:	4b04      	ldr	r3, [pc, #16]	; (8005794 <initPacket+0x4c>)
 8005784:	2200      	movs	r2, #0
 8005786:	815a      	strh	r2, [r3, #10]
} // end init Packet struct
 8005788:	bf00      	nop
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	2000cb28 	.word	0x2000cb28

08005798 <writePGA>:

// update PGA module
void writePGA(uint8_t gain , uint8_t channel ){
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	460a      	mov	r2, r1
 80057a2:	71fb      	strb	r3, [r7, #7]
 80057a4:	4613      	mov	r3, r2
 80057a6:	71bb      	strb	r3, [r7, #6]

	// limit to valid input
	if (gain > 7) gain = 7;
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	2b07      	cmp	r3, #7
 80057ac:	d901      	bls.n	80057b2 <writePGA+0x1a>
 80057ae:	2307      	movs	r3, #7
 80057b0:	71fb      	strb	r3, [r7, #7]
	if (channel > 1) channel = 1;
 80057b2:	79bb      	ldrb	r3, [r7, #6]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d901      	bls.n	80057bc <writePGA+0x24>
 80057b8:	2301      	movs	r3, #1
 80057ba:	71bb      	strb	r3, [r7, #6]

	// update PGA
	uint8_t writeMSB = 0x2A;
 80057bc:	232a      	movs	r3, #42	; 0x2a
 80057be:	73fb      	strb	r3, [r7, #15]
	uint8_t writeLSB = ((gain << 4) | channel);
 80057c0:	79fb      	ldrb	r3, [r7, #7]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	b25a      	sxtb	r2, r3
 80057c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	b25b      	sxtb	r3, r3
 80057ce:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin , GPIO_PIN_RESET);
 80057d0:	2200      	movs	r2, #0
 80057d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057da:	f7fc ff97 	bl	800270c <HAL_GPIO_WritePin>
	uint16_t spiTransmit[1] = {((writeMSB<<8) | (writeLSB))};
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	b21a      	sxth	r2, r3
 80057e4:	7bbb      	ldrb	r3, [r7, #14]
 80057e6:	b21b      	sxth	r3, r3
 80057e8:	4313      	orrs	r3, r2
 80057ea:	b21b      	sxth	r3, r3
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	81bb      	strh	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi3, (uint8_t*)spiTransmit, 1, 5000);
 80057f0:	f107 010c 	add.w	r1, r7, #12
 80057f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80057f8:	2201      	movs	r2, #1
 80057fa:	4807      	ldr	r0, [pc, #28]	; (8005818 <writePGA+0x80>)
 80057fc:	f7fe f960 	bl	8003ac0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(PGA_CS_GPIO_Port, PGA_CS_Pin , GPIO_PIN_SET);
 8005800:	2201      	movs	r2, #1
 8005802:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800580a:	f7fc ff7f 	bl	800270c <HAL_GPIO_WritePin>
}
 800580e:	bf00      	nop
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	2000ce4c 	.word	0x2000ce4c

0800581c <ackSend>:

// send ack true false & mic number
void ackSend(uint8_t state, uint8_t micNum){
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	460a      	mov	r2, r1
 8005826:	71fb      	strb	r3, [r7, #7]
 8005828:	4613      	mov	r3, r2
 800582a:	71bb      	strb	r3, [r7, #6]
	sprintf(messageSend, "{\"Ack\":%d,\"Mic\":%d}\r\n",state,micNum);
 800582c:	79fa      	ldrb	r2, [r7, #7]
 800582e:	79bb      	ldrb	r3, [r7, #6]
 8005830:	4909      	ldr	r1, [pc, #36]	; (8005858 <ackSend+0x3c>)
 8005832:	480a      	ldr	r0, [pc, #40]	; (800585c <ackSend+0x40>)
 8005834:	f001 f9dc 	bl	8006bf0 <siprintf>
#ifdef WIRELESS
	HAL_UART_Transmit(&huart1, (uint8_t*) messageSend,strlen(messageSend), 5000);
	HAL_Delay(100); // allow xbee to finish packet
#else
	HAL_UART_Transmit(&huart2, (uint8_t*) messageSend,strlen(messageSend), 5000);
 8005838:	4808      	ldr	r0, [pc, #32]	; (800585c <ackSend+0x40>)
 800583a:	f7fa fcc9 	bl	80001d0 <strlen>
 800583e:	4603      	mov	r3, r0
 8005840:	b29a      	uxth	r2, r3
 8005842:	f241 3388 	movw	r3, #5000	; 0x1388
 8005846:	4905      	ldr	r1, [pc, #20]	; (800585c <ackSend+0x40>)
 8005848:	4805      	ldr	r0, [pc, #20]	; (8005860 <ackSend+0x44>)
 800584a:	f7fe fc0a 	bl	8004062 <HAL_UART_Transmit>
#endif
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	08009118 	.word	0x08009118
 800585c:	2000cc34 	.word	0x2000cc34
 8005860:	2000cf94 	.word	0x2000cf94

08005864 <sendBuffOut>:

// send adc buffer out (playback via uart)
void sendBuffOut (void){
 8005864:	b5b0      	push	{r4, r5, r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
	// pull down interrupt IO
	D2_INT_GPIO_Port->BRR = D2_INT_Pin;
 800586a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800586e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005872:	629a      	str	r2, [r3, #40]	; 0x28
	// start of transmission
	sprintf(messageSend, "{\"Recording\":\"Start\",\"Binary\":%d,\"bufferIndex\":%d}\r\n",(int)PACKET_SIZE,(int)buffADC_index); //buffADC_index  buffOut_index
 8005874:	4b34      	ldr	r3, [pc, #208]	; (8005948 <sendBuffOut+0xe4>)
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 800587c:	4933      	ldr	r1, [pc, #204]	; (800594c <sendBuffOut+0xe8>)
 800587e:	4834      	ldr	r0, [pc, #208]	; (8005950 <sendBuffOut+0xec>)
 8005880:	f001 f9b6 	bl	8006bf0 <siprintf>
#ifdef WIRELESS
	HAL_UART_Transmit(&huart1, (uint8_t*) messageSend,strlen(messageSend), 5000);
	HAL_Delay(100); // allow xbee to finish packet
#else
	HAL_UART_Transmit(&huart2, (uint8_t*) messageSend,strlen(messageSend), 5000);
 8005884:	4832      	ldr	r0, [pc, #200]	; (8005950 <sendBuffOut+0xec>)
 8005886:	f7fa fca3 	bl	80001d0 <strlen>
 800588a:	4603      	mov	r3, r0
 800588c:	b29a      	uxth	r2, r3
 800588e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005892:	492f      	ldr	r1, [pc, #188]	; (8005950 <sendBuffOut+0xec>)
 8005894:	482f      	ldr	r0, [pc, #188]	; (8005954 <sendBuffOut+0xf0>)
 8005896:	f7fe fbe4 	bl	8004062 <HAL_UART_Transmit>
	// send out packet
#ifdef WIRELESS
	HAL_UART_Transmit(&huart1, (uint8_t*) buffADC, PACKET_SIZE , 5000);
	HAL_Delay(100); // allow xbee to finish packet
#else
	HAL_UART_Transmit(&huart2, (uint8_t*) buffADC, PACKET_SIZE , 5000);
 800589a:	f241 3388 	movw	r3, #5000	; 0x1388
 800589e:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 80058a2:	492d      	ldr	r1, [pc, #180]	; (8005958 <sendBuffOut+0xf4>)
 80058a4:	482b      	ldr	r0, [pc, #172]	; (8005954 <sendBuffOut+0xf0>)
 80058a6:	f7fe fbdc 	bl	8004062 <HAL_UART_Transmit>
#endif


	// sent out in packets of 256 samples PACKET_SIZE if more packets available
	for (int ii = PACKET_SIZE ; ii <= ADC_BUFFER_SIZE*2-PACKET_SIZE; ii = ii+PACKET_SIZE){
 80058aa:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 80058ae:	607b      	str	r3, [r7, #4]
 80058b0:	e01e      	b.n	80058f0 <sendBuffOut+0x8c>
		sprintf(messageSend, "{\"Recording\":\"Packet\",\"Binary\":%d}\r\n",(int)PACKET_SIZE);
 80058b2:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 80058b6:	4929      	ldr	r1, [pc, #164]	; (800595c <sendBuffOut+0xf8>)
 80058b8:	4825      	ldr	r0, [pc, #148]	; (8005950 <sendBuffOut+0xec>)
 80058ba:	f001 f999 	bl	8006bf0 <siprintf>
#ifdef WIRELESS
		HAL_UART_Transmit(&huart1, (uint8_t*) messageSend,strlen(messageSend), 5000);
		HAL_Delay(100); // allow xbee to finish packet
#else
		HAL_UART_Transmit(&huart2, (uint8_t*) messageSend,strlen(messageSend), 5000);
 80058be:	4824      	ldr	r0, [pc, #144]	; (8005950 <sendBuffOut+0xec>)
 80058c0:	f7fa fc86 	bl	80001d0 <strlen>
 80058c4:	4603      	mov	r3, r0
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80058cc:	4920      	ldr	r1, [pc, #128]	; (8005950 <sendBuffOut+0xec>)
 80058ce:	4821      	ldr	r0, [pc, #132]	; (8005954 <sendBuffOut+0xf0>)
 80058d0:	f7fe fbc7 	bl	8004062 <HAL_UART_Transmit>
		// binary packet
#ifdef WIRELESS
		HAL_UART_Transmit(&huart1, ((uint8_t*) buffADC) + ii, PACKET_SIZE , 5000);
		HAL_Delay(100); // allow xbee to finish packet
#else
		HAL_UART_Transmit(&huart2, ((uint8_t*) buffADC) + ii, PACKET_SIZE , 5000);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a20      	ldr	r2, [pc, #128]	; (8005958 <sendBuffOut+0xf4>)
 80058d8:	1899      	adds	r1, r3, r2
 80058da:	f241 3388 	movw	r3, #5000	; 0x1388
 80058de:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 80058e2:	481c      	ldr	r0, [pc, #112]	; (8005954 <sendBuffOut+0xf0>)
 80058e4:	f7fe fbbd 	bl	8004062 <HAL_UART_Transmit>
	for (int ii = PACKET_SIZE ; ii <= ADC_BUFFER_SIZE*2-PACKET_SIZE; ii = ii+PACKET_SIZE){
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f503 4348 	add.w	r3, r3, #51200	; 0xc800
 80058ee:	607b      	str	r3, [r7, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	dddd      	ble.n	80058b2 <sendBuffOut+0x4e>
#endif

	} // todo - send remaining packet if packet size not a round divider of buffer

	// end of transmission
	sprintf(messageSend,"{\"Recording\":\"End\"}\r\n");
 80058f6:	4a16      	ldr	r2, [pc, #88]	; (8005950 <sendBuffOut+0xec>)
 80058f8:	4b19      	ldr	r3, [pc, #100]	; (8005960 <sendBuffOut+0xfc>)
 80058fa:	4615      	mov	r5, r2
 80058fc:	461c      	mov	r4, r3
 80058fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005900:	6028      	str	r0, [r5, #0]
 8005902:	6069      	str	r1, [r5, #4]
 8005904:	60aa      	str	r2, [r5, #8]
 8005906:	60eb      	str	r3, [r5, #12]
 8005908:	6820      	ldr	r0, [r4, #0]
 800590a:	6128      	str	r0, [r5, #16]
 800590c:	88a3      	ldrh	r3, [r4, #4]
 800590e:	82ab      	strh	r3, [r5, #20]
#ifdef WIRELESS
	HAL_UART_Transmit(&huart1, (uint8_t*) messageSend,strlen(messageSend), 5000);
	HAL_Delay(100); // allow xbee to finish packet
#else
	HAL_UART_Transmit(&huart2, (uint8_t*) messageSend,strlen(messageSend), 5000);
 8005910:	480f      	ldr	r0, [pc, #60]	; (8005950 <sendBuffOut+0xec>)
 8005912:	f7fa fc5d 	bl	80001d0 <strlen>
 8005916:	4603      	mov	r3, r0
 8005918:	b29a      	uxth	r2, r3
 800591a:	f241 3388 	movw	r3, #5000	; 0x1388
 800591e:	490c      	ldr	r1, [pc, #48]	; (8005950 <sendBuffOut+0xec>)
 8005920:	480c      	ldr	r0, [pc, #48]	; (8005954 <sendBuffOut+0xf0>)
 8005922:	f7fe fb9e 	bl	8004062 <HAL_UART_Transmit>
#endif

	// toggle D2 to indicate end of transmission
	D2_INT_GPIO_Port->BSRR = D2_INT_Pin;
 8005926:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800592a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800592e:	619a      	str	r2, [r3, #24]
	HAL_Delay(1);
 8005930:	2001      	movs	r0, #1
 8005932:	f7fb fb83 	bl	800103c <HAL_Delay>
	D2_INT_GPIO_Port->BRR = D2_INT_Pin;
 8005936:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800593a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800593e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bdb0      	pop	{r4, r5, r7, pc}
 8005948:	2000ca04 	.word	0x2000ca04
 800594c:	08009130 	.word	0x08009130
 8005950:	2000cc34 	.word	0x2000cc34
 8005954:	2000cf94 	.word	0x2000cf94
 8005958:	20000204 	.word	0x20000204
 800595c:	08009168 	.word	0x08009168
 8005960:	08009190 	.word	0x08009190

08005964 <jsmn_alloc_token>:

/**
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	429a      	cmp	r2, r3
 8005978:	d801      	bhi.n	800597e <jsmn_alloc_token+0x1a>
		return NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	e014      	b.n	80059a8 <jsmn_alloc_token+0x44>
	}
	tok = &tokens[parser->toknext++];
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	1c59      	adds	r1, r3, #1
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	6051      	str	r1, [r2, #4]
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	4413      	add	r3, r2
 800598e:	617b      	str	r3, [r7, #20]
	tok->start = tok->end = -1;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f04f 32ff 	mov.w	r2, #4294967295
 8005996:	609a      	str	r2, [r3, #8]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	605a      	str	r2, [r3, #4]
	tok->size = 0;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2200      	movs	r2, #0
 80059a4:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
	tok->parent = -1;
#endif
	return tok;
 80059a6:	697b      	ldr	r3, [r7, #20]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	607a      	str	r2, [r7, #4]
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	460b      	mov	r3, r1
 80059c2:	72fb      	strb	r3, [r7, #11]
	token->type = type;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	7afa      	ldrb	r2, [r7, #11]
 80059c8:	701a      	strb	r2, [r3, #0]
	token->start = start;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	605a      	str	r2, [r3, #4]
	token->end = end;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	609a      	str	r2, [r3, #8]
	token->size = 0;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	60da      	str	r2, [r3, #12]
}
 80059dc:	bf00      	nop
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <jsmn_parse_primitive>:

/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
	jsmntok_t *token;
	int start;

	start = parser->pos;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	617b      	str	r3, [r7, #20]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80059fc:	e033      	b.n	8005a66 <jsmn_parse_primitive+0x7e>
		switch (js[parser->pos]) {
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	4413      	add	r3, r2
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d039      	beq.n	8005a80 <jsmn_parse_primitive+0x98>
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	dc06      	bgt.n	8005a1e <jsmn_parse_primitive+0x36>
 8005a10:	2b09      	cmp	r3, #9
 8005a12:	db0f      	blt.n	8005a34 <jsmn_parse_primitive+0x4c>
 8005a14:	2b0a      	cmp	r3, #10
 8005a16:	dd33      	ble.n	8005a80 <jsmn_parse_primitive+0x98>
 8005a18:	2b0d      	cmp	r3, #13
 8005a1a:	d031      	beq.n	8005a80 <jsmn_parse_primitive+0x98>
 8005a1c:	e00a      	b.n	8005a34 <jsmn_parse_primitive+0x4c>
 8005a1e:	2b3a      	cmp	r3, #58	; 0x3a
 8005a20:	d02e      	beq.n	8005a80 <jsmn_parse_primitive+0x98>
 8005a22:	2b3a      	cmp	r3, #58	; 0x3a
 8005a24:	dc02      	bgt.n	8005a2c <jsmn_parse_primitive+0x44>
 8005a26:	2b2c      	cmp	r3, #44	; 0x2c
 8005a28:	d02a      	beq.n	8005a80 <jsmn_parse_primitive+0x98>
 8005a2a:	e003      	b.n	8005a34 <jsmn_parse_primitive+0x4c>
 8005a2c:	2b5d      	cmp	r3, #93	; 0x5d
 8005a2e:	d027      	beq.n	8005a80 <jsmn_parse_primitive+0x98>
 8005a30:	2b7d      	cmp	r3, #125	; 0x7d
 8005a32:	d025      	beq.n	8005a80 <jsmn_parse_primitive+0x98>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b1f      	cmp	r3, #31
 8005a40:	d906      	bls.n	8005a50 <jsmn_parse_primitive+0x68>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	4413      	add	r3, r2
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b7e      	cmp	r3, #126	; 0x7e
 8005a4e:	d905      	bls.n	8005a5c <jsmn_parse_primitive+0x74>
			parser->pos = start;
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	601a      	str	r2, [r3, #0]
			return JSMN_ERROR_INVAL;
 8005a56:	f06f 0301 	mvn.w	r3, #1
 8005a5a:	e03a      	b.n	8005ad2 <jsmn_parse_primitive+0xea>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d909      	bls.n	8005a84 <jsmn_parse_primitive+0x9c>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	4413      	add	r3, r2
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1bf      	bne.n	80059fe <jsmn_parse_primitive+0x16>
	/* In strict mode primitive must be followed by a comma/object/array */
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
 8005a7e:	e001      	b.n	8005a84 <jsmn_parse_primitive+0x9c>
				goto found;
 8005a80:	bf00      	nop
 8005a82:	e000      	b.n	8005a86 <jsmn_parse_primitive+0x9e>
found:
 8005a84:	bf00      	nop
	if (tokens == NULL) {
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <jsmn_parse_primitive+0xb2>
		parser->pos--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	1e5a      	subs	r2, r3, #1
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	601a      	str	r2, [r3, #0]
		return 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	e01b      	b.n	8005ad2 <jsmn_parse_primitive+0xea>
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
 8005a9a:	6a3a      	ldr	r2, [r7, #32]
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7ff ff60 	bl	8005964 <jsmn_alloc_token>
 8005aa4:	6138      	str	r0, [r7, #16]
	if (token == NULL) {
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d105      	bne.n	8005ab8 <jsmn_parse_primitive+0xd0>
		parser->pos = start;
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	601a      	str	r2, [r3, #0]
		return JSMN_ERROR_NOMEM;
 8005ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab6:	e00c      	b.n	8005ad2 <jsmn_parse_primitive+0xea>
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	2104      	movs	r1, #4
 8005ac0:	6938      	ldr	r0, [r7, #16]
 8005ac2:	f7ff ff77 	bl	80059b4 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	1e5a      	subs	r2, r3, #1
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	601a      	str	r2, [r3, #0]
	return 0;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <jsmn_parse_string>:

/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
	jsmntok_t *token;

	int start = parser->pos;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	61bb      	str	r3, [r7, #24]

	parser->pos++;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	601a      	str	r2, [r3, #0]

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8005afa:	e14e      	b.n	8005d9a <jsmn_parse_string+0x2be>
		char c = js[parser->pos];
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	4413      	add	r3, r2
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	75fb      	strb	r3, [r7, #23]

		/* Quote: end of string */
		if (c == '\"') {
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
 8005b0a:	2b22      	cmp	r3, #34	; 0x22
 8005b0c:	d11d      	bne.n	8005b4a <jsmn_parse_string+0x6e>
			if (tokens == NULL) {
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <jsmn_parse_string+0x3c>
				return 0;
 8005b14:	2300      	movs	r3, #0
 8005b16:	e152      	b.n	8005dbe <jsmn_parse_string+0x2e2>
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
 8005b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b1a:	6839      	ldr	r1, [r7, #0]
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f7ff ff21 	bl	8005964 <jsmn_alloc_token>
 8005b22:	6138      	str	r0, [r7, #16]
			if (token == NULL) {
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d105      	bne.n	8005b36 <jsmn_parse_string+0x5a>
				parser->pos = start;
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]
				return JSMN_ERROR_NOMEM;
 8005b30:	f04f 33ff 	mov.w	r3, #4294967295
 8005b34:	e143      	b.n	8005dbe <jsmn_parse_string+0x2e2>
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2103      	movs	r1, #3
 8005b40:	6938      	ldr	r0, [r7, #16]
 8005b42:	f7ff ff37 	bl	80059b4 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
			token->parent = parser->toksuper;
#endif
			return 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	e139      	b.n	8005dbe <jsmn_parse_string+0x2e2>
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
 8005b4a:	7dfb      	ldrb	r3, [r7, #23]
 8005b4c:	2b5c      	cmp	r3, #92	; 0x5c
 8005b4e:	f040 811c 	bne.w	8005d8a <jsmn_parse_string+0x2ae>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3301      	adds	r3, #1
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	f240 8115 	bls.w	8005d8a <jsmn_parse_string+0x2ae>
			int i;
			parser->pos++;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	601a      	str	r2, [r3, #0]
			switch (js[parser->pos]) {
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	4413      	add	r3, r2
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	3b22      	subs	r3, #34	; 0x22
 8005b76:	2b53      	cmp	r3, #83	; 0x53
 8005b78:	f200 8101 	bhi.w	8005d7e <jsmn_parse_string+0x2a2>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <jsmn_parse_string+0xa8>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005d8f 	.word	0x08005d8f
 8005b88:	08005d7f 	.word	0x08005d7f
 8005b8c:	08005d7f 	.word	0x08005d7f
 8005b90:	08005d7f 	.word	0x08005d7f
 8005b94:	08005d7f 	.word	0x08005d7f
 8005b98:	08005d7f 	.word	0x08005d7f
 8005b9c:	08005d7f 	.word	0x08005d7f
 8005ba0:	08005d7f 	.word	0x08005d7f
 8005ba4:	08005d7f 	.word	0x08005d7f
 8005ba8:	08005d7f 	.word	0x08005d7f
 8005bac:	08005d7f 	.word	0x08005d7f
 8005bb0:	08005d7f 	.word	0x08005d7f
 8005bb4:	08005d7f 	.word	0x08005d7f
 8005bb8:	08005d8f 	.word	0x08005d8f
 8005bbc:	08005d7f 	.word	0x08005d7f
 8005bc0:	08005d7f 	.word	0x08005d7f
 8005bc4:	08005d7f 	.word	0x08005d7f
 8005bc8:	08005d7f 	.word	0x08005d7f
 8005bcc:	08005d7f 	.word	0x08005d7f
 8005bd0:	08005d7f 	.word	0x08005d7f
 8005bd4:	08005d7f 	.word	0x08005d7f
 8005bd8:	08005d7f 	.word	0x08005d7f
 8005bdc:	08005d7f 	.word	0x08005d7f
 8005be0:	08005d7f 	.word	0x08005d7f
 8005be4:	08005d7f 	.word	0x08005d7f
 8005be8:	08005d7f 	.word	0x08005d7f
 8005bec:	08005d7f 	.word	0x08005d7f
 8005bf0:	08005d7f 	.word	0x08005d7f
 8005bf4:	08005d7f 	.word	0x08005d7f
 8005bf8:	08005d7f 	.word	0x08005d7f
 8005bfc:	08005d7f 	.word	0x08005d7f
 8005c00:	08005d7f 	.word	0x08005d7f
 8005c04:	08005d7f 	.word	0x08005d7f
 8005c08:	08005d7f 	.word	0x08005d7f
 8005c0c:	08005d7f 	.word	0x08005d7f
 8005c10:	08005d7f 	.word	0x08005d7f
 8005c14:	08005d7f 	.word	0x08005d7f
 8005c18:	08005d7f 	.word	0x08005d7f
 8005c1c:	08005d7f 	.word	0x08005d7f
 8005c20:	08005d7f 	.word	0x08005d7f
 8005c24:	08005d7f 	.word	0x08005d7f
 8005c28:	08005d7f 	.word	0x08005d7f
 8005c2c:	08005d7f 	.word	0x08005d7f
 8005c30:	08005d7f 	.word	0x08005d7f
 8005c34:	08005d7f 	.word	0x08005d7f
 8005c38:	08005d7f 	.word	0x08005d7f
 8005c3c:	08005d7f 	.word	0x08005d7f
 8005c40:	08005d7f 	.word	0x08005d7f
 8005c44:	08005d7f 	.word	0x08005d7f
 8005c48:	08005d7f 	.word	0x08005d7f
 8005c4c:	08005d7f 	.word	0x08005d7f
 8005c50:	08005d7f 	.word	0x08005d7f
 8005c54:	08005d7f 	.word	0x08005d7f
 8005c58:	08005d7f 	.word	0x08005d7f
 8005c5c:	08005d7f 	.word	0x08005d7f
 8005c60:	08005d7f 	.word	0x08005d7f
 8005c64:	08005d7f 	.word	0x08005d7f
 8005c68:	08005d7f 	.word	0x08005d7f
 8005c6c:	08005d8f 	.word	0x08005d8f
 8005c70:	08005d7f 	.word	0x08005d7f
 8005c74:	08005d7f 	.word	0x08005d7f
 8005c78:	08005d7f 	.word	0x08005d7f
 8005c7c:	08005d7f 	.word	0x08005d7f
 8005c80:	08005d7f 	.word	0x08005d7f
 8005c84:	08005d8f 	.word	0x08005d8f
 8005c88:	08005d7f 	.word	0x08005d7f
 8005c8c:	08005d7f 	.word	0x08005d7f
 8005c90:	08005d7f 	.word	0x08005d7f
 8005c94:	08005d8f 	.word	0x08005d8f
 8005c98:	08005d7f 	.word	0x08005d7f
 8005c9c:	08005d7f 	.word	0x08005d7f
 8005ca0:	08005d7f 	.word	0x08005d7f
 8005ca4:	08005d7f 	.word	0x08005d7f
 8005ca8:	08005d7f 	.word	0x08005d7f
 8005cac:	08005d7f 	.word	0x08005d7f
 8005cb0:	08005d7f 	.word	0x08005d7f
 8005cb4:	08005d8f 	.word	0x08005d8f
 8005cb8:	08005d7f 	.word	0x08005d7f
 8005cbc:	08005d7f 	.word	0x08005d7f
 8005cc0:	08005d7f 	.word	0x08005d7f
 8005cc4:	08005d8f 	.word	0x08005d8f
 8005cc8:	08005d7f 	.word	0x08005d7f
 8005ccc:	08005d8f 	.word	0x08005d8f
 8005cd0:	08005cd5 	.word	0x08005cd5
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	1c5a      	adds	r2, r3, #1
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	601a      	str	r2, [r3, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61fb      	str	r3, [r7, #28]
 8005ce2:	e037      	b.n	8005d54 <jsmn_parse_string+0x278>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	4413      	add	r3, r2
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b2f      	cmp	r3, #47	; 0x2f
 8005cf0:	d906      	bls.n	8005d00 <jsmn_parse_string+0x224>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b39      	cmp	r3, #57	; 0x39
 8005cfe:	d921      	bls.n	8005d44 <jsmn_parse_string+0x268>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	4413      	add	r3, r2
 8005d08:	781b      	ldrb	r3, [r3, #0]
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d906      	bls.n	8005d1c <jsmn_parse_string+0x240>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	4413      	add	r3, r2
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b46      	cmp	r3, #70	; 0x46
 8005d1a:	d913      	bls.n	8005d44 <jsmn_parse_string+0x268>
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	4413      	add	r3, r2
 8005d24:	781b      	ldrb	r3, [r3, #0]
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 8005d26:	2b60      	cmp	r3, #96	; 0x60
 8005d28:	d906      	bls.n	8005d38 <jsmn_parse_string+0x25c>
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	4413      	add	r3, r2
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	2b66      	cmp	r3, #102	; 0x66
 8005d36:	d905      	bls.n	8005d44 <jsmn_parse_string+0x268>
							parser->pos = start;
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	601a      	str	r2, [r3, #0]
							return JSMN_ERROR_INVAL;
 8005d3e:	f06f 0301 	mvn.w	r3, #1
 8005d42:	e03c      	b.n	8005dbe <jsmn_parse_string+0x2e2>
						}
						parser->pos++;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	1c5a      	adds	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	601a      	str	r2, [r3, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	3301      	adds	r3, #1
 8005d52:	61fb      	str	r3, [r7, #28]
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	dc0b      	bgt.n	8005d72 <jsmn_parse_string+0x296>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d906      	bls.n	8005d72 <jsmn_parse_string+0x296>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1b8      	bne.n	8005ce4 <jsmn_parse_string+0x208>
					}
					parser->pos--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	1e5a      	subs	r2, r3, #1
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	601a      	str	r2, [r3, #0]
					break;
 8005d7c:	e008      	b.n	8005d90 <jsmn_parse_string+0x2b4>
				/* Unexpected symbol */
				default:
					parser->pos = start;
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	601a      	str	r2, [r3, #0]
					return JSMN_ERROR_INVAL;
 8005d84:	f06f 0301 	mvn.w	r3, #1
 8005d88:	e019      	b.n	8005dbe <jsmn_parse_string+0x2e2>
			}
		}
 8005d8a:	bf00      	nop
 8005d8c:	e000      	b.n	8005d90 <jsmn_parse_string+0x2b4>
					break;
 8005d8e:	bf00      	nop
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d907      	bls.n	8005db4 <jsmn_parse_string+0x2d8>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	4413      	add	r3, r2
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f47f aea4 	bne.w	8005afc <jsmn_parse_string+0x20>
	}
	parser->pos = start;
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	601a      	str	r2, [r3, #0]
	return JSMN_ERROR_PART;
 8005dba:	f06f 0302 	mvn.w	r3, #2
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3720      	adds	r7, #32
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop

08005dc8 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08c      	sub	sp, #48	; 0x30
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
 8005dd4:	603b      	str	r3, [r7, #0]
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	623b      	str	r3, [r7, #32]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8005ddc:	e15c      	b.n	8006098 <jsmn_parse+0x2d0>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	4413      	add	r3, r2
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	77fb      	strb	r3, [r7, #31]
		switch (c) {
 8005dea:	7ffb      	ldrb	r3, [r7, #31]
 8005dec:	2b2c      	cmp	r3, #44	; 0x2c
 8005dee:	f000 80da 	beq.w	8005fa6 <jsmn_parse+0x1de>
 8005df2:	2b2c      	cmp	r3, #44	; 0x2c
 8005df4:	dc10      	bgt.n	8005e18 <jsmn_parse+0x50>
 8005df6:	2b0d      	cmp	r3, #13
 8005df8:	f000 813e 	beq.w	8006078 <jsmn_parse+0x2b0>
 8005dfc:	2b0d      	cmp	r3, #13
 8005dfe:	dc04      	bgt.n	8005e0a <jsmn_parse+0x42>
 8005e00:	3b09      	subs	r3, #9
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	f200 8116 	bhi.w	8006034 <jsmn_parse+0x26c>
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
 8005e08:	e136      	b.n	8006078 <jsmn_parse+0x2b0>
		switch (c) {
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	f000 8134 	beq.w	8006078 <jsmn_parse+0x2b0>
 8005e10:	2b22      	cmp	r3, #34	; 0x22
 8005e12:	f000 809e 	beq.w	8005f52 <jsmn_parse+0x18a>
 8005e16:	e10d      	b.n	8006034 <jsmn_parse+0x26c>
 8005e18:	2b5d      	cmp	r3, #93	; 0x5d
 8005e1a:	d040      	beq.n	8005e9e <jsmn_parse+0xd6>
 8005e1c:	2b5d      	cmp	r3, #93	; 0x5d
 8005e1e:	dc05      	bgt.n	8005e2c <jsmn_parse+0x64>
 8005e20:	2b3a      	cmp	r3, #58	; 0x3a
 8005e22:	f000 80b9 	beq.w	8005f98 <jsmn_parse+0x1d0>
 8005e26:	2b5b      	cmp	r3, #91	; 0x5b
 8005e28:	d005      	beq.n	8005e36 <jsmn_parse+0x6e>
 8005e2a:	e103      	b.n	8006034 <jsmn_parse+0x26c>
 8005e2c:	2b7b      	cmp	r3, #123	; 0x7b
 8005e2e:	d002      	beq.n	8005e36 <jsmn_parse+0x6e>
 8005e30:	2b7d      	cmp	r3, #125	; 0x7d
 8005e32:	d034      	beq.n	8005e9e <jsmn_parse+0xd6>
 8005e34:	e0fe      	b.n	8006034 <jsmn_parse+0x26c>
				count++;
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	623b      	str	r3, [r7, #32]
				if (tokens == NULL) {
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 811c 	beq.w	800607c <jsmn_parse+0x2b4>
				token = jsmn_alloc_token(parser, tokens, num_tokens);
 8005e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f7ff fd8b 	bl	8005964 <jsmn_alloc_token>
 8005e4e:	61b8      	str	r0, [r7, #24]
				if (token == NULL)
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d102      	bne.n	8005e5c <jsmn_parse+0x94>
					return JSMN_ERROR_NOMEM;
 8005e56:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5a:	e14c      	b.n	80060f6 <jsmn_parse+0x32e>
				if (parser->toksuper != -1) {
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e64:	d007      	beq.n	8005e76 <jsmn_parse+0xae>
					tokens[parser->toksuper].size++;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	4413      	add	r3, r2
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	3201      	adds	r2, #1
 8005e74:	60da      	str	r2, [r3, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8005e76:	7ffb      	ldrb	r3, [r7, #31]
 8005e78:	2b7b      	cmp	r3, #123	; 0x7b
 8005e7a:	d101      	bne.n	8005e80 <jsmn_parse+0xb8>
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	e000      	b.n	8005e82 <jsmn_parse+0xba>
 8005e80:	2202      	movs	r2, #2
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	701a      	strb	r2, [r3, #0]
				token->start = parser->pos;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	605a      	str	r2, [r3, #4]
				parser->toksuper = parser->toknext - 1;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	461a      	mov	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	609a      	str	r2, [r3, #8]
				break;
 8005e9c:	e0f7      	b.n	800608e <jsmn_parse+0x2c6>
				if (tokens == NULL)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 80ed 	beq.w	8006080 <jsmn_parse+0x2b8>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8005ea6:	7ffb      	ldrb	r3, [r7, #31]
 8005ea8:	2b7d      	cmp	r3, #125	; 0x7d
 8005eaa:	d101      	bne.n	8005eb0 <jsmn_parse+0xe8>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <jsmn_parse+0xea>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	77bb      	strb	r3, [r7, #30]
				for (i = parser->toknext - 1; i >= 0; i--) {
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
 8005ebc:	e024      	b.n	8005f08 <jsmn_parse+0x140>
					token = &tokens[i];
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	011b      	lsls	r3, r3, #4
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
					if (token->start != -1 && token->end == -1) {
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed0:	d017      	beq.n	8005f02 <jsmn_parse+0x13a>
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d112      	bne.n	8005f02 <jsmn_parse+0x13a>
						if (token->type != type) {
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	7fba      	ldrb	r2, [r7, #30]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d002      	beq.n	8005eec <jsmn_parse+0x124>
							return JSMN_ERROR_INVAL;
 8005ee6:	f06f 0301 	mvn.w	r3, #1
 8005eea:	e104      	b.n	80060f6 <jsmn_parse+0x32e>
						parser->toksuper = -1;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef2:	609a      	str	r2, [r3, #8]
						token->end = parser->pos + 1;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	461a      	mov	r2, r3
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	609a      	str	r2, [r3, #8]
						break;
 8005f00:	e005      	b.n	8005f0e <jsmn_parse+0x146>
				for (i = parser->toknext - 1; i >= 0; i--) {
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	3b01      	subs	r3, #1
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	dad7      	bge.n	8005ebe <jsmn_parse+0xf6>
				if (i == -1) return JSMN_ERROR_INVAL;
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d119      	bne.n	8005f4a <jsmn_parse+0x182>
 8005f16:	f06f 0301 	mvn.w	r3, #1
 8005f1a:	e0ec      	b.n	80060f6 <jsmn_parse+0x32e>
					token = &tokens[i];
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	4413      	add	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
					if (token->start != -1 && token->end == -1) {
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d009      	beq.n	8005f44 <jsmn_parse+0x17c>
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f38:	d104      	bne.n	8005f44 <jsmn_parse+0x17c>
						parser->toksuper = i;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3e:	609a      	str	r2, [r3, #8]
						break;
 8005f40:	bf00      	nop
				break;
 8005f42:	e0a4      	b.n	800608e <jsmn_parse+0x2c6>
				for (; i >= 0; i--) {
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	3b01      	subs	r3, #1
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	dae5      	bge.n	8005f1c <jsmn_parse+0x154>
				break;
 8005f50:	e09d      	b.n	800608e <jsmn_parse+0x2c6>
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff fdbd 	bl	8005adc <jsmn_parse_string>
 8005f62:	6178      	str	r0, [r7, #20]
				if (r < 0) return r;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	da01      	bge.n	8005f6e <jsmn_parse+0x1a6>
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	e0c3      	b.n	80060f6 <jsmn_parse+0x32e>
				count++;
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	3301      	adds	r3, #1
 8005f72:	623b      	str	r3, [r7, #32]
				if (parser->toksuper != -1 && tokens != NULL)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7c:	f000 8082 	beq.w	8006084 <jsmn_parse+0x2bc>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d07e      	beq.n	8006084 <jsmn_parse+0x2bc>
					tokens[parser->toksuper].size++;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	683a      	ldr	r2, [r7, #0]
 8005f8e:	4413      	add	r3, r2
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	3201      	adds	r2, #1
 8005f94:	60da      	str	r2, [r3, #12]
				break;
 8005f96:	e075      	b.n	8006084 <jsmn_parse+0x2bc>
			case ':':
				parser->toksuper = parser->toknext - 1;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	609a      	str	r2, [r3, #8]
				break;
 8005fa4:	e073      	b.n	800608e <jsmn_parse+0x2c6>
			case ',':
				if (tokens != NULL && parser->toksuper != -1 &&
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d06d      	beq.n	8006088 <jsmn_parse+0x2c0>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d068      	beq.n	8006088 <jsmn_parse+0x2c0>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	781b      	ldrb	r3, [r3, #0]
				if (tokens != NULL && parser->toksuper != -1 &&
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d060      	beq.n	8006088 <jsmn_parse+0x2c0>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	4413      	add	r3, r2
 8005fd0:	781b      	ldrb	r3, [r3, #0]
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d058      	beq.n	8006088 <jsmn_parse+0x2c0>
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8005fde:	e025      	b.n	800602c <jsmn_parse+0x264>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d006      	beq.n	8005ffc <jsmn_parse+0x234>
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d114      	bne.n	8006026 <jsmn_parse+0x25e>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	4413      	add	r3, r2
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d00c      	beq.n	8006026 <jsmn_parse+0x25e>
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	011b      	lsls	r3, r3, #4
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	4413      	add	r3, r2
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601a:	d104      	bne.n	8006026 <jsmn_parse+0x25e>
								parser->toksuper = i;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006020:	609a      	str	r2, [r3, #8]
								break;
 8006022:	bf00      	nop
							}
						}
					}
#endif
				}
				break;
 8006024:	e030      	b.n	8006088 <jsmn_parse+0x2c0>
					for (i = parser->toknext - 1; i >= 0; i--) {
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	3b01      	subs	r3, #1
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	dad6      	bge.n	8005fe0 <jsmn_parse+0x218>
				break;
 8006032:	e029      	b.n	8006088 <jsmn_parse+0x2c0>
				}
#else
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f7ff fcd2 	bl	80059e8 <jsmn_parse_primitive>
 8006044:	6178      	str	r0, [r7, #20]
				if (r < 0) return r;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	da01      	bge.n	8006050 <jsmn_parse+0x288>
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	e052      	b.n	80060f6 <jsmn_parse+0x32e>
				count++;
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	3301      	adds	r3, #1
 8006054:	623b      	str	r3, [r7, #32]
				if (parser->toksuper != -1 && tokens != NULL)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d015      	beq.n	800608c <jsmn_parse+0x2c4>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d012      	beq.n	800608c <jsmn_parse+0x2c4>
					tokens[parser->toksuper].size++;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	4413      	add	r3, r2
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	3201      	adds	r2, #1
 8006074:	60da      	str	r2, [r3, #12]
				break;
 8006076:	e009      	b.n	800608c <jsmn_parse+0x2c4>
				break;
 8006078:	bf00      	nop
 800607a:	e008      	b.n	800608e <jsmn_parse+0x2c6>
					break;
 800607c:	bf00      	nop
 800607e:	e006      	b.n	800608e <jsmn_parse+0x2c6>
					break;
 8006080:	bf00      	nop
 8006082:	e004      	b.n	800608e <jsmn_parse+0x2c6>
				break;
 8006084:	bf00      	nop
 8006086:	e002      	b.n	800608e <jsmn_parse+0x2c6>
				break;
 8006088:	bf00      	nop
 800608a:	e000      	b.n	800608e <jsmn_parse+0x2c6>
				break;
 800608c:	bf00      	nop
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d907      	bls.n	80060b2 <jsmn_parse+0x2ea>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	4413      	add	r3, r2
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f47f ae96 	bne.w	8005dde <jsmn_parse+0x16>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	if (tokens != NULL) {
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d01d      	beq.n	80060f4 <jsmn_parse+0x32c>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	3b01      	subs	r3, #1
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
 80060c0:	e015      	b.n	80060ee <jsmn_parse+0x326>
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	4413      	add	r3, r2
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d0:	d00a      	beq.n	80060e8 <jsmn_parse+0x320>
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	4413      	add	r3, r2
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e0:	d102      	bne.n	80060e8 <jsmn_parse+0x320>
				return JSMN_ERROR_PART;
 80060e2:	f06f 0302 	mvn.w	r3, #2
 80060e6:	e006      	b.n	80060f6 <jsmn_parse+0x32e>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	3b01      	subs	r3, #1
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	dae6      	bge.n	80060c2 <jsmn_parse+0x2fa>
			}
		}
	}

	return count;
 80060f4:	6a3b      	ldr	r3, [r7, #32]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3728      	adds	r7, #40	; 0x28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
	parser->pos = 0;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
	parser->toknext = 0;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	605a      	str	r2, [r3, #4]
	parser->toksuper = -1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f04f 32ff 	mov.w	r2, #4294967295
 8006118:	609a      	str	r2, [r3, #8]
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
	...

08006128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800612e:	f7fa ff15 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006132:	f000 f8c3 	bl	80062bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006136:	f000 fa8b 	bl	8006650 <MX_GPIO_Init>
  MX_ADC1_Init();
 800613a:	f000 f955 	bl	80063e8 <MX_ADC1_Init>
  MX_DAC1_Init();
 800613e:	f000 f9b7 	bl	80064b0 <MX_DAC1_Init>
  MX_SPI3_Init();
 8006142:	f000 f9e7 	bl	8006514 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8006146:	f000 fa23 	bl	8006590 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800614a:	f000 fa51 	bl	80065f0 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800614e:	f000 f937 	bl	80063c0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	setup_init();
 8006152:	f7fe fefb 	bl	8004f4c <setup_init>
//	EE_setup_init();
	initPacket();
 8006156:	f7ff faf7 	bl	8005748 <initPacket>
	//	// update PGA Settings
	writePGA(pgaGain , pgaChannel);
 800615a:	4b47      	ldr	r3, [pc, #284]	; (8006278 <main+0x150>)
 800615c:	781a      	ldrb	r2, [r3, #0]
 800615e:	4b47      	ldr	r3, [pc, #284]	; (800627c <main+0x154>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f7ff fb17 	bl	8005798 <writePGA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// check if UART data available
		if (UartReady == SET) {
 800616a:	4b45      	ldr	r3, [pc, #276]	; (8006280 <main+0x158>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b01      	cmp	r3, #1
 8006172:	d119      	bne.n	80061a8 <main+0x80>
			UartReady = RESET;
 8006174:	4b42      	ldr	r3, [pc, #264]	; (8006280 <main+0x158>)
 8006176:	2200      	movs	r2, #0
 8006178:	701a      	strb	r2, [r3, #0]
			// In the future add swap buffer and reset UART receive interrupt.
			for (int ii = 0 ; ii< sizeof(aRxBuffer) ; ii++){
 800617a:	2300      	movs	r3, #0
 800617c:	607b      	str	r3, [r7, #4]
 800617e:	e00b      	b.n	8006198 <main+0x70>
				uint8_t inChar = aRxBuffer[ii];
 8006180:	4a40      	ldr	r2, [pc, #256]	; (8006284 <main+0x15c>)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4413      	add	r3, r2
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	70fb      	strb	r3, [r7, #3]
				//aTxBuffer[0] = inChar;
				//HAL_UART_Transmit(&huart2, (uint8_t*) inChar,1, 5000);  // send back char
				// pass char to packet builder
				serialEvent(inChar);
 800618a:	78fb      	ldrb	r3, [r7, #3]
 800618c:	4618      	mov	r0, r3
 800618e:	f7fe ff41 	bl	8005014 <serialEvent>
			for (int ii = 0 ; ii< sizeof(aRxBuffer) ; ii++){
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3301      	adds	r3, #1
 8006196:	607b      	str	r3, [r7, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <main+0x58>

			// Re-initialize UART in interrupt mode
#ifdef WIRELESS
			HAL_UART_Receive_IT(&huart1, (uint8_t *) aRxBuffer, sizeof(aRxBuffer));
#else
			HAL_UART_Receive_IT(&huart2, (uint8_t *) aRxBuffer, sizeof(aRxBuffer));
 800619e:	2201      	movs	r2, #1
 80061a0:	4938      	ldr	r1, [pc, #224]	; (8006284 <main+0x15c>)
 80061a2:	4839      	ldr	r0, [pc, #228]	; (8006288 <main+0x160>)
 80061a4:	f7fd fff0 	bl	8004188 <HAL_UART_Receive_IT>
#endif
		} // end UartReady

		// read adc value
		ADCValueIn = hadc1.Instance->DR;
 80061a8:	4b38      	ldr	r3, [pc, #224]	; (800628c <main+0x164>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	4a38      	ldr	r2, [pc, #224]	; (8006290 <main+0x168>)
 80061b0:	6013      	str	r3, [r2, #0]
//		char aTxBuffer[10] = {};
//		sprintf(aTxBuffer , "%d\r\n" , (int)ADCValueIn);
//		HAL_UART_Transmit(&huart2, (uint8_t*)aTxBuffer, strlen(aTxBuffer), 5000);

		// move buffer index
		buffADC_index++;
 80061b2:	4b38      	ldr	r3, [pc, #224]	; (8006294 <main+0x16c>)
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	3301      	adds	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	4b36      	ldr	r3, [pc, #216]	; (8006294 <main+0x16c>)
 80061bc:	801a      	strh	r2, [r3, #0]
		// roll over
		if (buffADC_index == ADC_BUFFER_SIZE)
 80061be:	4b35      	ldr	r3, [pc, #212]	; (8006294 <main+0x16c>)
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	f5b3 4fc8 	cmp.w	r3, #25600	; 0x6400
 80061c6:	d102      	bne.n	80061ce <main+0xa6>
			buffADC_index = 0;
 80061c8:	4b32      	ldr	r3, [pc, #200]	; (8006294 <main+0x16c>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	801a      	strh	r2, [r3, #0]

		// add to circular buffer
		buffADC[buffADC_index] = ADCValueIn;
 80061ce:	4b30      	ldr	r3, [pc, #192]	; (8006290 <main+0x168>)
 80061d0:	6819      	ldr	r1, [r3, #0]
 80061d2:	4b30      	ldr	r3, [pc, #192]	; (8006294 <main+0x16c>)
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	b289      	uxth	r1, r1
 80061da:	4b2f      	ldr	r3, [pc, #188]	; (8006298 <main+0x170>)
 80061dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		// push oldest value to dac (adcLatency)
		buffOut_index = (buffADC_index + (ADC_BUFFER_SIZE - adcLatency)) % (ADC_BUFFER_SIZE);
 80061e0:	4b2c      	ldr	r3, [pc, #176]	; (8006294 <main+0x16c>)
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	4b2d      	ldr	r3, [pc, #180]	; (800629c <main+0x174>)
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	f5c3 43c8 	rsb	r3, r3, #25600	; 0x6400
 80061ee:	4413      	add	r3, r2
 80061f0:	4a2b      	ldr	r2, [pc, #172]	; (80062a0 <main+0x178>)
 80061f2:	fb82 1203 	smull	r1, r2, r2, r3
 80061f6:	1351      	asrs	r1, r2, #13
 80061f8:	17da      	asrs	r2, r3, #31
 80061fa:	1a8a      	subs	r2, r1, r2
 80061fc:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
 8006200:	fb01 f202 	mul.w	r2, r1, r2
 8006204:	1a9a      	subs	r2, r3, r2
 8006206:	b292      	uxth	r2, r2
 8006208:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <main+0x17c>)
 800620a:	801a      	strh	r2, [r3, #0]
		*(__IO uint32_t *) Dac1_Reg = buffADC[buffOut_index];
 800620c:	4b25      	ldr	r3, [pc, #148]	; (80062a4 <main+0x17c>)
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	4b21      	ldr	r3, [pc, #132]	; (8006298 <main+0x170>)
 8006214:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006218:	4b23      	ldr	r3, [pc, #140]	; (80062a8 <main+0x180>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	601a      	str	r2, [r3, #0]

		// very simple threshold detection
		if (ADCValueIn > sigThresh) {
 800621e:	4b23      	ldr	r3, [pc, #140]	; (80062ac <main+0x184>)
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <main+0x168>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d209      	bcs.n	8006240 <main+0x118>
			D2_INT_GPIO_Port->BSRR = D2_INT_Pin;
 800622c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006230:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006234:	619a      	str	r2, [r3, #24]
			// reset keep on
			threshOn = threshOnSet;
 8006236:	4b1e      	ldr	r3, [pc, #120]	; (80062b0 <main+0x188>)
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <main+0x18c>)
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	e794      	b.n	800616a <main+0x42>

		} else if (threshOn) {
 8006240:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <main+0x18c>)
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d010      	beq.n	800626a <main+0x142>
			threshOn--;
 8006248:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <main+0x18c>)
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	4b18      	ldr	r3, [pc, #96]	; (80062b4 <main+0x18c>)
 8006252:	801a      	strh	r2, [r3, #0]
#ifdef PLAYBACK_MSG
			if ((threshOn == 0) && (recordState)){
 8006254:	4b17      	ldr	r3, [pc, #92]	; (80062b4 <main+0x18c>)
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d186      	bne.n	800616a <main+0x42>
 800625c:	4b16      	ldr	r3, [pc, #88]	; (80062b8 <main+0x190>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d082      	beq.n	800616a <main+0x42>
				sendBuffOut();
 8006264:	f7ff fafe 	bl	8005864 <sendBuffOut>
 8006268:	e77f      	b.n	800616a <main+0x42>
			}
#endif
		} else {
			D2_INT_GPIO_Port->BRR = D2_INT_Pin;
 800626a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800626e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006272:	629a      	str	r2, [r3, #40]	; 0x28
		if (UartReady == SET) {
 8006274:	e779      	b.n	800616a <main+0x42>
 8006276:	bf00      	nop
 8006278:	20000010 	.word	0x20000010
 800627c:	2000ca0a 	.word	0x2000ca0a
 8006280:	2000ca0b 	.word	0x2000ca0b
 8006284:	2000ce34 	.word	0x2000ce34
 8006288:	2000cf94 	.word	0x2000cf94
 800628c:	2000ceb0 	.word	0x2000ceb0
 8006290:	2000ca14 	.word	0x2000ca14
 8006294:	2000ca04 	.word	0x2000ca04
 8006298:	20000204 	.word	0x20000204
 800629c:	2000000c 	.word	0x2000000c
 80062a0:	51eb851f 	.word	0x51eb851f
 80062a4:	2000ca06 	.word	0x2000ca06
 80062a8:	2000ca10 	.word	0x2000ca10
 80062ac:	2000000e 	.word	0x2000000e
 80062b0:	20000008 	.word	0x20000008
 80062b4:	2000ca08 	.word	0x2000ca08
 80062b8:	2000000a 	.word	0x2000000a

080062bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b0ac      	sub	sp, #176	; 0xb0
 80062c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80062c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80062c6:	2244      	movs	r2, #68	; 0x44
 80062c8:	2100      	movs	r1, #0
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fc87 	bl	8006bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80062d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	605a      	str	r2, [r3, #4]
 80062da:	609a      	str	r2, [r3, #8]
 80062dc:	60da      	str	r2, [r3, #12]
 80062de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	2254      	movs	r2, #84	; 0x54
 80062e4:	2100      	movs	r1, #0
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fc79 	bl	8006bde <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80062ec:	2302      	movs	r3, #2
 80062ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80062f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062f4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80062f6:	2310      	movs	r3, #16
 80062f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80062fa:	2302      	movs	r3, #2
 80062fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006300:	2302      	movs	r3, #2
 8006302:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006306:	2301      	movs	r3, #1
 8006308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 10;
 800630c:	230a      	movs	r3, #10
 800630e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006312:	2307      	movs	r3, #7
 8006314:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006318:	2302      	movs	r3, #2
 800631a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800631e:	2302      	movs	r3, #2
 8006320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006324:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006328:	4618      	mov	r0, r3
 800632a:	f7fc fa6b 	bl	8002804 <HAL_RCC_OscConfig>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8006334:	f000 f9d8 	bl	80066e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006338:	230f      	movs	r3, #15
 800633a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800633c:	2303      	movs	r3, #3
 800633e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006340:	2300      	movs	r3, #0
 8006342:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006344:	2300      	movs	r3, #0
 8006346:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006348:	2300      	movs	r3, #0
 800634a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800634c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006350:	2104      	movs	r1, #4
 8006352:	4618      	mov	r0, r3
 8006354:	f7fc fe44 	bl	8002fe0 <HAL_RCC_ClockConfig>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800635e:	f000 f9c3 	bl	80066e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8006362:	f244 0303 	movw	r3, #16387	; 0x4003
 8006366:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006368:	2300      	movs	r3, #0
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800636c:	2300      	movs	r3, #0
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8006370:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006374:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8006376:	2302      	movs	r3, #2
 8006378:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800637a:	2301      	movs	r3, #1
 800637c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800637e:	2308      	movs	r3, #8
 8006380:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8006382:	2307      	movs	r3, #7
 8006384:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006386:	2302      	movs	r3, #2
 8006388:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800638a:	2302      	movs	r3, #2
 800638c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800638e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006392:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006394:	1d3b      	adds	r3, r7, #4
 8006396:	4618      	mov	r0, r3
 8006398:	f7fd f826 	bl	80033e8 <HAL_RCCEx_PeriphCLKConfig>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80063a2:	f000 f9a1 	bl	80066e8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80063a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80063aa:	f7fc f9d5 	bl	8002758 <HAL_PWREx_ControlVoltageScaling>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80063b4:	f000 f998 	bl	80066e8 <Error_Handler>
  }
}
 80063b8:	bf00      	nop
 80063ba:	37b0      	adds	r7, #176	; 0xb0
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80063c4:	2200      	movs	r2, #0
 80063c6:	2105      	movs	r1, #5
 80063c8:	2025      	movs	r0, #37	; 0x25
 80063ca:	f7fb fe34 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80063ce:	2025      	movs	r0, #37	; 0x25
 80063d0:	f7fb fe4d 	bl	800206e <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80063d4:	2200      	movs	r2, #0
 80063d6:	2105      	movs	r1, #5
 80063d8:	2026      	movs	r0, #38	; 0x26
 80063da:	f7fb fe2c 	bl	8002036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80063de:	2026      	movs	r0, #38	; 0x26
 80063e0:	f7fb fe45 	bl	800206e <HAL_NVIC_EnableIRQ>
}
 80063e4:	bf00      	nop
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80063ee:	463b      	mov	r3, r7
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	605a      	str	r2, [r3, #4]
 80063f6:	609a      	str	r2, [r3, #8]
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	611a      	str	r2, [r3, #16]
 80063fc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80063fe:	4b29      	ldr	r3, [pc, #164]	; (80064a4 <MX_ADC1_Init+0xbc>)
 8006400:	4a29      	ldr	r2, [pc, #164]	; (80064a8 <MX_ADC1_Init+0xc0>)
 8006402:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8006404:	4b27      	ldr	r3, [pc, #156]	; (80064a4 <MX_ADC1_Init+0xbc>)
 8006406:	2200      	movs	r2, #0
 8006408:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800640a:	4b26      	ldr	r3, [pc, #152]	; (80064a4 <MX_ADC1_Init+0xbc>)
 800640c:	2200      	movs	r2, #0
 800640e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006410:	4b24      	ldr	r3, [pc, #144]	; (80064a4 <MX_ADC1_Init+0xbc>)
 8006412:	2200      	movs	r2, #0
 8006414:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006416:	4b23      	ldr	r3, [pc, #140]	; (80064a4 <MX_ADC1_Init+0xbc>)
 8006418:	2200      	movs	r2, #0
 800641a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800641c:	4b21      	ldr	r3, [pc, #132]	; (80064a4 <MX_ADC1_Init+0xbc>)
 800641e:	2204      	movs	r2, #4
 8006420:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006422:	4b20      	ldr	r3, [pc, #128]	; (80064a4 <MX_ADC1_Init+0xbc>)
 8006424:	2200      	movs	r2, #0
 8006426:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006428:	4b1e      	ldr	r3, [pc, #120]	; (80064a4 <MX_ADC1_Init+0xbc>)
 800642a:	2201      	movs	r2, #1
 800642c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800642e:	4b1d      	ldr	r3, [pc, #116]	; (80064a4 <MX_ADC1_Init+0xbc>)
 8006430:	2201      	movs	r2, #1
 8006432:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006434:	4b1b      	ldr	r3, [pc, #108]	; (80064a4 <MX_ADC1_Init+0xbc>)
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800643c:	4b19      	ldr	r3, [pc, #100]	; (80064a4 <MX_ADC1_Init+0xbc>)
 800643e:	2200      	movs	r2, #0
 8006440:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006442:	4b18      	ldr	r3, [pc, #96]	; (80064a4 <MX_ADC1_Init+0xbc>)
 8006444:	2200      	movs	r2, #0
 8006446:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006448:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <MX_ADC1_Init+0xbc>)
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006450:	4b14      	ldr	r3, [pc, #80]	; (80064a4 <MX_ADC1_Init+0xbc>)
 8006452:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006456:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8006458:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <MX_ADC1_Init+0xbc>)
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006460:	4810      	ldr	r0, [pc, #64]	; (80064a4 <MX_ADC1_Init+0xbc>)
 8006462:	f7fa ffb5 	bl	80013d0 <HAL_ADC_Init>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800646c:	f000 f93c 	bl	80066e8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006470:	4b0e      	ldr	r3, [pc, #56]	; (80064ac <MX_ADC1_Init+0xc4>)
 8006472:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006474:	2306      	movs	r3, #6
 8006476:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8006478:	2303      	movs	r3, #3
 800647a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800647c:	237f      	movs	r3, #127	; 0x7f
 800647e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006480:	2304      	movs	r3, #4
 8006482:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006488:	463b      	mov	r3, r7
 800648a:	4619      	mov	r1, r3
 800648c:	4805      	ldr	r0, [pc, #20]	; (80064a4 <MX_ADC1_Init+0xbc>)
 800648e:	f7fb f949 	bl	8001724 <HAL_ADC_ConfigChannel>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006498:	f000 f926 	bl	80066e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800649c:	bf00      	nop
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	2000ceb0 	.word	0x2000ceb0
 80064a8:	50040000 	.word	0x50040000
 80064ac:	14f00020 	.word	0x14f00020

080064b0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08a      	sub	sp, #40	; 0x28
 80064b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80064b6:	1d3b      	adds	r3, r7, #4
 80064b8:	2224      	movs	r2, #36	; 0x24
 80064ba:	2100      	movs	r1, #0
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fb8e 	bl	8006bde <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80064c2:	4b12      	ldr	r3, [pc, #72]	; (800650c <MX_DAC1_Init+0x5c>)
 80064c4:	4a12      	ldr	r2, [pc, #72]	; (8006510 <MX_DAC1_Init+0x60>)
 80064c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80064c8:	4810      	ldr	r0, [pc, #64]	; (800650c <MX_DAC1_Init+0x5c>)
 80064ca:	f7fb fdea 	bl	80020a2 <HAL_DAC_Init>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80064d4:	f000 f908 	bl	80066e8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80064d8:	2300      	movs	r3, #0
 80064da:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80064dc:	2300      	movs	r3, #0
 80064de:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80064e4:	2300      	movs	r3, #0
 80064e6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80064e8:	2300      	movs	r3, #0
 80064ea:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80064ec:	1d3b      	adds	r3, r7, #4
 80064ee:	2200      	movs	r2, #0
 80064f0:	4619      	mov	r1, r3
 80064f2:	4806      	ldr	r0, [pc, #24]	; (800650c <MX_DAC1_Init+0x5c>)
 80064f4:	f7fb fe44 	bl	8002180 <HAL_DAC_ConfigChannel>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80064fe:	f000 f8f3 	bl	80066e8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8006502:	bf00      	nop
 8006504:	3728      	adds	r7, #40	; 0x28
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	2000ce38 	.word	0x2000ce38
 8006510:	40007400 	.word	0x40007400

08006514 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006518:	4b1b      	ldr	r3, [pc, #108]	; (8006588 <MX_SPI3_Init+0x74>)
 800651a:	4a1c      	ldr	r2, [pc, #112]	; (800658c <MX_SPI3_Init+0x78>)
 800651c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800651e:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <MX_SPI3_Init+0x74>)
 8006520:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006524:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006526:	4b18      	ldr	r3, [pc, #96]	; (8006588 <MX_SPI3_Init+0x74>)
 8006528:	2200      	movs	r2, #0
 800652a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800652c:	4b16      	ldr	r3, [pc, #88]	; (8006588 <MX_SPI3_Init+0x74>)
 800652e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8006532:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006534:	4b14      	ldr	r3, [pc, #80]	; (8006588 <MX_SPI3_Init+0x74>)
 8006536:	2200      	movs	r2, #0
 8006538:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800653a:	4b13      	ldr	r3, [pc, #76]	; (8006588 <MX_SPI3_Init+0x74>)
 800653c:	2200      	movs	r2, #0
 800653e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006540:	4b11      	ldr	r3, [pc, #68]	; (8006588 <MX_SPI3_Init+0x74>)
 8006542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006546:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006548:	4b0f      	ldr	r3, [pc, #60]	; (8006588 <MX_SPI3_Init+0x74>)
 800654a:	2210      	movs	r2, #16
 800654c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800654e:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <MX_SPI3_Init+0x74>)
 8006550:	2200      	movs	r2, #0
 8006552:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006554:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <MX_SPI3_Init+0x74>)
 8006556:	2200      	movs	r2, #0
 8006558:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800655a:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <MX_SPI3_Init+0x74>)
 800655c:	2200      	movs	r2, #0
 800655e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006560:	4b09      	ldr	r3, [pc, #36]	; (8006588 <MX_SPI3_Init+0x74>)
 8006562:	2207      	movs	r2, #7
 8006564:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006566:	4b08      	ldr	r3, [pc, #32]	; (8006588 <MX_SPI3_Init+0x74>)
 8006568:	2200      	movs	r2, #0
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <MX_SPI3_Init+0x74>)
 800656e:	2208      	movs	r2, #8
 8006570:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006572:	4805      	ldr	r0, [pc, #20]	; (8006588 <MX_SPI3_Init+0x74>)
 8006574:	f7fd fa1a 	bl	80039ac <HAL_SPI_Init>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800657e:	f000 f8b3 	bl	80066e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006582:	bf00      	nop
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	2000ce4c 	.word	0x2000ce4c
 800658c:	40003c00 	.word	0x40003c00

08006590 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006594:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <MX_USART1_UART_Init+0x58>)
 8006596:	4a15      	ldr	r2, [pc, #84]	; (80065ec <MX_USART1_UART_Init+0x5c>)
 8006598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800659a:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <MX_USART1_UART_Init+0x58>)
 800659c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80065a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80065a2:	4b11      	ldr	r3, [pc, #68]	; (80065e8 <MX_USART1_UART_Init+0x58>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80065a8:	4b0f      	ldr	r3, [pc, #60]	; (80065e8 <MX_USART1_UART_Init+0x58>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80065ae:	4b0e      	ldr	r3, [pc, #56]	; (80065e8 <MX_USART1_UART_Init+0x58>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80065b4:	4b0c      	ldr	r3, [pc, #48]	; (80065e8 <MX_USART1_UART_Init+0x58>)
 80065b6:	220c      	movs	r2, #12
 80065b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065ba:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <MX_USART1_UART_Init+0x58>)
 80065bc:	2200      	movs	r2, #0
 80065be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80065c0:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <MX_USART1_UART_Init+0x58>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80065c6:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <MX_USART1_UART_Init+0x58>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <MX_USART1_UART_Init+0x58>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80065d2:	4805      	ldr	r0, [pc, #20]	; (80065e8 <MX_USART1_UART_Init+0x58>)
 80065d4:	f7fd fcf7 	bl	8003fc6 <HAL_UART_Init>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80065de:	f000 f883 	bl	80066e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80065e2:	bf00      	nop
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	2000cf14 	.word	0x2000cf14
 80065ec:	40013800 	.word	0x40013800

080065f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80065f4:	4b14      	ldr	r3, [pc, #80]	; (8006648 <MX_USART2_UART_Init+0x58>)
 80065f6:	4a15      	ldr	r2, [pc, #84]	; (800664c <MX_USART2_UART_Init+0x5c>)
 80065f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80065fa:	4b13      	ldr	r3, [pc, #76]	; (8006648 <MX_USART2_UART_Init+0x58>)
 80065fc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8006600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006602:	4b11      	ldr	r3, [pc, #68]	; (8006648 <MX_USART2_UART_Init+0x58>)
 8006604:	2200      	movs	r2, #0
 8006606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006608:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <MX_USART2_UART_Init+0x58>)
 800660a:	2200      	movs	r2, #0
 800660c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800660e:	4b0e      	ldr	r3, [pc, #56]	; (8006648 <MX_USART2_UART_Init+0x58>)
 8006610:	2200      	movs	r2, #0
 8006612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <MX_USART2_UART_Init+0x58>)
 8006616:	220c      	movs	r2, #12
 8006618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800661a:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <MX_USART2_UART_Init+0x58>)
 800661c:	2200      	movs	r2, #0
 800661e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006620:	4b09      	ldr	r3, [pc, #36]	; (8006648 <MX_USART2_UART_Init+0x58>)
 8006622:	2200      	movs	r2, #0
 8006624:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006626:	4b08      	ldr	r3, [pc, #32]	; (8006648 <MX_USART2_UART_Init+0x58>)
 8006628:	2200      	movs	r2, #0
 800662a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800662c:	4b06      	ldr	r3, [pc, #24]	; (8006648 <MX_USART2_UART_Init+0x58>)
 800662e:	2200      	movs	r2, #0
 8006630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006632:	4805      	ldr	r0, [pc, #20]	; (8006648 <MX_USART2_UART_Init+0x58>)
 8006634:	f7fd fcc7 	bl	8003fc6 <HAL_UART_Init>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800663e:	f000 f853 	bl	80066e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006642:	bf00      	nop
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	2000cf94 	.word	0x2000cf94
 800664c:	40004400 	.word	0x40004400

08006650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b088      	sub	sp, #32
 8006654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006656:	f107 030c 	add.w	r3, r7, #12
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	605a      	str	r2, [r3, #4]
 8006660:	609a      	str	r2, [r3, #8]
 8006662:	60da      	str	r2, [r3, #12]
 8006664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006666:	4b1f      	ldr	r3, [pc, #124]	; (80066e4 <MX_GPIO_Init+0x94>)
 8006668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800666a:	4a1e      	ldr	r2, [pc, #120]	; (80066e4 <MX_GPIO_Init+0x94>)
 800666c:	f043 0304 	orr.w	r3, r3, #4
 8006670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006672:	4b1c      	ldr	r3, [pc, #112]	; (80066e4 <MX_GPIO_Init+0x94>)
 8006674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	60bb      	str	r3, [r7, #8]
 800667c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800667e:	4b19      	ldr	r3, [pc, #100]	; (80066e4 <MX_GPIO_Init+0x94>)
 8006680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006682:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <MX_GPIO_Init+0x94>)
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800668a:	4b16      	ldr	r3, [pc, #88]	; (80066e4 <MX_GPIO_Init+0x94>)
 800668c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	607b      	str	r3, [r7, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006696:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <MX_GPIO_Init+0x94>)
 8006698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800669a:	4a12      	ldr	r2, [pc, #72]	; (80066e4 <MX_GPIO_Init+0x94>)
 800669c:	f043 0302 	orr.w	r3, r3, #2
 80066a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066a2:	4b10      	ldr	r3, [pc, #64]	; (80066e4 <MX_GPIO_Init+0x94>)
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PGA_CS_Pin|D2_INT_Pin, GPIO_PIN_RESET);
 80066ae:	2200      	movs	r2, #0
 80066b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80066b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066b8:	f7fc f828 	bl	800270c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGA_CS_Pin D2_INT_Pin */
  GPIO_InitStruct.Pin = PGA_CS_Pin|D2_INT_Pin;
 80066bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80066c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066c2:	2301      	movs	r3, #1
 80066c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ce:	f107 030c 	add.w	r3, r7, #12
 80066d2:	4619      	mov	r1, r3
 80066d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066d8:	f7fb feae 	bl	8002438 <HAL_GPIO_Init>

}
 80066dc:	bf00      	nop
 80066de:	3720      	adds	r7, #32
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40021000 	.word	0x40021000

080066e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80066ec:	bf00      	nop
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
	...

080066f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066fe:	4b0f      	ldr	r3, [pc, #60]	; (800673c <HAL_MspInit+0x44>)
 8006700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006702:	4a0e      	ldr	r2, [pc, #56]	; (800673c <HAL_MspInit+0x44>)
 8006704:	f043 0301 	orr.w	r3, r3, #1
 8006708:	6613      	str	r3, [r2, #96]	; 0x60
 800670a:	4b0c      	ldr	r3, [pc, #48]	; (800673c <HAL_MspInit+0x44>)
 800670c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	607b      	str	r3, [r7, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006716:	4b09      	ldr	r3, [pc, #36]	; (800673c <HAL_MspInit+0x44>)
 8006718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671a:	4a08      	ldr	r2, [pc, #32]	; (800673c <HAL_MspInit+0x44>)
 800671c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006720:	6593      	str	r3, [r2, #88]	; 0x58
 8006722:	4b06      	ldr	r3, [pc, #24]	; (800673c <HAL_MspInit+0x44>)
 8006724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800672a:	603b      	str	r3, [r7, #0]
 800672c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40021000 	.word	0x40021000

08006740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08a      	sub	sp, #40	; 0x28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006748:	f107 0314 	add.w	r3, r7, #20
 800674c:	2200      	movs	r2, #0
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	605a      	str	r2, [r3, #4]
 8006752:	609a      	str	r2, [r3, #8]
 8006754:	60da      	str	r2, [r3, #12]
 8006756:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a15      	ldr	r2, [pc, #84]	; (80067b4 <HAL_ADC_MspInit+0x74>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d124      	bne.n	80067ac <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8006762:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <HAL_ADC_MspInit+0x78>)
 8006764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006766:	4a14      	ldr	r2, [pc, #80]	; (80067b8 <HAL_ADC_MspInit+0x78>)
 8006768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800676c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800676e:	4b12      	ldr	r3, [pc, #72]	; (80067b8 <HAL_ADC_MspInit+0x78>)
 8006770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006772:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800677a:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <HAL_ADC_MspInit+0x78>)
 800677c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677e:	4a0e      	ldr	r2, [pc, #56]	; (80067b8 <HAL_ADC_MspInit+0x78>)
 8006780:	f043 0301 	orr.w	r3, r3, #1
 8006784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <HAL_ADC_MspInit+0x78>)
 8006788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	60fb      	str	r3, [r7, #12]
 8006790:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = PGA_OUT_Pin;
 8006792:	2301      	movs	r3, #1
 8006794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006796:	230b      	movs	r3, #11
 8006798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800679a:	2300      	movs	r3, #0
 800679c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PGA_OUT_GPIO_Port, &GPIO_InitStruct);
 800679e:	f107 0314 	add.w	r3, r7, #20
 80067a2:	4619      	mov	r1, r3
 80067a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067a8:	f7fb fe46 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80067ac:	bf00      	nop
 80067ae:	3728      	adds	r7, #40	; 0x28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	50040000 	.word	0x50040000
 80067b8:	40021000 	.word	0x40021000

080067bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08a      	sub	sp, #40	; 0x28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067c4:	f107 0314 	add.w	r3, r7, #20
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	605a      	str	r2, [r3, #4]
 80067ce:	609a      	str	r2, [r3, #8]
 80067d0:	60da      	str	r2, [r3, #12]
 80067d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a15      	ldr	r2, [pc, #84]	; (8006830 <HAL_DAC_MspInit+0x74>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d124      	bne.n	8006828 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80067de:	4b15      	ldr	r3, [pc, #84]	; (8006834 <HAL_DAC_MspInit+0x78>)
 80067e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e2:	4a14      	ldr	r2, [pc, #80]	; (8006834 <HAL_DAC_MspInit+0x78>)
 80067e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067e8:	6593      	str	r3, [r2, #88]	; 0x58
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <HAL_DAC_MspInit+0x78>)
 80067ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067f6:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <HAL_DAC_MspInit+0x78>)
 80067f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fa:	4a0e      	ldr	r2, [pc, #56]	; (8006834 <HAL_DAC_MspInit+0x78>)
 80067fc:	f043 0301 	orr.w	r3, r3, #1
 8006800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006802:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <HAL_DAC_MspInit+0x78>)
 8006804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = MIC_OUT_Pin;
 800680e:	2310      	movs	r3, #16
 8006810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006812:	2303      	movs	r3, #3
 8006814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006816:	2300      	movs	r3, #0
 8006818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_OUT_GPIO_Port, &GPIO_InitStruct);
 800681a:	f107 0314 	add.w	r3, r7, #20
 800681e:	4619      	mov	r1, r3
 8006820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006824:	f7fb fe08 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006828:	bf00      	nop
 800682a:	3728      	adds	r7, #40	; 0x28
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	40007400 	.word	0x40007400
 8006834:	40021000 	.word	0x40021000

08006838 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08a      	sub	sp, #40	; 0x28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006840:	f107 0314 	add.w	r3, r7, #20
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	605a      	str	r2, [r3, #4]
 800684a:	609a      	str	r2, [r3, #8]
 800684c:	60da      	str	r2, [r3, #12]
 800684e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a17      	ldr	r2, [pc, #92]	; (80068b4 <HAL_SPI_MspInit+0x7c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d127      	bne.n	80068aa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800685a:	4b17      	ldr	r3, [pc, #92]	; (80068b8 <HAL_SPI_MspInit+0x80>)
 800685c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685e:	4a16      	ldr	r2, [pc, #88]	; (80068b8 <HAL_SPI_MspInit+0x80>)
 8006860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006864:	6593      	str	r3, [r2, #88]	; 0x58
 8006866:	4b14      	ldr	r3, [pc, #80]	; (80068b8 <HAL_SPI_MspInit+0x80>)
 8006868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800686e:	613b      	str	r3, [r7, #16]
 8006870:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006872:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <HAL_SPI_MspInit+0x80>)
 8006874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006876:	4a10      	ldr	r2, [pc, #64]	; (80068b8 <HAL_SPI_MspInit+0x80>)
 8006878:	f043 0302 	orr.w	r3, r3, #2
 800687c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800687e:	4b0e      	ldr	r3, [pc, #56]	; (80068b8 <HAL_SPI_MspInit+0x80>)
 8006880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = PGA_SCK_Pin|PGA_MOSI_Pin;
 800688a:	2328      	movs	r3, #40	; 0x28
 800688c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800688e:	2302      	movs	r3, #2
 8006890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006892:	2300      	movs	r3, #0
 8006894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006896:	2303      	movs	r3, #3
 8006898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800689a:	2306      	movs	r3, #6
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800689e:	f107 0314 	add.w	r3, r7, #20
 80068a2:	4619      	mov	r1, r3
 80068a4:	4805      	ldr	r0, [pc, #20]	; (80068bc <HAL_SPI_MspInit+0x84>)
 80068a6:	f7fb fdc7 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80068aa:	bf00      	nop
 80068ac:	3728      	adds	r7, #40	; 0x28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	40003c00 	.word	0x40003c00
 80068b8:	40021000 	.word	0x40021000
 80068bc:	48000400 	.word	0x48000400

080068c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08c      	sub	sp, #48	; 0x30
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068c8:	f107 031c 	add.w	r3, r7, #28
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	605a      	str	r2, [r3, #4]
 80068d2:	609a      	str	r2, [r3, #8]
 80068d4:	60da      	str	r2, [r3, #12]
 80068d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a38      	ldr	r2, [pc, #224]	; (80069c0 <HAL_UART_MspInit+0x100>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d12a      	bne.n	8006938 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80068e2:	4b38      	ldr	r3, [pc, #224]	; (80069c4 <HAL_UART_MspInit+0x104>)
 80068e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e6:	4a37      	ldr	r2, [pc, #220]	; (80069c4 <HAL_UART_MspInit+0x104>)
 80068e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068ec:	6613      	str	r3, [r2, #96]	; 0x60
 80068ee:	4b35      	ldr	r3, [pc, #212]	; (80069c4 <HAL_UART_MspInit+0x104>)
 80068f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068fa:	4b32      	ldr	r3, [pc, #200]	; (80069c4 <HAL_UART_MspInit+0x104>)
 80068fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fe:	4a31      	ldr	r2, [pc, #196]	; (80069c4 <HAL_UART_MspInit+0x104>)
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006906:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <HAL_UART_MspInit+0x104>)
 8006908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = XBEE_TX_Pin|XBEE_RX_Pin;
 8006912:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006918:	2302      	movs	r3, #2
 800691a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691c:	2300      	movs	r3, #0
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006920:	2303      	movs	r3, #3
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006924:	2307      	movs	r3, #7
 8006926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006928:	f107 031c 	add.w	r3, r7, #28
 800692c:	4619      	mov	r1, r3
 800692e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006932:	f7fb fd81 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006936:	e03f      	b.n	80069b8 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a22      	ldr	r2, [pc, #136]	; (80069c8 <HAL_UART_MspInit+0x108>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d13a      	bne.n	80069b8 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006942:	4b20      	ldr	r3, [pc, #128]	; (80069c4 <HAL_UART_MspInit+0x104>)
 8006944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006946:	4a1f      	ldr	r2, [pc, #124]	; (80069c4 <HAL_UART_MspInit+0x104>)
 8006948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800694c:	6593      	str	r3, [r2, #88]	; 0x58
 800694e:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <HAL_UART_MspInit+0x104>)
 8006950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800695a:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <HAL_UART_MspInit+0x104>)
 800695c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800695e:	4a19      	ldr	r2, [pc, #100]	; (80069c4 <HAL_UART_MspInit+0x104>)
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006966:	4b17      	ldr	r3, [pc, #92]	; (80069c4 <HAL_UART_MspInit+0x104>)
 8006968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8006972:	2304      	movs	r3, #4
 8006974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006976:	2302      	movs	r3, #2
 8006978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800697a:	2300      	movs	r3, #0
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800697e:	2303      	movs	r3, #3
 8006980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006982:	2307      	movs	r3, #7
 8006984:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8006986:	f107 031c 	add.w	r3, r7, #28
 800698a:	4619      	mov	r1, r3
 800698c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006990:	f7fb fd52 	bl	8002438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8006994:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800699a:	2302      	movs	r3, #2
 800699c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069a2:	2303      	movs	r3, #3
 80069a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80069a6:	2303      	movs	r3, #3
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80069aa:	f107 031c 	add.w	r3, r7, #28
 80069ae:	4619      	mov	r1, r3
 80069b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069b4:	f7fb fd40 	bl	8002438 <HAL_GPIO_Init>
}
 80069b8:	bf00      	nop
 80069ba:	3730      	adds	r7, #48	; 0x30
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40013800 	.word	0x40013800
 80069c4:	40021000 	.word	0x40021000
 80069c8:	40004400 	.word	0x40004400

080069cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80069d0:	bf00      	nop
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069da:	b480      	push	{r7}
 80069dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069de:	e7fe      	b.n	80069de <HardFault_Handler+0x4>

080069e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069e4:	e7fe      	b.n	80069e4 <MemManage_Handler+0x4>

080069e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069e6:	b480      	push	{r7}
 80069e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069ea:	e7fe      	b.n	80069ea <BusFault_Handler+0x4>

080069ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069f0:	e7fe      	b.n	80069f0 <UsageFault_Handler+0x4>

080069f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069f2:	b480      	push	{r7}
 80069f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069f6:	bf00      	nop
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a12:	bf00      	nop
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a20:	f7fa faee 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a24:	bf00      	nop
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006a2c:	4802      	ldr	r0, [pc, #8]	; (8006a38 <USART1_IRQHandler+0x10>)
 8006a2e:	f7fd fc4d 	bl	80042cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006a32:	bf00      	nop
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	2000cf14 	.word	0x2000cf14

08006a3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006a40:	4802      	ldr	r0, [pc, #8]	; (8006a4c <USART2_IRQHandler+0x10>)
 8006a42:	f7fd fc43 	bl	80042cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006a46:	bf00      	nop
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	2000cf94 	.word	0x2000cf94

08006a50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006a58:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <_sbrk+0x50>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <_sbrk+0x16>
		heap_end = &end;
 8006a60:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <_sbrk+0x50>)
 8006a62:	4a10      	ldr	r2, [pc, #64]	; (8006aa4 <_sbrk+0x54>)
 8006a64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006a66:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <_sbrk+0x50>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006a6c:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <_sbrk+0x50>)
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4413      	add	r3, r2
 8006a74:	466a      	mov	r2, sp
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d907      	bls.n	8006a8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006a7a:	f000 f87b 	bl	8006b74 <__errno>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	230c      	movs	r3, #12
 8006a82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006a84:	f04f 33ff 	mov.w	r3, #4294967295
 8006a88:	e006      	b.n	8006a98 <_sbrk+0x48>
	}

	heap_end += incr;
 8006a8a:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <_sbrk+0x50>)
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4413      	add	r3, r2
 8006a92:	4a03      	ldr	r2, [pc, #12]	; (8006aa0 <_sbrk+0x50>)
 8006a94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006a96:	68fb      	ldr	r3, [r7, #12]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	2000ca18 	.word	0x2000ca18
 8006aa4:	2000d018 	.word	0x2000d018

08006aa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006aac:	4b17      	ldr	r3, [pc, #92]	; (8006b0c <SystemInit+0x64>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab2:	4a16      	ldr	r2, [pc, #88]	; (8006b0c <SystemInit+0x64>)
 8006ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006abc:	4b14      	ldr	r3, [pc, #80]	; (8006b10 <SystemInit+0x68>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a13      	ldr	r2, [pc, #76]	; (8006b10 <SystemInit+0x68>)
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006ac8:	4b11      	ldr	r3, [pc, #68]	; (8006b10 <SystemInit+0x68>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006ace:	4b10      	ldr	r3, [pc, #64]	; (8006b10 <SystemInit+0x68>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a0f      	ldr	r2, [pc, #60]	; (8006b10 <SystemInit+0x68>)
 8006ad4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006ad8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006adc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006ade:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <SystemInit+0x68>)
 8006ae0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ae4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <SystemInit+0x68>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <SystemInit+0x68>)
 8006aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006af0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8006af2:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <SystemInit+0x68>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006af8:	4b04      	ldr	r3, [pc, #16]	; (8006b0c <SystemInit+0x64>)
 8006afa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006afe:	609a      	str	r2, [r3, #8]
#endif
}
 8006b00:	bf00      	nop
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	e000ed00 	.word	0xe000ed00
 8006b10:	40021000 	.word	0x40021000

08006b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006b18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006b1a:	e003      	b.n	8006b24 <LoopCopyDataInit>

08006b1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006b1c:	4b0c      	ldr	r3, [pc, #48]	; (8006b50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006b1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006b20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006b22:	3104      	adds	r1, #4

08006b24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006b24:	480b      	ldr	r0, [pc, #44]	; (8006b54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006b26:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006b28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006b2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006b2c:	d3f6      	bcc.n	8006b1c <CopyDataInit>
	ldr	r2, =_sbss
 8006b2e:	4a0b      	ldr	r2, [pc, #44]	; (8006b5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8006b30:	e002      	b.n	8006b38 <LoopFillZerobss>

08006b32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006b32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006b34:	f842 3b04 	str.w	r3, [r2], #4

08006b38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006b38:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <LoopForever+0x16>)
	cmp	r2, r3
 8006b3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006b3c:	d3f9      	bcc.n	8006b32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006b3e:	f7ff ffb3 	bl	8006aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006b42:	f000 f81d 	bl	8006b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006b46:	f7ff faef 	bl	8006128 <main>

08006b4a <LoopForever>:

LoopForever:
    b LoopForever
 8006b4a:	e7fe      	b.n	8006b4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006b4c:	2000ffff 	.word	0x2000ffff
	ldr	r3, =_sidata
 8006b50:	080094a0 	.word	0x080094a0
	ldr	r0, =_sdata
 8006b54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006b58:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8006b5c:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8006b60:	2000d018 	.word	0x2000d018

08006b64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006b64:	e7fe      	b.n	8006b64 <ADC1_IRQHandler>

08006b66 <atof>:
 8006b66:	2100      	movs	r1, #0
 8006b68:	f000 be86 	b.w	8007878 <strtod>

08006b6c <atoi>:
 8006b6c:	220a      	movs	r2, #10
 8006b6e:	2100      	movs	r1, #0
 8006b70:	f000 bf12 	b.w	8007998 <strtol>

08006b74 <__errno>:
 8006b74:	4b01      	ldr	r3, [pc, #4]	; (8006b7c <__errno+0x8>)
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	20000018 	.word	0x20000018

08006b80 <__libc_init_array>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	4e0d      	ldr	r6, [pc, #52]	; (8006bb8 <__libc_init_array+0x38>)
 8006b84:	4c0d      	ldr	r4, [pc, #52]	; (8006bbc <__libc_init_array+0x3c>)
 8006b86:	1ba4      	subs	r4, r4, r6
 8006b88:	10a4      	asrs	r4, r4, #2
 8006b8a:	2500      	movs	r5, #0
 8006b8c:	42a5      	cmp	r5, r4
 8006b8e:	d109      	bne.n	8006ba4 <__libc_init_array+0x24>
 8006b90:	4e0b      	ldr	r6, [pc, #44]	; (8006bc0 <__libc_init_array+0x40>)
 8006b92:	4c0c      	ldr	r4, [pc, #48]	; (8006bc4 <__libc_init_array+0x44>)
 8006b94:	f002 fa52 	bl	800903c <_init>
 8006b98:	1ba4      	subs	r4, r4, r6
 8006b9a:	10a4      	asrs	r4, r4, #2
 8006b9c:	2500      	movs	r5, #0
 8006b9e:	42a5      	cmp	r5, r4
 8006ba0:	d105      	bne.n	8006bae <__libc_init_array+0x2e>
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ba8:	4798      	blx	r3
 8006baa:	3501      	adds	r5, #1
 8006bac:	e7ee      	b.n	8006b8c <__libc_init_array+0xc>
 8006bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bb2:	4798      	blx	r3
 8006bb4:	3501      	adds	r5, #1
 8006bb6:	e7f2      	b.n	8006b9e <__libc_init_array+0x1e>
 8006bb8:	08009498 	.word	0x08009498
 8006bbc:	08009498 	.word	0x08009498
 8006bc0:	08009498 	.word	0x08009498
 8006bc4:	0800949c 	.word	0x0800949c

08006bc8 <memcpy>:
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	1e43      	subs	r3, r0, #1
 8006bcc:	440a      	add	r2, r1
 8006bce:	4291      	cmp	r1, r2
 8006bd0:	d100      	bne.n	8006bd4 <memcpy+0xc>
 8006bd2:	bd10      	pop	{r4, pc}
 8006bd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bdc:	e7f7      	b.n	8006bce <memcpy+0x6>

08006bde <memset>:
 8006bde:	4402      	add	r2, r0
 8006be0:	4603      	mov	r3, r0
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d100      	bne.n	8006be8 <memset+0xa>
 8006be6:	4770      	bx	lr
 8006be8:	f803 1b01 	strb.w	r1, [r3], #1
 8006bec:	e7f9      	b.n	8006be2 <memset+0x4>
	...

08006bf0 <siprintf>:
 8006bf0:	b40e      	push	{r1, r2, r3}
 8006bf2:	b500      	push	{lr}
 8006bf4:	b09c      	sub	sp, #112	; 0x70
 8006bf6:	ab1d      	add	r3, sp, #116	; 0x74
 8006bf8:	9002      	str	r0, [sp, #8]
 8006bfa:	9006      	str	r0, [sp, #24]
 8006bfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c00:	4809      	ldr	r0, [pc, #36]	; (8006c28 <siprintf+0x38>)
 8006c02:	9107      	str	r1, [sp, #28]
 8006c04:	9104      	str	r1, [sp, #16]
 8006c06:	4909      	ldr	r1, [pc, #36]	; (8006c2c <siprintf+0x3c>)
 8006c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c0c:	9105      	str	r1, [sp, #20]
 8006c0e:	6800      	ldr	r0, [r0, #0]
 8006c10:	9301      	str	r3, [sp, #4]
 8006c12:	a902      	add	r1, sp, #8
 8006c14:	f001 fed4 	bl	80089c0 <_svfiprintf_r>
 8006c18:	9b02      	ldr	r3, [sp, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	b01c      	add	sp, #112	; 0x70
 8006c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c24:	b003      	add	sp, #12
 8006c26:	4770      	bx	lr
 8006c28:	20000018 	.word	0x20000018
 8006c2c:	ffff0208 	.word	0xffff0208

08006c30 <strncmp>:
 8006c30:	b510      	push	{r4, lr}
 8006c32:	b16a      	cbz	r2, 8006c50 <strncmp+0x20>
 8006c34:	3901      	subs	r1, #1
 8006c36:	1884      	adds	r4, r0, r2
 8006c38:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006c3c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d103      	bne.n	8006c4c <strncmp+0x1c>
 8006c44:	42a0      	cmp	r0, r4
 8006c46:	d001      	beq.n	8006c4c <strncmp+0x1c>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1f5      	bne.n	8006c38 <strncmp+0x8>
 8006c4c:	1a98      	subs	r0, r3, r2
 8006c4e:	bd10      	pop	{r4, pc}
 8006c50:	4610      	mov	r0, r2
 8006c52:	e7fc      	b.n	8006c4e <strncmp+0x1e>

08006c54 <sulp>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	4604      	mov	r4, r0
 8006c58:	460d      	mov	r5, r1
 8006c5a:	ec45 4b10 	vmov	d0, r4, r5
 8006c5e:	4616      	mov	r6, r2
 8006c60:	f001 fcb8 	bl	80085d4 <__ulp>
 8006c64:	ec51 0b10 	vmov	r0, r1, d0
 8006c68:	b17e      	cbz	r6, 8006c8a <sulp+0x36>
 8006c6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006c6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	dd09      	ble.n	8006c8a <sulp+0x36>
 8006c76:	051b      	lsls	r3, r3, #20
 8006c78:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006c7c:	2400      	movs	r4, #0
 8006c7e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006c82:	4622      	mov	r2, r4
 8006c84:	462b      	mov	r3, r5
 8006c86:	f7f9 fcb7 	bl	80005f8 <__aeabi_dmul>
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}
 8006c8c:	0000      	movs	r0, r0
	...

08006c90 <_strtod_l>:
 8006c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	461f      	mov	r7, r3
 8006c96:	b0a1      	sub	sp, #132	; 0x84
 8006c98:	2300      	movs	r3, #0
 8006c9a:	4681      	mov	r9, r0
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	460e      	mov	r6, r1
 8006ca0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ca2:	931c      	str	r3, [sp, #112]	; 0x70
 8006ca4:	f001 f9b7 	bl	8008016 <__localeconv_l>
 8006ca8:	4680      	mov	r8, r0
 8006caa:	6800      	ldr	r0, [r0, #0]
 8006cac:	f7f9 fa90 	bl	80001d0 <strlen>
 8006cb0:	f04f 0a00 	mov.w	sl, #0
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	f04f 0b00 	mov.w	fp, #0
 8006cba:	961b      	str	r6, [sp, #108]	; 0x6c
 8006cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cbe:	781a      	ldrb	r2, [r3, #0]
 8006cc0:	2a0d      	cmp	r2, #13
 8006cc2:	d832      	bhi.n	8006d2a <_strtod_l+0x9a>
 8006cc4:	2a09      	cmp	r2, #9
 8006cc6:	d236      	bcs.n	8006d36 <_strtod_l+0xa6>
 8006cc8:	2a00      	cmp	r2, #0
 8006cca:	d03e      	beq.n	8006d4a <_strtod_l+0xba>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	930d      	str	r3, [sp, #52]	; 0x34
 8006cd0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006cd2:	782b      	ldrb	r3, [r5, #0]
 8006cd4:	2b30      	cmp	r3, #48	; 0x30
 8006cd6:	f040 80ac 	bne.w	8006e32 <_strtod_l+0x1a2>
 8006cda:	786b      	ldrb	r3, [r5, #1]
 8006cdc:	2b58      	cmp	r3, #88	; 0x58
 8006cde:	d001      	beq.n	8006ce4 <_strtod_l+0x54>
 8006ce0:	2b78      	cmp	r3, #120	; 0x78
 8006ce2:	d167      	bne.n	8006db4 <_strtod_l+0x124>
 8006ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ce6:	9301      	str	r3, [sp, #4]
 8006ce8:	ab1c      	add	r3, sp, #112	; 0x70
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	9702      	str	r7, [sp, #8]
 8006cee:	ab1d      	add	r3, sp, #116	; 0x74
 8006cf0:	4a88      	ldr	r2, [pc, #544]	; (8006f14 <_strtod_l+0x284>)
 8006cf2:	a91b      	add	r1, sp, #108	; 0x6c
 8006cf4:	4648      	mov	r0, r9
 8006cf6:	f000 feb4 	bl	8007a62 <__gethex>
 8006cfa:	f010 0407 	ands.w	r4, r0, #7
 8006cfe:	4606      	mov	r6, r0
 8006d00:	d005      	beq.n	8006d0e <_strtod_l+0x7e>
 8006d02:	2c06      	cmp	r4, #6
 8006d04:	d12b      	bne.n	8006d5e <_strtod_l+0xce>
 8006d06:	3501      	adds	r5, #1
 8006d08:	2300      	movs	r3, #0
 8006d0a:	951b      	str	r5, [sp, #108]	; 0x6c
 8006d0c:	930d      	str	r3, [sp, #52]	; 0x34
 8006d0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f040 859a 	bne.w	800784a <_strtod_l+0xbba>
 8006d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d18:	b1e3      	cbz	r3, 8006d54 <_strtod_l+0xc4>
 8006d1a:	4652      	mov	r2, sl
 8006d1c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d20:	ec43 2b10 	vmov	d0, r2, r3
 8006d24:	b021      	add	sp, #132	; 0x84
 8006d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d2a:	2a2b      	cmp	r2, #43	; 0x2b
 8006d2c:	d015      	beq.n	8006d5a <_strtod_l+0xca>
 8006d2e:	2a2d      	cmp	r2, #45	; 0x2d
 8006d30:	d004      	beq.n	8006d3c <_strtod_l+0xac>
 8006d32:	2a20      	cmp	r2, #32
 8006d34:	d1ca      	bne.n	8006ccc <_strtod_l+0x3c>
 8006d36:	3301      	adds	r3, #1
 8006d38:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d3a:	e7bf      	b.n	8006cbc <_strtod_l+0x2c>
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	920d      	str	r2, [sp, #52]	; 0x34
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	921b      	str	r2, [sp, #108]	; 0x6c
 8006d44:	785b      	ldrb	r3, [r3, #1]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1c2      	bne.n	8006cd0 <_strtod_l+0x40>
 8006d4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d4c:	961b      	str	r6, [sp, #108]	; 0x6c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f040 8579 	bne.w	8007846 <_strtod_l+0xbb6>
 8006d54:	4652      	mov	r2, sl
 8006d56:	465b      	mov	r3, fp
 8006d58:	e7e2      	b.n	8006d20 <_strtod_l+0x90>
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	e7ef      	b.n	8006d3e <_strtod_l+0xae>
 8006d5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006d60:	b13a      	cbz	r2, 8006d72 <_strtod_l+0xe2>
 8006d62:	2135      	movs	r1, #53	; 0x35
 8006d64:	a81e      	add	r0, sp, #120	; 0x78
 8006d66:	f001 fd2d 	bl	80087c4 <__copybits>
 8006d6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006d6c:	4648      	mov	r0, r9
 8006d6e:	f001 f99a 	bl	80080a6 <_Bfree>
 8006d72:	3c01      	subs	r4, #1
 8006d74:	2c04      	cmp	r4, #4
 8006d76:	d806      	bhi.n	8006d86 <_strtod_l+0xf6>
 8006d78:	e8df f004 	tbb	[pc, r4]
 8006d7c:	1714030a 	.word	0x1714030a
 8006d80:	0a          	.byte	0x0a
 8006d81:	00          	.byte	0x00
 8006d82:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006d86:	0730      	lsls	r0, r6, #28
 8006d88:	d5c1      	bpl.n	8006d0e <_strtod_l+0x7e>
 8006d8a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006d8e:	e7be      	b.n	8006d0e <_strtod_l+0x7e>
 8006d90:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8006d94:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006d96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006d9a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006d9e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006da2:	e7f0      	b.n	8006d86 <_strtod_l+0xf6>
 8006da4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006f18 <_strtod_l+0x288>
 8006da8:	e7ed      	b.n	8006d86 <_strtod_l+0xf6>
 8006daa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006dae:	f04f 3aff 	mov.w	sl, #4294967295
 8006db2:	e7e8      	b.n	8006d86 <_strtod_l+0xf6>
 8006db4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	921b      	str	r2, [sp, #108]	; 0x6c
 8006dba:	785b      	ldrb	r3, [r3, #1]
 8006dbc:	2b30      	cmp	r3, #48	; 0x30
 8006dbe:	d0f9      	beq.n	8006db4 <_strtod_l+0x124>
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d0a4      	beq.n	8006d0e <_strtod_l+0x7e>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	2500      	movs	r5, #0
 8006dc8:	9306      	str	r3, [sp, #24]
 8006dca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006dcc:	9308      	str	r3, [sp, #32]
 8006dce:	9507      	str	r5, [sp, #28]
 8006dd0:	9505      	str	r5, [sp, #20]
 8006dd2:	220a      	movs	r2, #10
 8006dd4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006dd6:	7807      	ldrb	r7, [r0, #0]
 8006dd8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006ddc:	b2d9      	uxtb	r1, r3
 8006dde:	2909      	cmp	r1, #9
 8006de0:	d929      	bls.n	8006e36 <_strtod_l+0x1a6>
 8006de2:	4622      	mov	r2, r4
 8006de4:	f8d8 1000 	ldr.w	r1, [r8]
 8006de8:	f7ff ff22 	bl	8006c30 <strncmp>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d031      	beq.n	8006e54 <_strtod_l+0x1c4>
 8006df0:	2000      	movs	r0, #0
 8006df2:	9c05      	ldr	r4, [sp, #20]
 8006df4:	9004      	str	r0, [sp, #16]
 8006df6:	463b      	mov	r3, r7
 8006df8:	4602      	mov	r2, r0
 8006dfa:	2b65      	cmp	r3, #101	; 0x65
 8006dfc:	d001      	beq.n	8006e02 <_strtod_l+0x172>
 8006dfe:	2b45      	cmp	r3, #69	; 0x45
 8006e00:	d114      	bne.n	8006e2c <_strtod_l+0x19c>
 8006e02:	b924      	cbnz	r4, 8006e0e <_strtod_l+0x17e>
 8006e04:	b910      	cbnz	r0, 8006e0c <_strtod_l+0x17c>
 8006e06:	9b06      	ldr	r3, [sp, #24]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d09e      	beq.n	8006d4a <_strtod_l+0xba>
 8006e0c:	2400      	movs	r4, #0
 8006e0e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006e10:	1c73      	adds	r3, r6, #1
 8006e12:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e14:	7873      	ldrb	r3, [r6, #1]
 8006e16:	2b2b      	cmp	r3, #43	; 0x2b
 8006e18:	d078      	beq.n	8006f0c <_strtod_l+0x27c>
 8006e1a:	2b2d      	cmp	r3, #45	; 0x2d
 8006e1c:	d070      	beq.n	8006f00 <_strtod_l+0x270>
 8006e1e:	f04f 0c00 	mov.w	ip, #0
 8006e22:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006e26:	2f09      	cmp	r7, #9
 8006e28:	d97c      	bls.n	8006f24 <_strtod_l+0x294>
 8006e2a:	961b      	str	r6, [sp, #108]	; 0x6c
 8006e2c:	f04f 0e00 	mov.w	lr, #0
 8006e30:	e09a      	b.n	8006f68 <_strtod_l+0x2d8>
 8006e32:	2300      	movs	r3, #0
 8006e34:	e7c7      	b.n	8006dc6 <_strtod_l+0x136>
 8006e36:	9905      	ldr	r1, [sp, #20]
 8006e38:	2908      	cmp	r1, #8
 8006e3a:	bfdd      	ittte	le
 8006e3c:	9907      	ldrle	r1, [sp, #28]
 8006e3e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e42:	9307      	strle	r3, [sp, #28]
 8006e44:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006e48:	9b05      	ldr	r3, [sp, #20]
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	9305      	str	r3, [sp, #20]
 8006e50:	901b      	str	r0, [sp, #108]	; 0x6c
 8006e52:	e7bf      	b.n	8006dd4 <_strtod_l+0x144>
 8006e54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e56:	191a      	adds	r2, r3, r4
 8006e58:	921b      	str	r2, [sp, #108]	; 0x6c
 8006e5a:	9a05      	ldr	r2, [sp, #20]
 8006e5c:	5d1b      	ldrb	r3, [r3, r4]
 8006e5e:	2a00      	cmp	r2, #0
 8006e60:	d037      	beq.n	8006ed2 <_strtod_l+0x242>
 8006e62:	9c05      	ldr	r4, [sp, #20]
 8006e64:	4602      	mov	r2, r0
 8006e66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006e6a:	2909      	cmp	r1, #9
 8006e6c:	d913      	bls.n	8006e96 <_strtod_l+0x206>
 8006e6e:	2101      	movs	r1, #1
 8006e70:	9104      	str	r1, [sp, #16]
 8006e72:	e7c2      	b.n	8006dfa <_strtod_l+0x16a>
 8006e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	921b      	str	r2, [sp, #108]	; 0x6c
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	2b30      	cmp	r3, #48	; 0x30
 8006e80:	d0f8      	beq.n	8006e74 <_strtod_l+0x1e4>
 8006e82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006e86:	2a08      	cmp	r2, #8
 8006e88:	f200 84e4 	bhi.w	8007854 <_strtod_l+0xbc4>
 8006e8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006e8e:	9208      	str	r2, [sp, #32]
 8006e90:	4602      	mov	r2, r0
 8006e92:	2000      	movs	r0, #0
 8006e94:	4604      	mov	r4, r0
 8006e96:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006e9a:	f100 0101 	add.w	r1, r0, #1
 8006e9e:	d012      	beq.n	8006ec6 <_strtod_l+0x236>
 8006ea0:	440a      	add	r2, r1
 8006ea2:	eb00 0c04 	add.w	ip, r0, r4
 8006ea6:	4621      	mov	r1, r4
 8006ea8:	270a      	movs	r7, #10
 8006eaa:	458c      	cmp	ip, r1
 8006eac:	d113      	bne.n	8006ed6 <_strtod_l+0x246>
 8006eae:	1821      	adds	r1, r4, r0
 8006eb0:	2908      	cmp	r1, #8
 8006eb2:	f104 0401 	add.w	r4, r4, #1
 8006eb6:	4404      	add	r4, r0
 8006eb8:	dc19      	bgt.n	8006eee <_strtod_l+0x25e>
 8006eba:	9b07      	ldr	r3, [sp, #28]
 8006ebc:	210a      	movs	r1, #10
 8006ebe:	fb01 e303 	mla	r3, r1, r3, lr
 8006ec2:	9307      	str	r3, [sp, #28]
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ec8:	1c58      	adds	r0, r3, #1
 8006eca:	901b      	str	r0, [sp, #108]	; 0x6c
 8006ecc:	785b      	ldrb	r3, [r3, #1]
 8006ece:	4608      	mov	r0, r1
 8006ed0:	e7c9      	b.n	8006e66 <_strtod_l+0x1d6>
 8006ed2:	9805      	ldr	r0, [sp, #20]
 8006ed4:	e7d3      	b.n	8006e7e <_strtod_l+0x1ee>
 8006ed6:	2908      	cmp	r1, #8
 8006ed8:	f101 0101 	add.w	r1, r1, #1
 8006edc:	dc03      	bgt.n	8006ee6 <_strtod_l+0x256>
 8006ede:	9b07      	ldr	r3, [sp, #28]
 8006ee0:	437b      	muls	r3, r7
 8006ee2:	9307      	str	r3, [sp, #28]
 8006ee4:	e7e1      	b.n	8006eaa <_strtod_l+0x21a>
 8006ee6:	2910      	cmp	r1, #16
 8006ee8:	bfd8      	it	le
 8006eea:	437d      	mulle	r5, r7
 8006eec:	e7dd      	b.n	8006eaa <_strtod_l+0x21a>
 8006eee:	2c10      	cmp	r4, #16
 8006ef0:	bfdc      	itt	le
 8006ef2:	210a      	movle	r1, #10
 8006ef4:	fb01 e505 	mlale	r5, r1, r5, lr
 8006ef8:	e7e4      	b.n	8006ec4 <_strtod_l+0x234>
 8006efa:	2301      	movs	r3, #1
 8006efc:	9304      	str	r3, [sp, #16]
 8006efe:	e781      	b.n	8006e04 <_strtod_l+0x174>
 8006f00:	f04f 0c01 	mov.w	ip, #1
 8006f04:	1cb3      	adds	r3, r6, #2
 8006f06:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f08:	78b3      	ldrb	r3, [r6, #2]
 8006f0a:	e78a      	b.n	8006e22 <_strtod_l+0x192>
 8006f0c:	f04f 0c00 	mov.w	ip, #0
 8006f10:	e7f8      	b.n	8006f04 <_strtod_l+0x274>
 8006f12:	bf00      	nop
 8006f14:	080091fc 	.word	0x080091fc
 8006f18:	7ff00000 	.word	0x7ff00000
 8006f1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f1e:	1c5f      	adds	r7, r3, #1
 8006f20:	971b      	str	r7, [sp, #108]	; 0x6c
 8006f22:	785b      	ldrb	r3, [r3, #1]
 8006f24:	2b30      	cmp	r3, #48	; 0x30
 8006f26:	d0f9      	beq.n	8006f1c <_strtod_l+0x28c>
 8006f28:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006f2c:	2f08      	cmp	r7, #8
 8006f2e:	f63f af7d 	bhi.w	8006e2c <_strtod_l+0x19c>
 8006f32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006f36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f38:	930a      	str	r3, [sp, #40]	; 0x28
 8006f3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f3c:	1c5f      	adds	r7, r3, #1
 8006f3e:	971b      	str	r7, [sp, #108]	; 0x6c
 8006f40:	785b      	ldrb	r3, [r3, #1]
 8006f42:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006f46:	f1b8 0f09 	cmp.w	r8, #9
 8006f4a:	d937      	bls.n	8006fbc <_strtod_l+0x32c>
 8006f4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f4e:	1a7f      	subs	r7, r7, r1
 8006f50:	2f08      	cmp	r7, #8
 8006f52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006f56:	dc37      	bgt.n	8006fc8 <_strtod_l+0x338>
 8006f58:	45be      	cmp	lr, r7
 8006f5a:	bfa8      	it	ge
 8006f5c:	46be      	movge	lr, r7
 8006f5e:	f1bc 0f00 	cmp.w	ip, #0
 8006f62:	d001      	beq.n	8006f68 <_strtod_l+0x2d8>
 8006f64:	f1ce 0e00 	rsb	lr, lr, #0
 8006f68:	2c00      	cmp	r4, #0
 8006f6a:	d151      	bne.n	8007010 <_strtod_l+0x380>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	f47f aece 	bne.w	8006d0e <_strtod_l+0x7e>
 8006f72:	9a06      	ldr	r2, [sp, #24]
 8006f74:	2a00      	cmp	r2, #0
 8006f76:	f47f aeca 	bne.w	8006d0e <_strtod_l+0x7e>
 8006f7a:	9a04      	ldr	r2, [sp, #16]
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	f47f aee4 	bne.w	8006d4a <_strtod_l+0xba>
 8006f82:	2b4e      	cmp	r3, #78	; 0x4e
 8006f84:	d027      	beq.n	8006fd6 <_strtod_l+0x346>
 8006f86:	dc21      	bgt.n	8006fcc <_strtod_l+0x33c>
 8006f88:	2b49      	cmp	r3, #73	; 0x49
 8006f8a:	f47f aede 	bne.w	8006d4a <_strtod_l+0xba>
 8006f8e:	49a0      	ldr	r1, [pc, #640]	; (8007210 <_strtod_l+0x580>)
 8006f90:	a81b      	add	r0, sp, #108	; 0x6c
 8006f92:	f000 ff99 	bl	8007ec8 <__match>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f43f aed7 	beq.w	8006d4a <_strtod_l+0xba>
 8006f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f9e:	499d      	ldr	r1, [pc, #628]	; (8007214 <_strtod_l+0x584>)
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	a81b      	add	r0, sp, #108	; 0x6c
 8006fa4:	931b      	str	r3, [sp, #108]	; 0x6c
 8006fa6:	f000 ff8f 	bl	8007ec8 <__match>
 8006faa:	b910      	cbnz	r0, 8006fb2 <_strtod_l+0x322>
 8006fac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fae:	3301      	adds	r3, #1
 8006fb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8006fb2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007228 <_strtod_l+0x598>
 8006fb6:	f04f 0a00 	mov.w	sl, #0
 8006fba:	e6a8      	b.n	8006d0e <_strtod_l+0x7e>
 8006fbc:	210a      	movs	r1, #10
 8006fbe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006fc2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006fc6:	e7b8      	b.n	8006f3a <_strtod_l+0x2aa>
 8006fc8:	46be      	mov	lr, r7
 8006fca:	e7c8      	b.n	8006f5e <_strtod_l+0x2ce>
 8006fcc:	2b69      	cmp	r3, #105	; 0x69
 8006fce:	d0de      	beq.n	8006f8e <_strtod_l+0x2fe>
 8006fd0:	2b6e      	cmp	r3, #110	; 0x6e
 8006fd2:	f47f aeba 	bne.w	8006d4a <_strtod_l+0xba>
 8006fd6:	4990      	ldr	r1, [pc, #576]	; (8007218 <_strtod_l+0x588>)
 8006fd8:	a81b      	add	r0, sp, #108	; 0x6c
 8006fda:	f000 ff75 	bl	8007ec8 <__match>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f43f aeb3 	beq.w	8006d4a <_strtod_l+0xba>
 8006fe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b28      	cmp	r3, #40	; 0x28
 8006fea:	d10e      	bne.n	800700a <_strtod_l+0x37a>
 8006fec:	aa1e      	add	r2, sp, #120	; 0x78
 8006fee:	498b      	ldr	r1, [pc, #556]	; (800721c <_strtod_l+0x58c>)
 8006ff0:	a81b      	add	r0, sp, #108	; 0x6c
 8006ff2:	f000 ff7d 	bl	8007ef0 <__hexnan>
 8006ff6:	2805      	cmp	r0, #5
 8006ff8:	d107      	bne.n	800700a <_strtod_l+0x37a>
 8006ffa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ffc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007000:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007004:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007008:	e681      	b.n	8006d0e <_strtod_l+0x7e>
 800700a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007230 <_strtod_l+0x5a0>
 800700e:	e7d2      	b.n	8006fb6 <_strtod_l+0x326>
 8007010:	ebae 0302 	sub.w	r3, lr, r2
 8007014:	9306      	str	r3, [sp, #24]
 8007016:	9b05      	ldr	r3, [sp, #20]
 8007018:	9807      	ldr	r0, [sp, #28]
 800701a:	2b00      	cmp	r3, #0
 800701c:	bf08      	it	eq
 800701e:	4623      	moveq	r3, r4
 8007020:	2c10      	cmp	r4, #16
 8007022:	9305      	str	r3, [sp, #20]
 8007024:	46a0      	mov	r8, r4
 8007026:	bfa8      	it	ge
 8007028:	f04f 0810 	movge.w	r8, #16
 800702c:	f7f9 fa6a 	bl	8000504 <__aeabi_ui2d>
 8007030:	2c09      	cmp	r4, #9
 8007032:	4682      	mov	sl, r0
 8007034:	468b      	mov	fp, r1
 8007036:	dc13      	bgt.n	8007060 <_strtod_l+0x3d0>
 8007038:	9b06      	ldr	r3, [sp, #24]
 800703a:	2b00      	cmp	r3, #0
 800703c:	f43f ae67 	beq.w	8006d0e <_strtod_l+0x7e>
 8007040:	9b06      	ldr	r3, [sp, #24]
 8007042:	dd7a      	ble.n	800713a <_strtod_l+0x4aa>
 8007044:	2b16      	cmp	r3, #22
 8007046:	dc61      	bgt.n	800710c <_strtod_l+0x47c>
 8007048:	4a75      	ldr	r2, [pc, #468]	; (8007220 <_strtod_l+0x590>)
 800704a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800704e:	e9de 0100 	ldrd	r0, r1, [lr]
 8007052:	4652      	mov	r2, sl
 8007054:	465b      	mov	r3, fp
 8007056:	f7f9 facf 	bl	80005f8 <__aeabi_dmul>
 800705a:	4682      	mov	sl, r0
 800705c:	468b      	mov	fp, r1
 800705e:	e656      	b.n	8006d0e <_strtod_l+0x7e>
 8007060:	4b6f      	ldr	r3, [pc, #444]	; (8007220 <_strtod_l+0x590>)
 8007062:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007066:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800706a:	f7f9 fac5 	bl	80005f8 <__aeabi_dmul>
 800706e:	4606      	mov	r6, r0
 8007070:	4628      	mov	r0, r5
 8007072:	460f      	mov	r7, r1
 8007074:	f7f9 fa46 	bl	8000504 <__aeabi_ui2d>
 8007078:	4602      	mov	r2, r0
 800707a:	460b      	mov	r3, r1
 800707c:	4630      	mov	r0, r6
 800707e:	4639      	mov	r1, r7
 8007080:	f7f9 f904 	bl	800028c <__adddf3>
 8007084:	2c0f      	cmp	r4, #15
 8007086:	4682      	mov	sl, r0
 8007088:	468b      	mov	fp, r1
 800708a:	ddd5      	ble.n	8007038 <_strtod_l+0x3a8>
 800708c:	9b06      	ldr	r3, [sp, #24]
 800708e:	eba4 0808 	sub.w	r8, r4, r8
 8007092:	4498      	add	r8, r3
 8007094:	f1b8 0f00 	cmp.w	r8, #0
 8007098:	f340 8096 	ble.w	80071c8 <_strtod_l+0x538>
 800709c:	f018 030f 	ands.w	r3, r8, #15
 80070a0:	d00a      	beq.n	80070b8 <_strtod_l+0x428>
 80070a2:	495f      	ldr	r1, [pc, #380]	; (8007220 <_strtod_l+0x590>)
 80070a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070a8:	4652      	mov	r2, sl
 80070aa:	465b      	mov	r3, fp
 80070ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070b0:	f7f9 faa2 	bl	80005f8 <__aeabi_dmul>
 80070b4:	4682      	mov	sl, r0
 80070b6:	468b      	mov	fp, r1
 80070b8:	f038 080f 	bics.w	r8, r8, #15
 80070bc:	d073      	beq.n	80071a6 <_strtod_l+0x516>
 80070be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80070c2:	dd47      	ble.n	8007154 <_strtod_l+0x4c4>
 80070c4:	2400      	movs	r4, #0
 80070c6:	46a0      	mov	r8, r4
 80070c8:	9407      	str	r4, [sp, #28]
 80070ca:	9405      	str	r4, [sp, #20]
 80070cc:	2322      	movs	r3, #34	; 0x22
 80070ce:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007228 <_strtod_l+0x598>
 80070d2:	f8c9 3000 	str.w	r3, [r9]
 80070d6:	f04f 0a00 	mov.w	sl, #0
 80070da:	9b07      	ldr	r3, [sp, #28]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f43f ae16 	beq.w	8006d0e <_strtod_l+0x7e>
 80070e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80070e4:	4648      	mov	r0, r9
 80070e6:	f000 ffde 	bl	80080a6 <_Bfree>
 80070ea:	9905      	ldr	r1, [sp, #20]
 80070ec:	4648      	mov	r0, r9
 80070ee:	f000 ffda 	bl	80080a6 <_Bfree>
 80070f2:	4641      	mov	r1, r8
 80070f4:	4648      	mov	r0, r9
 80070f6:	f000 ffd6 	bl	80080a6 <_Bfree>
 80070fa:	9907      	ldr	r1, [sp, #28]
 80070fc:	4648      	mov	r0, r9
 80070fe:	f000 ffd2 	bl	80080a6 <_Bfree>
 8007102:	4621      	mov	r1, r4
 8007104:	4648      	mov	r0, r9
 8007106:	f000 ffce 	bl	80080a6 <_Bfree>
 800710a:	e600      	b.n	8006d0e <_strtod_l+0x7e>
 800710c:	9a06      	ldr	r2, [sp, #24]
 800710e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007112:	4293      	cmp	r3, r2
 8007114:	dbba      	blt.n	800708c <_strtod_l+0x3fc>
 8007116:	4d42      	ldr	r5, [pc, #264]	; (8007220 <_strtod_l+0x590>)
 8007118:	f1c4 040f 	rsb	r4, r4, #15
 800711c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007120:	4652      	mov	r2, sl
 8007122:	465b      	mov	r3, fp
 8007124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007128:	f7f9 fa66 	bl	80005f8 <__aeabi_dmul>
 800712c:	9b06      	ldr	r3, [sp, #24]
 800712e:	1b1c      	subs	r4, r3, r4
 8007130:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007134:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007138:	e78d      	b.n	8007056 <_strtod_l+0x3c6>
 800713a:	f113 0f16 	cmn.w	r3, #22
 800713e:	dba5      	blt.n	800708c <_strtod_l+0x3fc>
 8007140:	4a37      	ldr	r2, [pc, #220]	; (8007220 <_strtod_l+0x590>)
 8007142:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007146:	e9d2 2300 	ldrd	r2, r3, [r2]
 800714a:	4650      	mov	r0, sl
 800714c:	4659      	mov	r1, fp
 800714e:	f7f9 fb7d 	bl	800084c <__aeabi_ddiv>
 8007152:	e782      	b.n	800705a <_strtod_l+0x3ca>
 8007154:	2300      	movs	r3, #0
 8007156:	4e33      	ldr	r6, [pc, #204]	; (8007224 <_strtod_l+0x594>)
 8007158:	ea4f 1828 	mov.w	r8, r8, asr #4
 800715c:	4650      	mov	r0, sl
 800715e:	4659      	mov	r1, fp
 8007160:	461d      	mov	r5, r3
 8007162:	f1b8 0f01 	cmp.w	r8, #1
 8007166:	dc21      	bgt.n	80071ac <_strtod_l+0x51c>
 8007168:	b10b      	cbz	r3, 800716e <_strtod_l+0x4de>
 800716a:	4682      	mov	sl, r0
 800716c:	468b      	mov	fp, r1
 800716e:	4b2d      	ldr	r3, [pc, #180]	; (8007224 <_strtod_l+0x594>)
 8007170:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007174:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007178:	4652      	mov	r2, sl
 800717a:	465b      	mov	r3, fp
 800717c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007180:	f7f9 fa3a 	bl	80005f8 <__aeabi_dmul>
 8007184:	4b28      	ldr	r3, [pc, #160]	; (8007228 <_strtod_l+0x598>)
 8007186:	460a      	mov	r2, r1
 8007188:	400b      	ands	r3, r1
 800718a:	4928      	ldr	r1, [pc, #160]	; (800722c <_strtod_l+0x59c>)
 800718c:	428b      	cmp	r3, r1
 800718e:	4682      	mov	sl, r0
 8007190:	d898      	bhi.n	80070c4 <_strtod_l+0x434>
 8007192:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007196:	428b      	cmp	r3, r1
 8007198:	bf86      	itte	hi
 800719a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007234 <_strtod_l+0x5a4>
 800719e:	f04f 3aff 	movhi.w	sl, #4294967295
 80071a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80071a6:	2300      	movs	r3, #0
 80071a8:	9304      	str	r3, [sp, #16]
 80071aa:	e077      	b.n	800729c <_strtod_l+0x60c>
 80071ac:	f018 0f01 	tst.w	r8, #1
 80071b0:	d006      	beq.n	80071c0 <_strtod_l+0x530>
 80071b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	f7f9 fa1d 	bl	80005f8 <__aeabi_dmul>
 80071be:	2301      	movs	r3, #1
 80071c0:	3501      	adds	r5, #1
 80071c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80071c6:	e7cc      	b.n	8007162 <_strtod_l+0x4d2>
 80071c8:	d0ed      	beq.n	80071a6 <_strtod_l+0x516>
 80071ca:	f1c8 0800 	rsb	r8, r8, #0
 80071ce:	f018 020f 	ands.w	r2, r8, #15
 80071d2:	d00a      	beq.n	80071ea <_strtod_l+0x55a>
 80071d4:	4b12      	ldr	r3, [pc, #72]	; (8007220 <_strtod_l+0x590>)
 80071d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071da:	4650      	mov	r0, sl
 80071dc:	4659      	mov	r1, fp
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f7f9 fb33 	bl	800084c <__aeabi_ddiv>
 80071e6:	4682      	mov	sl, r0
 80071e8:	468b      	mov	fp, r1
 80071ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 80071ee:	d0da      	beq.n	80071a6 <_strtod_l+0x516>
 80071f0:	f1b8 0f1f 	cmp.w	r8, #31
 80071f4:	dd20      	ble.n	8007238 <_strtod_l+0x5a8>
 80071f6:	2400      	movs	r4, #0
 80071f8:	46a0      	mov	r8, r4
 80071fa:	9407      	str	r4, [sp, #28]
 80071fc:	9405      	str	r4, [sp, #20]
 80071fe:	2322      	movs	r3, #34	; 0x22
 8007200:	f04f 0a00 	mov.w	sl, #0
 8007204:	f04f 0b00 	mov.w	fp, #0
 8007208:	f8c9 3000 	str.w	r3, [r9]
 800720c:	e765      	b.n	80070da <_strtod_l+0x44a>
 800720e:	bf00      	nop
 8007210:	080091f0 	.word	0x080091f0
 8007214:	080091f3 	.word	0x080091f3
 8007218:	080091f9 	.word	0x080091f9
 800721c:	08009210 	.word	0x08009210
 8007220:	08009288 	.word	0x08009288
 8007224:	08009260 	.word	0x08009260
 8007228:	7ff00000 	.word	0x7ff00000
 800722c:	7ca00000 	.word	0x7ca00000
 8007230:	fff80000 	.word	0xfff80000
 8007234:	7fefffff 	.word	0x7fefffff
 8007238:	f018 0310 	ands.w	r3, r8, #16
 800723c:	bf18      	it	ne
 800723e:	236a      	movne	r3, #106	; 0x6a
 8007240:	4da0      	ldr	r5, [pc, #640]	; (80074c4 <_strtod_l+0x834>)
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	4650      	mov	r0, sl
 8007246:	4659      	mov	r1, fp
 8007248:	2300      	movs	r3, #0
 800724a:	f1b8 0f00 	cmp.w	r8, #0
 800724e:	f300 810a 	bgt.w	8007466 <_strtod_l+0x7d6>
 8007252:	b10b      	cbz	r3, 8007258 <_strtod_l+0x5c8>
 8007254:	4682      	mov	sl, r0
 8007256:	468b      	mov	fp, r1
 8007258:	9b04      	ldr	r3, [sp, #16]
 800725a:	b1bb      	cbz	r3, 800728c <_strtod_l+0x5fc>
 800725c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007260:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007264:	2b00      	cmp	r3, #0
 8007266:	4659      	mov	r1, fp
 8007268:	dd10      	ble.n	800728c <_strtod_l+0x5fc>
 800726a:	2b1f      	cmp	r3, #31
 800726c:	f340 8107 	ble.w	800747e <_strtod_l+0x7ee>
 8007270:	2b34      	cmp	r3, #52	; 0x34
 8007272:	bfde      	ittt	le
 8007274:	3b20      	suble	r3, #32
 8007276:	f04f 32ff 	movle.w	r2, #4294967295
 800727a:	fa02 f303 	lslle.w	r3, r2, r3
 800727e:	f04f 0a00 	mov.w	sl, #0
 8007282:	bfcc      	ite	gt
 8007284:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007288:	ea03 0b01 	andle.w	fp, r3, r1
 800728c:	2200      	movs	r2, #0
 800728e:	2300      	movs	r3, #0
 8007290:	4650      	mov	r0, sl
 8007292:	4659      	mov	r1, fp
 8007294:	f7f9 fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 8007298:	2800      	cmp	r0, #0
 800729a:	d1ac      	bne.n	80071f6 <_strtod_l+0x566>
 800729c:	9b07      	ldr	r3, [sp, #28]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	9a05      	ldr	r2, [sp, #20]
 80072a2:	9908      	ldr	r1, [sp, #32]
 80072a4:	4623      	mov	r3, r4
 80072a6:	4648      	mov	r0, r9
 80072a8:	f000 ff4f 	bl	800814a <__s2b>
 80072ac:	9007      	str	r0, [sp, #28]
 80072ae:	2800      	cmp	r0, #0
 80072b0:	f43f af08 	beq.w	80070c4 <_strtod_l+0x434>
 80072b4:	9a06      	ldr	r2, [sp, #24]
 80072b6:	9b06      	ldr	r3, [sp, #24]
 80072b8:	2a00      	cmp	r2, #0
 80072ba:	f1c3 0300 	rsb	r3, r3, #0
 80072be:	bfa8      	it	ge
 80072c0:	2300      	movge	r3, #0
 80072c2:	930e      	str	r3, [sp, #56]	; 0x38
 80072c4:	2400      	movs	r4, #0
 80072c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80072ca:	9316      	str	r3, [sp, #88]	; 0x58
 80072cc:	46a0      	mov	r8, r4
 80072ce:	9b07      	ldr	r3, [sp, #28]
 80072d0:	4648      	mov	r0, r9
 80072d2:	6859      	ldr	r1, [r3, #4]
 80072d4:	f000 feb3 	bl	800803e <_Balloc>
 80072d8:	9005      	str	r0, [sp, #20]
 80072da:	2800      	cmp	r0, #0
 80072dc:	f43f aef6 	beq.w	80070cc <_strtod_l+0x43c>
 80072e0:	9b07      	ldr	r3, [sp, #28]
 80072e2:	691a      	ldr	r2, [r3, #16]
 80072e4:	3202      	adds	r2, #2
 80072e6:	f103 010c 	add.w	r1, r3, #12
 80072ea:	0092      	lsls	r2, r2, #2
 80072ec:	300c      	adds	r0, #12
 80072ee:	f7ff fc6b 	bl	8006bc8 <memcpy>
 80072f2:	aa1e      	add	r2, sp, #120	; 0x78
 80072f4:	a91d      	add	r1, sp, #116	; 0x74
 80072f6:	ec4b ab10 	vmov	d0, sl, fp
 80072fa:	4648      	mov	r0, r9
 80072fc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007300:	f001 f9de 	bl	80086c0 <__d2b>
 8007304:	901c      	str	r0, [sp, #112]	; 0x70
 8007306:	2800      	cmp	r0, #0
 8007308:	f43f aee0 	beq.w	80070cc <_strtod_l+0x43c>
 800730c:	2101      	movs	r1, #1
 800730e:	4648      	mov	r0, r9
 8007310:	f000 ffa7 	bl	8008262 <__i2b>
 8007314:	4680      	mov	r8, r0
 8007316:	2800      	cmp	r0, #0
 8007318:	f43f aed8 	beq.w	80070cc <_strtod_l+0x43c>
 800731c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800731e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007320:	2e00      	cmp	r6, #0
 8007322:	bfab      	itete	ge
 8007324:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007326:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007328:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800732a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800732c:	bfac      	ite	ge
 800732e:	18f7      	addge	r7, r6, r3
 8007330:	1b9d      	sublt	r5, r3, r6
 8007332:	9b04      	ldr	r3, [sp, #16]
 8007334:	1af6      	subs	r6, r6, r3
 8007336:	4416      	add	r6, r2
 8007338:	4b63      	ldr	r3, [pc, #396]	; (80074c8 <_strtod_l+0x838>)
 800733a:	3e01      	subs	r6, #1
 800733c:	429e      	cmp	r6, r3
 800733e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007342:	f280 80af 	bge.w	80074a4 <_strtod_l+0x814>
 8007346:	1b9b      	subs	r3, r3, r6
 8007348:	2b1f      	cmp	r3, #31
 800734a:	eba2 0203 	sub.w	r2, r2, r3
 800734e:	f04f 0101 	mov.w	r1, #1
 8007352:	f300 809b 	bgt.w	800748c <_strtod_l+0x7fc>
 8007356:	fa01 f303 	lsl.w	r3, r1, r3
 800735a:	930f      	str	r3, [sp, #60]	; 0x3c
 800735c:	2300      	movs	r3, #0
 800735e:	930a      	str	r3, [sp, #40]	; 0x28
 8007360:	18be      	adds	r6, r7, r2
 8007362:	9b04      	ldr	r3, [sp, #16]
 8007364:	42b7      	cmp	r7, r6
 8007366:	4415      	add	r5, r2
 8007368:	441d      	add	r5, r3
 800736a:	463b      	mov	r3, r7
 800736c:	bfa8      	it	ge
 800736e:	4633      	movge	r3, r6
 8007370:	42ab      	cmp	r3, r5
 8007372:	bfa8      	it	ge
 8007374:	462b      	movge	r3, r5
 8007376:	2b00      	cmp	r3, #0
 8007378:	bfc2      	ittt	gt
 800737a:	1af6      	subgt	r6, r6, r3
 800737c:	1aed      	subgt	r5, r5, r3
 800737e:	1aff      	subgt	r7, r7, r3
 8007380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007382:	b1bb      	cbz	r3, 80073b4 <_strtod_l+0x724>
 8007384:	4641      	mov	r1, r8
 8007386:	461a      	mov	r2, r3
 8007388:	4648      	mov	r0, r9
 800738a:	f001 f809 	bl	80083a0 <__pow5mult>
 800738e:	4680      	mov	r8, r0
 8007390:	2800      	cmp	r0, #0
 8007392:	f43f ae9b 	beq.w	80070cc <_strtod_l+0x43c>
 8007396:	4601      	mov	r1, r0
 8007398:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800739a:	4648      	mov	r0, r9
 800739c:	f000 ff6a 	bl	8008274 <__multiply>
 80073a0:	900c      	str	r0, [sp, #48]	; 0x30
 80073a2:	2800      	cmp	r0, #0
 80073a4:	f43f ae92 	beq.w	80070cc <_strtod_l+0x43c>
 80073a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80073aa:	4648      	mov	r0, r9
 80073ac:	f000 fe7b 	bl	80080a6 <_Bfree>
 80073b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073b2:	931c      	str	r3, [sp, #112]	; 0x70
 80073b4:	2e00      	cmp	r6, #0
 80073b6:	dc7a      	bgt.n	80074ae <_strtod_l+0x81e>
 80073b8:	9b06      	ldr	r3, [sp, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	dd08      	ble.n	80073d0 <_strtod_l+0x740>
 80073be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80073c0:	9905      	ldr	r1, [sp, #20]
 80073c2:	4648      	mov	r0, r9
 80073c4:	f000 ffec 	bl	80083a0 <__pow5mult>
 80073c8:	9005      	str	r0, [sp, #20]
 80073ca:	2800      	cmp	r0, #0
 80073cc:	f43f ae7e 	beq.w	80070cc <_strtod_l+0x43c>
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	dd08      	ble.n	80073e6 <_strtod_l+0x756>
 80073d4:	462a      	mov	r2, r5
 80073d6:	9905      	ldr	r1, [sp, #20]
 80073d8:	4648      	mov	r0, r9
 80073da:	f001 f82f 	bl	800843c <__lshift>
 80073de:	9005      	str	r0, [sp, #20]
 80073e0:	2800      	cmp	r0, #0
 80073e2:	f43f ae73 	beq.w	80070cc <_strtod_l+0x43c>
 80073e6:	2f00      	cmp	r7, #0
 80073e8:	dd08      	ble.n	80073fc <_strtod_l+0x76c>
 80073ea:	4641      	mov	r1, r8
 80073ec:	463a      	mov	r2, r7
 80073ee:	4648      	mov	r0, r9
 80073f0:	f001 f824 	bl	800843c <__lshift>
 80073f4:	4680      	mov	r8, r0
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f43f ae68 	beq.w	80070cc <_strtod_l+0x43c>
 80073fc:	9a05      	ldr	r2, [sp, #20]
 80073fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007400:	4648      	mov	r0, r9
 8007402:	f001 f889 	bl	8008518 <__mdiff>
 8007406:	4604      	mov	r4, r0
 8007408:	2800      	cmp	r0, #0
 800740a:	f43f ae5f 	beq.w	80070cc <_strtod_l+0x43c>
 800740e:	68c3      	ldr	r3, [r0, #12]
 8007410:	930c      	str	r3, [sp, #48]	; 0x30
 8007412:	2300      	movs	r3, #0
 8007414:	60c3      	str	r3, [r0, #12]
 8007416:	4641      	mov	r1, r8
 8007418:	f001 f864 	bl	80084e4 <__mcmp>
 800741c:	2800      	cmp	r0, #0
 800741e:	da55      	bge.n	80074cc <_strtod_l+0x83c>
 8007420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007422:	b9e3      	cbnz	r3, 800745e <_strtod_l+0x7ce>
 8007424:	f1ba 0f00 	cmp.w	sl, #0
 8007428:	d119      	bne.n	800745e <_strtod_l+0x7ce>
 800742a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800742e:	b9b3      	cbnz	r3, 800745e <_strtod_l+0x7ce>
 8007430:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007434:	0d1b      	lsrs	r3, r3, #20
 8007436:	051b      	lsls	r3, r3, #20
 8007438:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800743c:	d90f      	bls.n	800745e <_strtod_l+0x7ce>
 800743e:	6963      	ldr	r3, [r4, #20]
 8007440:	b913      	cbnz	r3, 8007448 <_strtod_l+0x7b8>
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	2b01      	cmp	r3, #1
 8007446:	dd0a      	ble.n	800745e <_strtod_l+0x7ce>
 8007448:	4621      	mov	r1, r4
 800744a:	2201      	movs	r2, #1
 800744c:	4648      	mov	r0, r9
 800744e:	f000 fff5 	bl	800843c <__lshift>
 8007452:	4641      	mov	r1, r8
 8007454:	4604      	mov	r4, r0
 8007456:	f001 f845 	bl	80084e4 <__mcmp>
 800745a:	2800      	cmp	r0, #0
 800745c:	dc67      	bgt.n	800752e <_strtod_l+0x89e>
 800745e:	9b04      	ldr	r3, [sp, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d171      	bne.n	8007548 <_strtod_l+0x8b8>
 8007464:	e63d      	b.n	80070e2 <_strtod_l+0x452>
 8007466:	f018 0f01 	tst.w	r8, #1
 800746a:	d004      	beq.n	8007476 <_strtod_l+0x7e6>
 800746c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007470:	f7f9 f8c2 	bl	80005f8 <__aeabi_dmul>
 8007474:	2301      	movs	r3, #1
 8007476:	ea4f 0868 	mov.w	r8, r8, asr #1
 800747a:	3508      	adds	r5, #8
 800747c:	e6e5      	b.n	800724a <_strtod_l+0x5ba>
 800747e:	f04f 32ff 	mov.w	r2, #4294967295
 8007482:	fa02 f303 	lsl.w	r3, r2, r3
 8007486:	ea03 0a0a 	and.w	sl, r3, sl
 800748a:	e6ff      	b.n	800728c <_strtod_l+0x5fc>
 800748c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007490:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007494:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007498:	36e2      	adds	r6, #226	; 0xe2
 800749a:	fa01 f306 	lsl.w	r3, r1, r6
 800749e:	930a      	str	r3, [sp, #40]	; 0x28
 80074a0:	910f      	str	r1, [sp, #60]	; 0x3c
 80074a2:	e75d      	b.n	8007360 <_strtod_l+0x6d0>
 80074a4:	2300      	movs	r3, #0
 80074a6:	930a      	str	r3, [sp, #40]	; 0x28
 80074a8:	2301      	movs	r3, #1
 80074aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80074ac:	e758      	b.n	8007360 <_strtod_l+0x6d0>
 80074ae:	4632      	mov	r2, r6
 80074b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80074b2:	4648      	mov	r0, r9
 80074b4:	f000 ffc2 	bl	800843c <__lshift>
 80074b8:	901c      	str	r0, [sp, #112]	; 0x70
 80074ba:	2800      	cmp	r0, #0
 80074bc:	f47f af7c 	bne.w	80073b8 <_strtod_l+0x728>
 80074c0:	e604      	b.n	80070cc <_strtod_l+0x43c>
 80074c2:	bf00      	nop
 80074c4:	08009228 	.word	0x08009228
 80074c8:	fffffc02 	.word	0xfffffc02
 80074cc:	465d      	mov	r5, fp
 80074ce:	f040 8086 	bne.w	80075de <_strtod_l+0x94e>
 80074d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074d8:	b32a      	cbz	r2, 8007526 <_strtod_l+0x896>
 80074da:	4aaf      	ldr	r2, [pc, #700]	; (8007798 <_strtod_l+0xb08>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d153      	bne.n	8007588 <_strtod_l+0x8f8>
 80074e0:	9b04      	ldr	r3, [sp, #16]
 80074e2:	4650      	mov	r0, sl
 80074e4:	b1d3      	cbz	r3, 800751c <_strtod_l+0x88c>
 80074e6:	4aad      	ldr	r2, [pc, #692]	; (800779c <_strtod_l+0xb0c>)
 80074e8:	402a      	ands	r2, r5
 80074ea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80074ee:	f04f 31ff 	mov.w	r1, #4294967295
 80074f2:	d816      	bhi.n	8007522 <_strtod_l+0x892>
 80074f4:	0d12      	lsrs	r2, r2, #20
 80074f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80074fa:	fa01 f303 	lsl.w	r3, r1, r3
 80074fe:	4298      	cmp	r0, r3
 8007500:	d142      	bne.n	8007588 <_strtod_l+0x8f8>
 8007502:	4ba7      	ldr	r3, [pc, #668]	; (80077a0 <_strtod_l+0xb10>)
 8007504:	429d      	cmp	r5, r3
 8007506:	d102      	bne.n	800750e <_strtod_l+0x87e>
 8007508:	3001      	adds	r0, #1
 800750a:	f43f addf 	beq.w	80070cc <_strtod_l+0x43c>
 800750e:	4ba3      	ldr	r3, [pc, #652]	; (800779c <_strtod_l+0xb0c>)
 8007510:	402b      	ands	r3, r5
 8007512:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007516:	f04f 0a00 	mov.w	sl, #0
 800751a:	e7a0      	b.n	800745e <_strtod_l+0x7ce>
 800751c:	f04f 33ff 	mov.w	r3, #4294967295
 8007520:	e7ed      	b.n	80074fe <_strtod_l+0x86e>
 8007522:	460b      	mov	r3, r1
 8007524:	e7eb      	b.n	80074fe <_strtod_l+0x86e>
 8007526:	bb7b      	cbnz	r3, 8007588 <_strtod_l+0x8f8>
 8007528:	f1ba 0f00 	cmp.w	sl, #0
 800752c:	d12c      	bne.n	8007588 <_strtod_l+0x8f8>
 800752e:	9904      	ldr	r1, [sp, #16]
 8007530:	4a9a      	ldr	r2, [pc, #616]	; (800779c <_strtod_l+0xb0c>)
 8007532:	465b      	mov	r3, fp
 8007534:	b1f1      	cbz	r1, 8007574 <_strtod_l+0x8e4>
 8007536:	ea02 010b 	and.w	r1, r2, fp
 800753a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800753e:	dc19      	bgt.n	8007574 <_strtod_l+0x8e4>
 8007540:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007544:	f77f ae5b 	ble.w	80071fe <_strtod_l+0x56e>
 8007548:	4a96      	ldr	r2, [pc, #600]	; (80077a4 <_strtod_l+0xb14>)
 800754a:	2300      	movs	r3, #0
 800754c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007550:	4650      	mov	r0, sl
 8007552:	4659      	mov	r1, fp
 8007554:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007558:	f7f9 f84e 	bl	80005f8 <__aeabi_dmul>
 800755c:	4682      	mov	sl, r0
 800755e:	468b      	mov	fp, r1
 8007560:	2900      	cmp	r1, #0
 8007562:	f47f adbe 	bne.w	80070e2 <_strtod_l+0x452>
 8007566:	2800      	cmp	r0, #0
 8007568:	f47f adbb 	bne.w	80070e2 <_strtod_l+0x452>
 800756c:	2322      	movs	r3, #34	; 0x22
 800756e:	f8c9 3000 	str.w	r3, [r9]
 8007572:	e5b6      	b.n	80070e2 <_strtod_l+0x452>
 8007574:	4013      	ands	r3, r2
 8007576:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800757a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800757e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007582:	f04f 3aff 	mov.w	sl, #4294967295
 8007586:	e76a      	b.n	800745e <_strtod_l+0x7ce>
 8007588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800758a:	b193      	cbz	r3, 80075b2 <_strtod_l+0x922>
 800758c:	422b      	tst	r3, r5
 800758e:	f43f af66 	beq.w	800745e <_strtod_l+0x7ce>
 8007592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007594:	9a04      	ldr	r2, [sp, #16]
 8007596:	4650      	mov	r0, sl
 8007598:	4659      	mov	r1, fp
 800759a:	b173      	cbz	r3, 80075ba <_strtod_l+0x92a>
 800759c:	f7ff fb5a 	bl	8006c54 <sulp>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075a8:	f7f8 fe70 	bl	800028c <__adddf3>
 80075ac:	4682      	mov	sl, r0
 80075ae:	468b      	mov	fp, r1
 80075b0:	e755      	b.n	800745e <_strtod_l+0x7ce>
 80075b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075b4:	ea13 0f0a 	tst.w	r3, sl
 80075b8:	e7e9      	b.n	800758e <_strtod_l+0x8fe>
 80075ba:	f7ff fb4b 	bl	8006c54 <sulp>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80075c6:	f7f8 fe5f 	bl	8000288 <__aeabi_dsub>
 80075ca:	2200      	movs	r2, #0
 80075cc:	2300      	movs	r3, #0
 80075ce:	4682      	mov	sl, r0
 80075d0:	468b      	mov	fp, r1
 80075d2:	f7f9 fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	f47f ae11 	bne.w	80071fe <_strtod_l+0x56e>
 80075dc:	e73f      	b.n	800745e <_strtod_l+0x7ce>
 80075de:	4641      	mov	r1, r8
 80075e0:	4620      	mov	r0, r4
 80075e2:	f001 f8bc 	bl	800875e <__ratio>
 80075e6:	ec57 6b10 	vmov	r6, r7, d0
 80075ea:	2200      	movs	r2, #0
 80075ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075f0:	ee10 0a10 	vmov	r0, s0
 80075f4:	4639      	mov	r1, r7
 80075f6:	f7f9 fa7b 	bl	8000af0 <__aeabi_dcmple>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d077      	beq.n	80076ee <_strtod_l+0xa5e>
 80075fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007600:	2b00      	cmp	r3, #0
 8007602:	d04a      	beq.n	800769a <_strtod_l+0xa0a>
 8007604:	4b68      	ldr	r3, [pc, #416]	; (80077a8 <_strtod_l+0xb18>)
 8007606:	2200      	movs	r2, #0
 8007608:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800760c:	4f66      	ldr	r7, [pc, #408]	; (80077a8 <_strtod_l+0xb18>)
 800760e:	2600      	movs	r6, #0
 8007610:	4b62      	ldr	r3, [pc, #392]	; (800779c <_strtod_l+0xb0c>)
 8007612:	402b      	ands	r3, r5
 8007614:	930f      	str	r3, [sp, #60]	; 0x3c
 8007616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007618:	4b64      	ldr	r3, [pc, #400]	; (80077ac <_strtod_l+0xb1c>)
 800761a:	429a      	cmp	r2, r3
 800761c:	f040 80ce 	bne.w	80077bc <_strtod_l+0xb2c>
 8007620:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007624:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007628:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800762c:	ec4b ab10 	vmov	d0, sl, fp
 8007630:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007634:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007638:	f000 ffcc 	bl	80085d4 <__ulp>
 800763c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007640:	ec53 2b10 	vmov	r2, r3, d0
 8007644:	f7f8 ffd8 	bl	80005f8 <__aeabi_dmul>
 8007648:	4652      	mov	r2, sl
 800764a:	465b      	mov	r3, fp
 800764c:	f7f8 fe1e 	bl	800028c <__adddf3>
 8007650:	460b      	mov	r3, r1
 8007652:	4952      	ldr	r1, [pc, #328]	; (800779c <_strtod_l+0xb0c>)
 8007654:	4a56      	ldr	r2, [pc, #344]	; (80077b0 <_strtod_l+0xb20>)
 8007656:	4019      	ands	r1, r3
 8007658:	4291      	cmp	r1, r2
 800765a:	4682      	mov	sl, r0
 800765c:	d95b      	bls.n	8007716 <_strtod_l+0xa86>
 800765e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007660:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007664:	4293      	cmp	r3, r2
 8007666:	d103      	bne.n	8007670 <_strtod_l+0x9e0>
 8007668:	9b08      	ldr	r3, [sp, #32]
 800766a:	3301      	adds	r3, #1
 800766c:	f43f ad2e 	beq.w	80070cc <_strtod_l+0x43c>
 8007670:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80077a0 <_strtod_l+0xb10>
 8007674:	f04f 3aff 	mov.w	sl, #4294967295
 8007678:	991c      	ldr	r1, [sp, #112]	; 0x70
 800767a:	4648      	mov	r0, r9
 800767c:	f000 fd13 	bl	80080a6 <_Bfree>
 8007680:	9905      	ldr	r1, [sp, #20]
 8007682:	4648      	mov	r0, r9
 8007684:	f000 fd0f 	bl	80080a6 <_Bfree>
 8007688:	4641      	mov	r1, r8
 800768a:	4648      	mov	r0, r9
 800768c:	f000 fd0b 	bl	80080a6 <_Bfree>
 8007690:	4621      	mov	r1, r4
 8007692:	4648      	mov	r0, r9
 8007694:	f000 fd07 	bl	80080a6 <_Bfree>
 8007698:	e619      	b.n	80072ce <_strtod_l+0x63e>
 800769a:	f1ba 0f00 	cmp.w	sl, #0
 800769e:	d11a      	bne.n	80076d6 <_strtod_l+0xa46>
 80076a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076a4:	b9eb      	cbnz	r3, 80076e2 <_strtod_l+0xa52>
 80076a6:	2200      	movs	r2, #0
 80076a8:	4b3f      	ldr	r3, [pc, #252]	; (80077a8 <_strtod_l+0xb18>)
 80076aa:	4630      	mov	r0, r6
 80076ac:	4639      	mov	r1, r7
 80076ae:	f7f9 fa15 	bl	8000adc <__aeabi_dcmplt>
 80076b2:	b9c8      	cbnz	r0, 80076e8 <_strtod_l+0xa58>
 80076b4:	4630      	mov	r0, r6
 80076b6:	4639      	mov	r1, r7
 80076b8:	2200      	movs	r2, #0
 80076ba:	4b3e      	ldr	r3, [pc, #248]	; (80077b4 <_strtod_l+0xb24>)
 80076bc:	f7f8 ff9c 	bl	80005f8 <__aeabi_dmul>
 80076c0:	4606      	mov	r6, r0
 80076c2:	460f      	mov	r7, r1
 80076c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80076c8:	9618      	str	r6, [sp, #96]	; 0x60
 80076ca:	9319      	str	r3, [sp, #100]	; 0x64
 80076cc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80076d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80076d4:	e79c      	b.n	8007610 <_strtod_l+0x980>
 80076d6:	f1ba 0f01 	cmp.w	sl, #1
 80076da:	d102      	bne.n	80076e2 <_strtod_l+0xa52>
 80076dc:	2d00      	cmp	r5, #0
 80076de:	f43f ad8e 	beq.w	80071fe <_strtod_l+0x56e>
 80076e2:	2200      	movs	r2, #0
 80076e4:	4b34      	ldr	r3, [pc, #208]	; (80077b8 <_strtod_l+0xb28>)
 80076e6:	e78f      	b.n	8007608 <_strtod_l+0x978>
 80076e8:	2600      	movs	r6, #0
 80076ea:	4f32      	ldr	r7, [pc, #200]	; (80077b4 <_strtod_l+0xb24>)
 80076ec:	e7ea      	b.n	80076c4 <_strtod_l+0xa34>
 80076ee:	4b31      	ldr	r3, [pc, #196]	; (80077b4 <_strtod_l+0xb24>)
 80076f0:	4630      	mov	r0, r6
 80076f2:	4639      	mov	r1, r7
 80076f4:	2200      	movs	r2, #0
 80076f6:	f7f8 ff7f 	bl	80005f8 <__aeabi_dmul>
 80076fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076fc:	4606      	mov	r6, r0
 80076fe:	460f      	mov	r7, r1
 8007700:	b933      	cbnz	r3, 8007710 <_strtod_l+0xa80>
 8007702:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007706:	9010      	str	r0, [sp, #64]	; 0x40
 8007708:	9311      	str	r3, [sp, #68]	; 0x44
 800770a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800770e:	e7df      	b.n	80076d0 <_strtod_l+0xa40>
 8007710:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007714:	e7f9      	b.n	800770a <_strtod_l+0xa7a>
 8007716:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800771a:	9b04      	ldr	r3, [sp, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1ab      	bne.n	8007678 <_strtod_l+0x9e8>
 8007720:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007724:	0d1b      	lsrs	r3, r3, #20
 8007726:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007728:	051b      	lsls	r3, r3, #20
 800772a:	429a      	cmp	r2, r3
 800772c:	465d      	mov	r5, fp
 800772e:	d1a3      	bne.n	8007678 <_strtod_l+0x9e8>
 8007730:	4639      	mov	r1, r7
 8007732:	4630      	mov	r0, r6
 8007734:	f7f9 f9fa 	bl	8000b2c <__aeabi_d2iz>
 8007738:	f7f8 fef4 	bl	8000524 <__aeabi_i2d>
 800773c:	460b      	mov	r3, r1
 800773e:	4602      	mov	r2, r0
 8007740:	4639      	mov	r1, r7
 8007742:	4630      	mov	r0, r6
 8007744:	f7f8 fda0 	bl	8000288 <__aeabi_dsub>
 8007748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800774a:	4606      	mov	r6, r0
 800774c:	460f      	mov	r7, r1
 800774e:	b933      	cbnz	r3, 800775e <_strtod_l+0xace>
 8007750:	f1ba 0f00 	cmp.w	sl, #0
 8007754:	d103      	bne.n	800775e <_strtod_l+0xace>
 8007756:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800775a:	2d00      	cmp	r5, #0
 800775c:	d06d      	beq.n	800783a <_strtod_l+0xbaa>
 800775e:	a30a      	add	r3, pc, #40	; (adr r3, 8007788 <_strtod_l+0xaf8>)
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	4630      	mov	r0, r6
 8007766:	4639      	mov	r1, r7
 8007768:	f7f9 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800776c:	2800      	cmp	r0, #0
 800776e:	f47f acb8 	bne.w	80070e2 <_strtod_l+0x452>
 8007772:	a307      	add	r3, pc, #28	; (adr r3, 8007790 <_strtod_l+0xb00>)
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	4630      	mov	r0, r6
 800777a:	4639      	mov	r1, r7
 800777c:	f7f9 f9cc 	bl	8000b18 <__aeabi_dcmpgt>
 8007780:	2800      	cmp	r0, #0
 8007782:	f43f af79 	beq.w	8007678 <_strtod_l+0x9e8>
 8007786:	e4ac      	b.n	80070e2 <_strtod_l+0x452>
 8007788:	94a03595 	.word	0x94a03595
 800778c:	3fdfffff 	.word	0x3fdfffff
 8007790:	35afe535 	.word	0x35afe535
 8007794:	3fe00000 	.word	0x3fe00000
 8007798:	000fffff 	.word	0x000fffff
 800779c:	7ff00000 	.word	0x7ff00000
 80077a0:	7fefffff 	.word	0x7fefffff
 80077a4:	39500000 	.word	0x39500000
 80077a8:	3ff00000 	.word	0x3ff00000
 80077ac:	7fe00000 	.word	0x7fe00000
 80077b0:	7c9fffff 	.word	0x7c9fffff
 80077b4:	3fe00000 	.word	0x3fe00000
 80077b8:	bff00000 	.word	0xbff00000
 80077bc:	9b04      	ldr	r3, [sp, #16]
 80077be:	b333      	cbz	r3, 800780e <_strtod_l+0xb7e>
 80077c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80077c6:	d822      	bhi.n	800780e <_strtod_l+0xb7e>
 80077c8:	a327      	add	r3, pc, #156	; (adr r3, 8007868 <_strtod_l+0xbd8>)
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	4630      	mov	r0, r6
 80077d0:	4639      	mov	r1, r7
 80077d2:	f7f9 f98d 	bl	8000af0 <__aeabi_dcmple>
 80077d6:	b1a0      	cbz	r0, 8007802 <_strtod_l+0xb72>
 80077d8:	4639      	mov	r1, r7
 80077da:	4630      	mov	r0, r6
 80077dc:	f7f9 f9ce 	bl	8000b7c <__aeabi_d2uiz>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	bf08      	it	eq
 80077e4:	2001      	moveq	r0, #1
 80077e6:	f7f8 fe8d 	bl	8000504 <__aeabi_ui2d>
 80077ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ec:	4606      	mov	r6, r0
 80077ee:	460f      	mov	r7, r1
 80077f0:	bb03      	cbnz	r3, 8007834 <_strtod_l+0xba4>
 80077f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077f6:	9012      	str	r0, [sp, #72]	; 0x48
 80077f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80077fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80077fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007804:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007806:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800780a:	1a9b      	subs	r3, r3, r2
 800780c:	930b      	str	r3, [sp, #44]	; 0x2c
 800780e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007812:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007816:	f000 fedd 	bl	80085d4 <__ulp>
 800781a:	4650      	mov	r0, sl
 800781c:	ec53 2b10 	vmov	r2, r3, d0
 8007820:	4659      	mov	r1, fp
 8007822:	f7f8 fee9 	bl	80005f8 <__aeabi_dmul>
 8007826:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800782a:	f7f8 fd2f 	bl	800028c <__adddf3>
 800782e:	4682      	mov	sl, r0
 8007830:	468b      	mov	fp, r1
 8007832:	e772      	b.n	800771a <_strtod_l+0xa8a>
 8007834:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007838:	e7df      	b.n	80077fa <_strtod_l+0xb6a>
 800783a:	a30d      	add	r3, pc, #52	; (adr r3, 8007870 <_strtod_l+0xbe0>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f7f9 f94c 	bl	8000adc <__aeabi_dcmplt>
 8007844:	e79c      	b.n	8007780 <_strtod_l+0xaf0>
 8007846:	2300      	movs	r3, #0
 8007848:	930d      	str	r3, [sp, #52]	; 0x34
 800784a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800784c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	f7ff ba61 	b.w	8006d16 <_strtod_l+0x86>
 8007854:	2b65      	cmp	r3, #101	; 0x65
 8007856:	f04f 0200 	mov.w	r2, #0
 800785a:	f43f ab4e 	beq.w	8006efa <_strtod_l+0x26a>
 800785e:	2101      	movs	r1, #1
 8007860:	4614      	mov	r4, r2
 8007862:	9104      	str	r1, [sp, #16]
 8007864:	f7ff bacb 	b.w	8006dfe <_strtod_l+0x16e>
 8007868:	ffc00000 	.word	0xffc00000
 800786c:	41dfffff 	.word	0x41dfffff
 8007870:	94a03595 	.word	0x94a03595
 8007874:	3fcfffff 	.word	0x3fcfffff

08007878 <strtod>:
 8007878:	4b07      	ldr	r3, [pc, #28]	; (8007898 <strtod+0x20>)
 800787a:	4a08      	ldr	r2, [pc, #32]	; (800789c <strtod+0x24>)
 800787c:	b410      	push	{r4}
 800787e:	681c      	ldr	r4, [r3, #0]
 8007880:	6a23      	ldr	r3, [r4, #32]
 8007882:	2b00      	cmp	r3, #0
 8007884:	bf08      	it	eq
 8007886:	4613      	moveq	r3, r2
 8007888:	460a      	mov	r2, r1
 800788a:	4601      	mov	r1, r0
 800788c:	4620      	mov	r0, r4
 800788e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007892:	f7ff b9fd 	b.w	8006c90 <_strtod_l>
 8007896:	bf00      	nop
 8007898:	20000018 	.word	0x20000018
 800789c:	2000007c 	.word	0x2000007c

080078a0 <_strtol_l.isra.0>:
 80078a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a4:	4680      	mov	r8, r0
 80078a6:	4689      	mov	r9, r1
 80078a8:	4692      	mov	sl, r2
 80078aa:	461e      	mov	r6, r3
 80078ac:	460f      	mov	r7, r1
 80078ae:	463d      	mov	r5, r7
 80078b0:	9808      	ldr	r0, [sp, #32]
 80078b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078b6:	f000 fbab 	bl	8008010 <__locale_ctype_ptr_l>
 80078ba:	4420      	add	r0, r4
 80078bc:	7843      	ldrb	r3, [r0, #1]
 80078be:	f013 0308 	ands.w	r3, r3, #8
 80078c2:	d132      	bne.n	800792a <_strtol_l.isra.0+0x8a>
 80078c4:	2c2d      	cmp	r4, #45	; 0x2d
 80078c6:	d132      	bne.n	800792e <_strtol_l.isra.0+0x8e>
 80078c8:	787c      	ldrb	r4, [r7, #1]
 80078ca:	1cbd      	adds	r5, r7, #2
 80078cc:	2201      	movs	r2, #1
 80078ce:	2e00      	cmp	r6, #0
 80078d0:	d05d      	beq.n	800798e <_strtol_l.isra.0+0xee>
 80078d2:	2e10      	cmp	r6, #16
 80078d4:	d109      	bne.n	80078ea <_strtol_l.isra.0+0x4a>
 80078d6:	2c30      	cmp	r4, #48	; 0x30
 80078d8:	d107      	bne.n	80078ea <_strtol_l.isra.0+0x4a>
 80078da:	782b      	ldrb	r3, [r5, #0]
 80078dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078e0:	2b58      	cmp	r3, #88	; 0x58
 80078e2:	d14f      	bne.n	8007984 <_strtol_l.isra.0+0xe4>
 80078e4:	786c      	ldrb	r4, [r5, #1]
 80078e6:	2610      	movs	r6, #16
 80078e8:	3502      	adds	r5, #2
 80078ea:	2a00      	cmp	r2, #0
 80078ec:	bf14      	ite	ne
 80078ee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80078f2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80078f6:	2700      	movs	r7, #0
 80078f8:	fbb1 fcf6 	udiv	ip, r1, r6
 80078fc:	4638      	mov	r0, r7
 80078fe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007902:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007906:	2b09      	cmp	r3, #9
 8007908:	d817      	bhi.n	800793a <_strtol_l.isra.0+0x9a>
 800790a:	461c      	mov	r4, r3
 800790c:	42a6      	cmp	r6, r4
 800790e:	dd23      	ble.n	8007958 <_strtol_l.isra.0+0xb8>
 8007910:	1c7b      	adds	r3, r7, #1
 8007912:	d007      	beq.n	8007924 <_strtol_l.isra.0+0x84>
 8007914:	4584      	cmp	ip, r0
 8007916:	d31c      	bcc.n	8007952 <_strtol_l.isra.0+0xb2>
 8007918:	d101      	bne.n	800791e <_strtol_l.isra.0+0x7e>
 800791a:	45a6      	cmp	lr, r4
 800791c:	db19      	blt.n	8007952 <_strtol_l.isra.0+0xb2>
 800791e:	fb00 4006 	mla	r0, r0, r6, r4
 8007922:	2701      	movs	r7, #1
 8007924:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007928:	e7eb      	b.n	8007902 <_strtol_l.isra.0+0x62>
 800792a:	462f      	mov	r7, r5
 800792c:	e7bf      	b.n	80078ae <_strtol_l.isra.0+0xe>
 800792e:	2c2b      	cmp	r4, #43	; 0x2b
 8007930:	bf04      	itt	eq
 8007932:	1cbd      	addeq	r5, r7, #2
 8007934:	787c      	ldrbeq	r4, [r7, #1]
 8007936:	461a      	mov	r2, r3
 8007938:	e7c9      	b.n	80078ce <_strtol_l.isra.0+0x2e>
 800793a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800793e:	2b19      	cmp	r3, #25
 8007940:	d801      	bhi.n	8007946 <_strtol_l.isra.0+0xa6>
 8007942:	3c37      	subs	r4, #55	; 0x37
 8007944:	e7e2      	b.n	800790c <_strtol_l.isra.0+0x6c>
 8007946:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800794a:	2b19      	cmp	r3, #25
 800794c:	d804      	bhi.n	8007958 <_strtol_l.isra.0+0xb8>
 800794e:	3c57      	subs	r4, #87	; 0x57
 8007950:	e7dc      	b.n	800790c <_strtol_l.isra.0+0x6c>
 8007952:	f04f 37ff 	mov.w	r7, #4294967295
 8007956:	e7e5      	b.n	8007924 <_strtol_l.isra.0+0x84>
 8007958:	1c7b      	adds	r3, r7, #1
 800795a:	d108      	bne.n	800796e <_strtol_l.isra.0+0xce>
 800795c:	2322      	movs	r3, #34	; 0x22
 800795e:	f8c8 3000 	str.w	r3, [r8]
 8007962:	4608      	mov	r0, r1
 8007964:	f1ba 0f00 	cmp.w	sl, #0
 8007968:	d107      	bne.n	800797a <_strtol_l.isra.0+0xda>
 800796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796e:	b102      	cbz	r2, 8007972 <_strtol_l.isra.0+0xd2>
 8007970:	4240      	negs	r0, r0
 8007972:	f1ba 0f00 	cmp.w	sl, #0
 8007976:	d0f8      	beq.n	800796a <_strtol_l.isra.0+0xca>
 8007978:	b10f      	cbz	r7, 800797e <_strtol_l.isra.0+0xde>
 800797a:	f105 39ff 	add.w	r9, r5, #4294967295
 800797e:	f8ca 9000 	str.w	r9, [sl]
 8007982:	e7f2      	b.n	800796a <_strtol_l.isra.0+0xca>
 8007984:	2430      	movs	r4, #48	; 0x30
 8007986:	2e00      	cmp	r6, #0
 8007988:	d1af      	bne.n	80078ea <_strtol_l.isra.0+0x4a>
 800798a:	2608      	movs	r6, #8
 800798c:	e7ad      	b.n	80078ea <_strtol_l.isra.0+0x4a>
 800798e:	2c30      	cmp	r4, #48	; 0x30
 8007990:	d0a3      	beq.n	80078da <_strtol_l.isra.0+0x3a>
 8007992:	260a      	movs	r6, #10
 8007994:	e7a9      	b.n	80078ea <_strtol_l.isra.0+0x4a>
	...

08007998 <strtol>:
 8007998:	4b08      	ldr	r3, [pc, #32]	; (80079bc <strtol+0x24>)
 800799a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800799c:	681c      	ldr	r4, [r3, #0]
 800799e:	4d08      	ldr	r5, [pc, #32]	; (80079c0 <strtol+0x28>)
 80079a0:	6a23      	ldr	r3, [r4, #32]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bf08      	it	eq
 80079a6:	462b      	moveq	r3, r5
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	4613      	mov	r3, r2
 80079ac:	460a      	mov	r2, r1
 80079ae:	4601      	mov	r1, r0
 80079b0:	4620      	mov	r0, r4
 80079b2:	f7ff ff75 	bl	80078a0 <_strtol_l.isra.0>
 80079b6:	b003      	add	sp, #12
 80079b8:	bd30      	pop	{r4, r5, pc}
 80079ba:	bf00      	nop
 80079bc:	20000018 	.word	0x20000018
 80079c0:	2000007c 	.word	0x2000007c

080079c4 <rshift>:
 80079c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079c6:	6906      	ldr	r6, [r0, #16]
 80079c8:	114b      	asrs	r3, r1, #5
 80079ca:	429e      	cmp	r6, r3
 80079cc:	f100 0414 	add.w	r4, r0, #20
 80079d0:	dd30      	ble.n	8007a34 <rshift+0x70>
 80079d2:	f011 011f 	ands.w	r1, r1, #31
 80079d6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80079da:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80079de:	d108      	bne.n	80079f2 <rshift+0x2e>
 80079e0:	4621      	mov	r1, r4
 80079e2:	42b2      	cmp	r2, r6
 80079e4:	460b      	mov	r3, r1
 80079e6:	d211      	bcs.n	8007a0c <rshift+0x48>
 80079e8:	f852 3b04 	ldr.w	r3, [r2], #4
 80079ec:	f841 3b04 	str.w	r3, [r1], #4
 80079f0:	e7f7      	b.n	80079e2 <rshift+0x1e>
 80079f2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80079f6:	f1c1 0c20 	rsb	ip, r1, #32
 80079fa:	40cd      	lsrs	r5, r1
 80079fc:	3204      	adds	r2, #4
 80079fe:	4623      	mov	r3, r4
 8007a00:	42b2      	cmp	r2, r6
 8007a02:	4617      	mov	r7, r2
 8007a04:	d30c      	bcc.n	8007a20 <rshift+0x5c>
 8007a06:	601d      	str	r5, [r3, #0]
 8007a08:	b105      	cbz	r5, 8007a0c <rshift+0x48>
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	1b1a      	subs	r2, r3, r4
 8007a0e:	42a3      	cmp	r3, r4
 8007a10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007a14:	bf08      	it	eq
 8007a16:	2300      	moveq	r3, #0
 8007a18:	6102      	str	r2, [r0, #16]
 8007a1a:	bf08      	it	eq
 8007a1c:	6143      	streq	r3, [r0, #20]
 8007a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a20:	683f      	ldr	r7, [r7, #0]
 8007a22:	fa07 f70c 	lsl.w	r7, r7, ip
 8007a26:	433d      	orrs	r5, r7
 8007a28:	f843 5b04 	str.w	r5, [r3], #4
 8007a2c:	f852 5b04 	ldr.w	r5, [r2], #4
 8007a30:	40cd      	lsrs	r5, r1
 8007a32:	e7e5      	b.n	8007a00 <rshift+0x3c>
 8007a34:	4623      	mov	r3, r4
 8007a36:	e7e9      	b.n	8007a0c <rshift+0x48>

08007a38 <__hexdig_fun>:
 8007a38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007a3c:	2b09      	cmp	r3, #9
 8007a3e:	d802      	bhi.n	8007a46 <__hexdig_fun+0xe>
 8007a40:	3820      	subs	r0, #32
 8007a42:	b2c0      	uxtb	r0, r0
 8007a44:	4770      	bx	lr
 8007a46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007a4a:	2b05      	cmp	r3, #5
 8007a4c:	d801      	bhi.n	8007a52 <__hexdig_fun+0x1a>
 8007a4e:	3847      	subs	r0, #71	; 0x47
 8007a50:	e7f7      	b.n	8007a42 <__hexdig_fun+0xa>
 8007a52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007a56:	2b05      	cmp	r3, #5
 8007a58:	d801      	bhi.n	8007a5e <__hexdig_fun+0x26>
 8007a5a:	3827      	subs	r0, #39	; 0x27
 8007a5c:	e7f1      	b.n	8007a42 <__hexdig_fun+0xa>
 8007a5e:	2000      	movs	r0, #0
 8007a60:	4770      	bx	lr

08007a62 <__gethex>:
 8007a62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a66:	b08b      	sub	sp, #44	; 0x2c
 8007a68:	468a      	mov	sl, r1
 8007a6a:	9002      	str	r0, [sp, #8]
 8007a6c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007a6e:	9306      	str	r3, [sp, #24]
 8007a70:	4690      	mov	r8, r2
 8007a72:	f000 fad0 	bl	8008016 <__localeconv_l>
 8007a76:	6803      	ldr	r3, [r0, #0]
 8007a78:	9303      	str	r3, [sp, #12]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7f8 fba8 	bl	80001d0 <strlen>
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	9001      	str	r0, [sp, #4]
 8007a84:	4403      	add	r3, r0
 8007a86:	f04f 0b00 	mov.w	fp, #0
 8007a8a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007a8e:	9307      	str	r3, [sp, #28]
 8007a90:	f8da 3000 	ldr.w	r3, [sl]
 8007a94:	3302      	adds	r3, #2
 8007a96:	461f      	mov	r7, r3
 8007a98:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007a9c:	2830      	cmp	r0, #48	; 0x30
 8007a9e:	d06c      	beq.n	8007b7a <__gethex+0x118>
 8007aa0:	f7ff ffca 	bl	8007a38 <__hexdig_fun>
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d16a      	bne.n	8007b80 <__gethex+0x11e>
 8007aaa:	9a01      	ldr	r2, [sp, #4]
 8007aac:	9903      	ldr	r1, [sp, #12]
 8007aae:	4638      	mov	r0, r7
 8007ab0:	f7ff f8be 	bl	8006c30 <strncmp>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d166      	bne.n	8007b86 <__gethex+0x124>
 8007ab8:	9b01      	ldr	r3, [sp, #4]
 8007aba:	5cf8      	ldrb	r0, [r7, r3]
 8007abc:	18fe      	adds	r6, r7, r3
 8007abe:	f7ff ffbb 	bl	8007a38 <__hexdig_fun>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d062      	beq.n	8007b8c <__gethex+0x12a>
 8007ac6:	4633      	mov	r3, r6
 8007ac8:	7818      	ldrb	r0, [r3, #0]
 8007aca:	2830      	cmp	r0, #48	; 0x30
 8007acc:	461f      	mov	r7, r3
 8007ace:	f103 0301 	add.w	r3, r3, #1
 8007ad2:	d0f9      	beq.n	8007ac8 <__gethex+0x66>
 8007ad4:	f7ff ffb0 	bl	8007a38 <__hexdig_fun>
 8007ad8:	fab0 f580 	clz	r5, r0
 8007adc:	096d      	lsrs	r5, r5, #5
 8007ade:	4634      	mov	r4, r6
 8007ae0:	f04f 0b01 	mov.w	fp, #1
 8007ae4:	463a      	mov	r2, r7
 8007ae6:	4616      	mov	r6, r2
 8007ae8:	3201      	adds	r2, #1
 8007aea:	7830      	ldrb	r0, [r6, #0]
 8007aec:	f7ff ffa4 	bl	8007a38 <__hexdig_fun>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d1f8      	bne.n	8007ae6 <__gethex+0x84>
 8007af4:	9a01      	ldr	r2, [sp, #4]
 8007af6:	9903      	ldr	r1, [sp, #12]
 8007af8:	4630      	mov	r0, r6
 8007afa:	f7ff f899 	bl	8006c30 <strncmp>
 8007afe:	b950      	cbnz	r0, 8007b16 <__gethex+0xb4>
 8007b00:	b954      	cbnz	r4, 8007b18 <__gethex+0xb6>
 8007b02:	9b01      	ldr	r3, [sp, #4]
 8007b04:	18f4      	adds	r4, r6, r3
 8007b06:	4622      	mov	r2, r4
 8007b08:	4616      	mov	r6, r2
 8007b0a:	3201      	adds	r2, #1
 8007b0c:	7830      	ldrb	r0, [r6, #0]
 8007b0e:	f7ff ff93 	bl	8007a38 <__hexdig_fun>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d1f8      	bne.n	8007b08 <__gethex+0xa6>
 8007b16:	b10c      	cbz	r4, 8007b1c <__gethex+0xba>
 8007b18:	1ba4      	subs	r4, r4, r6
 8007b1a:	00a4      	lsls	r4, r4, #2
 8007b1c:	7833      	ldrb	r3, [r6, #0]
 8007b1e:	2b50      	cmp	r3, #80	; 0x50
 8007b20:	d001      	beq.n	8007b26 <__gethex+0xc4>
 8007b22:	2b70      	cmp	r3, #112	; 0x70
 8007b24:	d140      	bne.n	8007ba8 <__gethex+0x146>
 8007b26:	7873      	ldrb	r3, [r6, #1]
 8007b28:	2b2b      	cmp	r3, #43	; 0x2b
 8007b2a:	d031      	beq.n	8007b90 <__gethex+0x12e>
 8007b2c:	2b2d      	cmp	r3, #45	; 0x2d
 8007b2e:	d033      	beq.n	8007b98 <__gethex+0x136>
 8007b30:	1c71      	adds	r1, r6, #1
 8007b32:	f04f 0900 	mov.w	r9, #0
 8007b36:	7808      	ldrb	r0, [r1, #0]
 8007b38:	f7ff ff7e 	bl	8007a38 <__hexdig_fun>
 8007b3c:	1e43      	subs	r3, r0, #1
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b18      	cmp	r3, #24
 8007b42:	d831      	bhi.n	8007ba8 <__gethex+0x146>
 8007b44:	f1a0 0210 	sub.w	r2, r0, #16
 8007b48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b4c:	f7ff ff74 	bl	8007a38 <__hexdig_fun>
 8007b50:	1e43      	subs	r3, r0, #1
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b18      	cmp	r3, #24
 8007b56:	d922      	bls.n	8007b9e <__gethex+0x13c>
 8007b58:	f1b9 0f00 	cmp.w	r9, #0
 8007b5c:	d000      	beq.n	8007b60 <__gethex+0xfe>
 8007b5e:	4252      	negs	r2, r2
 8007b60:	4414      	add	r4, r2
 8007b62:	f8ca 1000 	str.w	r1, [sl]
 8007b66:	b30d      	cbz	r5, 8007bac <__gethex+0x14a>
 8007b68:	f1bb 0f00 	cmp.w	fp, #0
 8007b6c:	bf0c      	ite	eq
 8007b6e:	2706      	moveq	r7, #6
 8007b70:	2700      	movne	r7, #0
 8007b72:	4638      	mov	r0, r7
 8007b74:	b00b      	add	sp, #44	; 0x2c
 8007b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7a:	f10b 0b01 	add.w	fp, fp, #1
 8007b7e:	e78a      	b.n	8007a96 <__gethex+0x34>
 8007b80:	2500      	movs	r5, #0
 8007b82:	462c      	mov	r4, r5
 8007b84:	e7ae      	b.n	8007ae4 <__gethex+0x82>
 8007b86:	463e      	mov	r6, r7
 8007b88:	2501      	movs	r5, #1
 8007b8a:	e7c7      	b.n	8007b1c <__gethex+0xba>
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	e7fb      	b.n	8007b88 <__gethex+0x126>
 8007b90:	f04f 0900 	mov.w	r9, #0
 8007b94:	1cb1      	adds	r1, r6, #2
 8007b96:	e7ce      	b.n	8007b36 <__gethex+0xd4>
 8007b98:	f04f 0901 	mov.w	r9, #1
 8007b9c:	e7fa      	b.n	8007b94 <__gethex+0x132>
 8007b9e:	230a      	movs	r3, #10
 8007ba0:	fb03 0202 	mla	r2, r3, r2, r0
 8007ba4:	3a10      	subs	r2, #16
 8007ba6:	e7cf      	b.n	8007b48 <__gethex+0xe6>
 8007ba8:	4631      	mov	r1, r6
 8007baa:	e7da      	b.n	8007b62 <__gethex+0x100>
 8007bac:	1bf3      	subs	r3, r6, r7
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	2b07      	cmp	r3, #7
 8007bb4:	dc49      	bgt.n	8007c4a <__gethex+0x1e8>
 8007bb6:	9802      	ldr	r0, [sp, #8]
 8007bb8:	f000 fa41 	bl	800803e <_Balloc>
 8007bbc:	9b01      	ldr	r3, [sp, #4]
 8007bbe:	f100 0914 	add.w	r9, r0, #20
 8007bc2:	f04f 0b00 	mov.w	fp, #0
 8007bc6:	f1c3 0301 	rsb	r3, r3, #1
 8007bca:	4605      	mov	r5, r0
 8007bcc:	f8cd 9010 	str.w	r9, [sp, #16]
 8007bd0:	46da      	mov	sl, fp
 8007bd2:	9308      	str	r3, [sp, #32]
 8007bd4:	42b7      	cmp	r7, r6
 8007bd6:	d33b      	bcc.n	8007c50 <__gethex+0x1ee>
 8007bd8:	9804      	ldr	r0, [sp, #16]
 8007bda:	f840 ab04 	str.w	sl, [r0], #4
 8007bde:	eba0 0009 	sub.w	r0, r0, r9
 8007be2:	1080      	asrs	r0, r0, #2
 8007be4:	6128      	str	r0, [r5, #16]
 8007be6:	0147      	lsls	r7, r0, #5
 8007be8:	4650      	mov	r0, sl
 8007bea:	f000 faec 	bl	80081c6 <__hi0bits>
 8007bee:	f8d8 6000 	ldr.w	r6, [r8]
 8007bf2:	1a3f      	subs	r7, r7, r0
 8007bf4:	42b7      	cmp	r7, r6
 8007bf6:	dd64      	ble.n	8007cc2 <__gethex+0x260>
 8007bf8:	1bbf      	subs	r7, r7, r6
 8007bfa:	4639      	mov	r1, r7
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f000 fdfb 	bl	80087f8 <__any_on>
 8007c02:	4682      	mov	sl, r0
 8007c04:	b178      	cbz	r0, 8007c26 <__gethex+0x1c4>
 8007c06:	1e7b      	subs	r3, r7, #1
 8007c08:	1159      	asrs	r1, r3, #5
 8007c0a:	f003 021f 	and.w	r2, r3, #31
 8007c0e:	f04f 0a01 	mov.w	sl, #1
 8007c12:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007c16:	fa0a f202 	lsl.w	r2, sl, r2
 8007c1a:	420a      	tst	r2, r1
 8007c1c:	d003      	beq.n	8007c26 <__gethex+0x1c4>
 8007c1e:	4553      	cmp	r3, sl
 8007c20:	dc46      	bgt.n	8007cb0 <__gethex+0x24e>
 8007c22:	f04f 0a02 	mov.w	sl, #2
 8007c26:	4639      	mov	r1, r7
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f7ff fecb 	bl	80079c4 <rshift>
 8007c2e:	443c      	add	r4, r7
 8007c30:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c34:	42a3      	cmp	r3, r4
 8007c36:	da52      	bge.n	8007cde <__gethex+0x27c>
 8007c38:	4629      	mov	r1, r5
 8007c3a:	9802      	ldr	r0, [sp, #8]
 8007c3c:	f000 fa33 	bl	80080a6 <_Bfree>
 8007c40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c42:	2300      	movs	r3, #0
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	27a3      	movs	r7, #163	; 0xa3
 8007c48:	e793      	b.n	8007b72 <__gethex+0x110>
 8007c4a:	3101      	adds	r1, #1
 8007c4c:	105b      	asrs	r3, r3, #1
 8007c4e:	e7b0      	b.n	8007bb2 <__gethex+0x150>
 8007c50:	1e73      	subs	r3, r6, #1
 8007c52:	9305      	str	r3, [sp, #20]
 8007c54:	9a07      	ldr	r2, [sp, #28]
 8007c56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d018      	beq.n	8007c90 <__gethex+0x22e>
 8007c5e:	f1bb 0f20 	cmp.w	fp, #32
 8007c62:	d107      	bne.n	8007c74 <__gethex+0x212>
 8007c64:	9b04      	ldr	r3, [sp, #16]
 8007c66:	f8c3 a000 	str.w	sl, [r3]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	f04f 0a00 	mov.w	sl, #0
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	46d3      	mov	fp, sl
 8007c74:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007c78:	f7ff fede 	bl	8007a38 <__hexdig_fun>
 8007c7c:	f000 000f 	and.w	r0, r0, #15
 8007c80:	fa00 f00b 	lsl.w	r0, r0, fp
 8007c84:	ea4a 0a00 	orr.w	sl, sl, r0
 8007c88:	f10b 0b04 	add.w	fp, fp, #4
 8007c8c:	9b05      	ldr	r3, [sp, #20]
 8007c8e:	e00d      	b.n	8007cac <__gethex+0x24a>
 8007c90:	9b05      	ldr	r3, [sp, #20]
 8007c92:	9a08      	ldr	r2, [sp, #32]
 8007c94:	4413      	add	r3, r2
 8007c96:	42bb      	cmp	r3, r7
 8007c98:	d3e1      	bcc.n	8007c5e <__gethex+0x1fc>
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	9a01      	ldr	r2, [sp, #4]
 8007c9e:	9903      	ldr	r1, [sp, #12]
 8007ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca2:	f7fe ffc5 	bl	8006c30 <strncmp>
 8007ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d1d8      	bne.n	8007c5e <__gethex+0x1fc>
 8007cac:	461e      	mov	r6, r3
 8007cae:	e791      	b.n	8007bd4 <__gethex+0x172>
 8007cb0:	1eb9      	subs	r1, r7, #2
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 fda0 	bl	80087f8 <__any_on>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d0b2      	beq.n	8007c22 <__gethex+0x1c0>
 8007cbc:	f04f 0a03 	mov.w	sl, #3
 8007cc0:	e7b1      	b.n	8007c26 <__gethex+0x1c4>
 8007cc2:	da09      	bge.n	8007cd8 <__gethex+0x276>
 8007cc4:	1bf7      	subs	r7, r6, r7
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	463a      	mov	r2, r7
 8007cca:	9802      	ldr	r0, [sp, #8]
 8007ccc:	f000 fbb6 	bl	800843c <__lshift>
 8007cd0:	1be4      	subs	r4, r4, r7
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	f100 0914 	add.w	r9, r0, #20
 8007cd8:	f04f 0a00 	mov.w	sl, #0
 8007cdc:	e7a8      	b.n	8007c30 <__gethex+0x1ce>
 8007cde:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007ce2:	42a0      	cmp	r0, r4
 8007ce4:	dd6a      	ble.n	8007dbc <__gethex+0x35a>
 8007ce6:	1b04      	subs	r4, r0, r4
 8007ce8:	42a6      	cmp	r6, r4
 8007cea:	dc2e      	bgt.n	8007d4a <__gethex+0x2e8>
 8007cec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d022      	beq.n	8007d3a <__gethex+0x2d8>
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d024      	beq.n	8007d42 <__gethex+0x2e0>
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d115      	bne.n	8007d28 <__gethex+0x2c6>
 8007cfc:	42a6      	cmp	r6, r4
 8007cfe:	d113      	bne.n	8007d28 <__gethex+0x2c6>
 8007d00:	2e01      	cmp	r6, #1
 8007d02:	dc0b      	bgt.n	8007d1c <__gethex+0x2ba>
 8007d04:	9a06      	ldr	r2, [sp, #24]
 8007d06:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d0a:	6013      	str	r3, [r2, #0]
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	612b      	str	r3, [r5, #16]
 8007d10:	f8c9 3000 	str.w	r3, [r9]
 8007d14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d16:	2762      	movs	r7, #98	; 0x62
 8007d18:	601d      	str	r5, [r3, #0]
 8007d1a:	e72a      	b.n	8007b72 <__gethex+0x110>
 8007d1c:	1e71      	subs	r1, r6, #1
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f000 fd6a 	bl	80087f8 <__any_on>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d1ed      	bne.n	8007d04 <__gethex+0x2a2>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	9802      	ldr	r0, [sp, #8]
 8007d2c:	f000 f9bb 	bl	80080a6 <_Bfree>
 8007d30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d32:	2300      	movs	r3, #0
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	2750      	movs	r7, #80	; 0x50
 8007d38:	e71b      	b.n	8007b72 <__gethex+0x110>
 8007d3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0e1      	beq.n	8007d04 <__gethex+0x2a2>
 8007d40:	e7f2      	b.n	8007d28 <__gethex+0x2c6>
 8007d42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1dd      	bne.n	8007d04 <__gethex+0x2a2>
 8007d48:	e7ee      	b.n	8007d28 <__gethex+0x2c6>
 8007d4a:	1e67      	subs	r7, r4, #1
 8007d4c:	f1ba 0f00 	cmp.w	sl, #0
 8007d50:	d131      	bne.n	8007db6 <__gethex+0x354>
 8007d52:	b127      	cbz	r7, 8007d5e <__gethex+0x2fc>
 8007d54:	4639      	mov	r1, r7
 8007d56:	4628      	mov	r0, r5
 8007d58:	f000 fd4e 	bl	80087f8 <__any_on>
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	117a      	asrs	r2, r7, #5
 8007d60:	2301      	movs	r3, #1
 8007d62:	f007 071f 	and.w	r7, r7, #31
 8007d66:	fa03 f707 	lsl.w	r7, r3, r7
 8007d6a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007d6e:	4621      	mov	r1, r4
 8007d70:	421f      	tst	r7, r3
 8007d72:	4628      	mov	r0, r5
 8007d74:	bf18      	it	ne
 8007d76:	f04a 0a02 	orrne.w	sl, sl, #2
 8007d7a:	1b36      	subs	r6, r6, r4
 8007d7c:	f7ff fe22 	bl	80079c4 <rshift>
 8007d80:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007d84:	2702      	movs	r7, #2
 8007d86:	f1ba 0f00 	cmp.w	sl, #0
 8007d8a:	d048      	beq.n	8007e1e <__gethex+0x3bc>
 8007d8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d015      	beq.n	8007dc0 <__gethex+0x35e>
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d017      	beq.n	8007dc8 <__gethex+0x366>
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d109      	bne.n	8007db0 <__gethex+0x34e>
 8007d9c:	f01a 0f02 	tst.w	sl, #2
 8007da0:	d006      	beq.n	8007db0 <__gethex+0x34e>
 8007da2:	f8d9 3000 	ldr.w	r3, [r9]
 8007da6:	ea4a 0a03 	orr.w	sl, sl, r3
 8007daa:	f01a 0f01 	tst.w	sl, #1
 8007dae:	d10e      	bne.n	8007dce <__gethex+0x36c>
 8007db0:	f047 0710 	orr.w	r7, r7, #16
 8007db4:	e033      	b.n	8007e1e <__gethex+0x3bc>
 8007db6:	f04f 0a01 	mov.w	sl, #1
 8007dba:	e7d0      	b.n	8007d5e <__gethex+0x2fc>
 8007dbc:	2701      	movs	r7, #1
 8007dbe:	e7e2      	b.n	8007d86 <__gethex+0x324>
 8007dc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dc2:	f1c3 0301 	rsb	r3, r3, #1
 8007dc6:	9315      	str	r3, [sp, #84]	; 0x54
 8007dc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0f0      	beq.n	8007db0 <__gethex+0x34e>
 8007dce:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007dd2:	f105 0314 	add.w	r3, r5, #20
 8007dd6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007dda:	eb03 010a 	add.w	r1, r3, sl
 8007dde:	f04f 0c00 	mov.w	ip, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007de8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007dec:	d01c      	beq.n	8007e28 <__gethex+0x3c6>
 8007dee:	3201      	adds	r2, #1
 8007df0:	6002      	str	r2, [r0, #0]
 8007df2:	2f02      	cmp	r7, #2
 8007df4:	f105 0314 	add.w	r3, r5, #20
 8007df8:	d138      	bne.n	8007e6c <__gethex+0x40a>
 8007dfa:	f8d8 2000 	ldr.w	r2, [r8]
 8007dfe:	3a01      	subs	r2, #1
 8007e00:	42b2      	cmp	r2, r6
 8007e02:	d10a      	bne.n	8007e1a <__gethex+0x3b8>
 8007e04:	1171      	asrs	r1, r6, #5
 8007e06:	2201      	movs	r2, #1
 8007e08:	f006 061f 	and.w	r6, r6, #31
 8007e0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e10:	fa02 f606 	lsl.w	r6, r2, r6
 8007e14:	421e      	tst	r6, r3
 8007e16:	bf18      	it	ne
 8007e18:	4617      	movne	r7, r2
 8007e1a:	f047 0720 	orr.w	r7, r7, #32
 8007e1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e20:	601d      	str	r5, [r3, #0]
 8007e22:	9b06      	ldr	r3, [sp, #24]
 8007e24:	601c      	str	r4, [r3, #0]
 8007e26:	e6a4      	b.n	8007b72 <__gethex+0x110>
 8007e28:	4299      	cmp	r1, r3
 8007e2a:	f843 cc04 	str.w	ip, [r3, #-4]
 8007e2e:	d8d8      	bhi.n	8007de2 <__gethex+0x380>
 8007e30:	68ab      	ldr	r3, [r5, #8]
 8007e32:	4599      	cmp	r9, r3
 8007e34:	db12      	blt.n	8007e5c <__gethex+0x3fa>
 8007e36:	6869      	ldr	r1, [r5, #4]
 8007e38:	9802      	ldr	r0, [sp, #8]
 8007e3a:	3101      	adds	r1, #1
 8007e3c:	f000 f8ff 	bl	800803e <_Balloc>
 8007e40:	692a      	ldr	r2, [r5, #16]
 8007e42:	3202      	adds	r2, #2
 8007e44:	f105 010c 	add.w	r1, r5, #12
 8007e48:	4683      	mov	fp, r0
 8007e4a:	0092      	lsls	r2, r2, #2
 8007e4c:	300c      	adds	r0, #12
 8007e4e:	f7fe febb 	bl	8006bc8 <memcpy>
 8007e52:	4629      	mov	r1, r5
 8007e54:	9802      	ldr	r0, [sp, #8]
 8007e56:	f000 f926 	bl	80080a6 <_Bfree>
 8007e5a:	465d      	mov	r5, fp
 8007e5c:	692b      	ldr	r3, [r5, #16]
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007e64:	612a      	str	r2, [r5, #16]
 8007e66:	2201      	movs	r2, #1
 8007e68:	615a      	str	r2, [r3, #20]
 8007e6a:	e7c2      	b.n	8007df2 <__gethex+0x390>
 8007e6c:	692a      	ldr	r2, [r5, #16]
 8007e6e:	454a      	cmp	r2, r9
 8007e70:	dd0b      	ble.n	8007e8a <__gethex+0x428>
 8007e72:	2101      	movs	r1, #1
 8007e74:	4628      	mov	r0, r5
 8007e76:	f7ff fda5 	bl	80079c4 <rshift>
 8007e7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e7e:	3401      	adds	r4, #1
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	f6ff aed9 	blt.w	8007c38 <__gethex+0x1d6>
 8007e86:	2701      	movs	r7, #1
 8007e88:	e7c7      	b.n	8007e1a <__gethex+0x3b8>
 8007e8a:	f016 061f 	ands.w	r6, r6, #31
 8007e8e:	d0fa      	beq.n	8007e86 <__gethex+0x424>
 8007e90:	449a      	add	sl, r3
 8007e92:	f1c6 0620 	rsb	r6, r6, #32
 8007e96:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007e9a:	f000 f994 	bl	80081c6 <__hi0bits>
 8007e9e:	42b0      	cmp	r0, r6
 8007ea0:	dbe7      	blt.n	8007e72 <__gethex+0x410>
 8007ea2:	e7f0      	b.n	8007e86 <__gethex+0x424>

08007ea4 <L_shift>:
 8007ea4:	f1c2 0208 	rsb	r2, r2, #8
 8007ea8:	0092      	lsls	r2, r2, #2
 8007eaa:	b570      	push	{r4, r5, r6, lr}
 8007eac:	f1c2 0620 	rsb	r6, r2, #32
 8007eb0:	6843      	ldr	r3, [r0, #4]
 8007eb2:	6804      	ldr	r4, [r0, #0]
 8007eb4:	fa03 f506 	lsl.w	r5, r3, r6
 8007eb8:	432c      	orrs	r4, r5
 8007eba:	40d3      	lsrs	r3, r2
 8007ebc:	6004      	str	r4, [r0, #0]
 8007ebe:	f840 3f04 	str.w	r3, [r0, #4]!
 8007ec2:	4288      	cmp	r0, r1
 8007ec4:	d3f4      	bcc.n	8007eb0 <L_shift+0xc>
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}

08007ec8 <__match>:
 8007ec8:	b530      	push	{r4, r5, lr}
 8007eca:	6803      	ldr	r3, [r0, #0]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ed2:	b914      	cbnz	r4, 8007eda <__match+0x12>
 8007ed4:	6003      	str	r3, [r0, #0]
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	bd30      	pop	{r4, r5, pc}
 8007eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ede:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007ee2:	2d19      	cmp	r5, #25
 8007ee4:	bf98      	it	ls
 8007ee6:	3220      	addls	r2, #32
 8007ee8:	42a2      	cmp	r2, r4
 8007eea:	d0f0      	beq.n	8007ece <__match+0x6>
 8007eec:	2000      	movs	r0, #0
 8007eee:	e7f3      	b.n	8007ed8 <__match+0x10>

08007ef0 <__hexnan>:
 8007ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef4:	680b      	ldr	r3, [r1, #0]
 8007ef6:	6801      	ldr	r1, [r0, #0]
 8007ef8:	115f      	asrs	r7, r3, #5
 8007efa:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8007efe:	f013 031f 	ands.w	r3, r3, #31
 8007f02:	b087      	sub	sp, #28
 8007f04:	bf18      	it	ne
 8007f06:	3704      	addne	r7, #4
 8007f08:	2500      	movs	r5, #0
 8007f0a:	1f3e      	subs	r6, r7, #4
 8007f0c:	4682      	mov	sl, r0
 8007f0e:	4690      	mov	r8, r2
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	f847 5c04 	str.w	r5, [r7, #-4]
 8007f16:	46b1      	mov	r9, r6
 8007f18:	4634      	mov	r4, r6
 8007f1a:	9502      	str	r5, [sp, #8]
 8007f1c:	46ab      	mov	fp, r5
 8007f1e:	784a      	ldrb	r2, [r1, #1]
 8007f20:	1c4b      	adds	r3, r1, #1
 8007f22:	9303      	str	r3, [sp, #12]
 8007f24:	b342      	cbz	r2, 8007f78 <__hexnan+0x88>
 8007f26:	4610      	mov	r0, r2
 8007f28:	9105      	str	r1, [sp, #20]
 8007f2a:	9204      	str	r2, [sp, #16]
 8007f2c:	f7ff fd84 	bl	8007a38 <__hexdig_fun>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d143      	bne.n	8007fbc <__hexnan+0xcc>
 8007f34:	9a04      	ldr	r2, [sp, #16]
 8007f36:	9905      	ldr	r1, [sp, #20]
 8007f38:	2a20      	cmp	r2, #32
 8007f3a:	d818      	bhi.n	8007f6e <__hexnan+0x7e>
 8007f3c:	9b02      	ldr	r3, [sp, #8]
 8007f3e:	459b      	cmp	fp, r3
 8007f40:	dd13      	ble.n	8007f6a <__hexnan+0x7a>
 8007f42:	454c      	cmp	r4, r9
 8007f44:	d206      	bcs.n	8007f54 <__hexnan+0x64>
 8007f46:	2d07      	cmp	r5, #7
 8007f48:	dc04      	bgt.n	8007f54 <__hexnan+0x64>
 8007f4a:	462a      	mov	r2, r5
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f7ff ffa8 	bl	8007ea4 <L_shift>
 8007f54:	4544      	cmp	r4, r8
 8007f56:	d944      	bls.n	8007fe2 <__hexnan+0xf2>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f1a4 0904 	sub.w	r9, r4, #4
 8007f5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f62:	f8cd b008 	str.w	fp, [sp, #8]
 8007f66:	464c      	mov	r4, r9
 8007f68:	461d      	mov	r5, r3
 8007f6a:	9903      	ldr	r1, [sp, #12]
 8007f6c:	e7d7      	b.n	8007f1e <__hexnan+0x2e>
 8007f6e:	2a29      	cmp	r2, #41	; 0x29
 8007f70:	d14a      	bne.n	8008008 <__hexnan+0x118>
 8007f72:	3102      	adds	r1, #2
 8007f74:	f8ca 1000 	str.w	r1, [sl]
 8007f78:	f1bb 0f00 	cmp.w	fp, #0
 8007f7c:	d044      	beq.n	8008008 <__hexnan+0x118>
 8007f7e:	454c      	cmp	r4, r9
 8007f80:	d206      	bcs.n	8007f90 <__hexnan+0xa0>
 8007f82:	2d07      	cmp	r5, #7
 8007f84:	dc04      	bgt.n	8007f90 <__hexnan+0xa0>
 8007f86:	462a      	mov	r2, r5
 8007f88:	4649      	mov	r1, r9
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f7ff ff8a 	bl	8007ea4 <L_shift>
 8007f90:	4544      	cmp	r4, r8
 8007f92:	d928      	bls.n	8007fe6 <__hexnan+0xf6>
 8007f94:	4643      	mov	r3, r8
 8007f96:	f854 2b04 	ldr.w	r2, [r4], #4
 8007f9a:	f843 2b04 	str.w	r2, [r3], #4
 8007f9e:	42a6      	cmp	r6, r4
 8007fa0:	d2f9      	bcs.n	8007f96 <__hexnan+0xa6>
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f843 2b04 	str.w	r2, [r3], #4
 8007fa8:	429e      	cmp	r6, r3
 8007faa:	d2fb      	bcs.n	8007fa4 <__hexnan+0xb4>
 8007fac:	6833      	ldr	r3, [r6, #0]
 8007fae:	b91b      	cbnz	r3, 8007fb8 <__hexnan+0xc8>
 8007fb0:	4546      	cmp	r6, r8
 8007fb2:	d127      	bne.n	8008004 <__hexnan+0x114>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	6033      	str	r3, [r6, #0]
 8007fb8:	2005      	movs	r0, #5
 8007fba:	e026      	b.n	800800a <__hexnan+0x11a>
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	2d08      	cmp	r5, #8
 8007fc0:	f10b 0b01 	add.w	fp, fp, #1
 8007fc4:	dd06      	ble.n	8007fd4 <__hexnan+0xe4>
 8007fc6:	4544      	cmp	r4, r8
 8007fc8:	d9cf      	bls.n	8007f6a <__hexnan+0x7a>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fd0:	2501      	movs	r5, #1
 8007fd2:	3c04      	subs	r4, #4
 8007fd4:	6822      	ldr	r2, [r4, #0]
 8007fd6:	f000 000f 	and.w	r0, r0, #15
 8007fda:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007fde:	6020      	str	r0, [r4, #0]
 8007fe0:	e7c3      	b.n	8007f6a <__hexnan+0x7a>
 8007fe2:	2508      	movs	r5, #8
 8007fe4:	e7c1      	b.n	8007f6a <__hexnan+0x7a>
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0df      	beq.n	8007fac <__hexnan+0xbc>
 8007fec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff0:	f1c3 0320 	rsb	r3, r3, #32
 8007ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007ffc:	401a      	ands	r2, r3
 8007ffe:	f847 2c04 	str.w	r2, [r7, #-4]
 8008002:	e7d3      	b.n	8007fac <__hexnan+0xbc>
 8008004:	3e04      	subs	r6, #4
 8008006:	e7d1      	b.n	8007fac <__hexnan+0xbc>
 8008008:	2004      	movs	r0, #4
 800800a:	b007      	add	sp, #28
 800800c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008010 <__locale_ctype_ptr_l>:
 8008010:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008014:	4770      	bx	lr

08008016 <__localeconv_l>:
 8008016:	30f0      	adds	r0, #240	; 0xf0
 8008018:	4770      	bx	lr

0800801a <__ascii_mbtowc>:
 800801a:	b082      	sub	sp, #8
 800801c:	b901      	cbnz	r1, 8008020 <__ascii_mbtowc+0x6>
 800801e:	a901      	add	r1, sp, #4
 8008020:	b142      	cbz	r2, 8008034 <__ascii_mbtowc+0x1a>
 8008022:	b14b      	cbz	r3, 8008038 <__ascii_mbtowc+0x1e>
 8008024:	7813      	ldrb	r3, [r2, #0]
 8008026:	600b      	str	r3, [r1, #0]
 8008028:	7812      	ldrb	r2, [r2, #0]
 800802a:	1c10      	adds	r0, r2, #0
 800802c:	bf18      	it	ne
 800802e:	2001      	movne	r0, #1
 8008030:	b002      	add	sp, #8
 8008032:	4770      	bx	lr
 8008034:	4610      	mov	r0, r2
 8008036:	e7fb      	b.n	8008030 <__ascii_mbtowc+0x16>
 8008038:	f06f 0001 	mvn.w	r0, #1
 800803c:	e7f8      	b.n	8008030 <__ascii_mbtowc+0x16>

0800803e <_Balloc>:
 800803e:	b570      	push	{r4, r5, r6, lr}
 8008040:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008042:	4604      	mov	r4, r0
 8008044:	460e      	mov	r6, r1
 8008046:	b93d      	cbnz	r5, 8008058 <_Balloc+0x1a>
 8008048:	2010      	movs	r0, #16
 800804a:	f000 ff57 	bl	8008efc <malloc>
 800804e:	6260      	str	r0, [r4, #36]	; 0x24
 8008050:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008054:	6005      	str	r5, [r0, #0]
 8008056:	60c5      	str	r5, [r0, #12]
 8008058:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800805a:	68eb      	ldr	r3, [r5, #12]
 800805c:	b183      	cbz	r3, 8008080 <_Balloc+0x42>
 800805e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008066:	b9b8      	cbnz	r0, 8008098 <_Balloc+0x5a>
 8008068:	2101      	movs	r1, #1
 800806a:	fa01 f506 	lsl.w	r5, r1, r6
 800806e:	1d6a      	adds	r2, r5, #5
 8008070:	0092      	lsls	r2, r2, #2
 8008072:	4620      	mov	r0, r4
 8008074:	f000 fbe1 	bl	800883a <_calloc_r>
 8008078:	b160      	cbz	r0, 8008094 <_Balloc+0x56>
 800807a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800807e:	e00e      	b.n	800809e <_Balloc+0x60>
 8008080:	2221      	movs	r2, #33	; 0x21
 8008082:	2104      	movs	r1, #4
 8008084:	4620      	mov	r0, r4
 8008086:	f000 fbd8 	bl	800883a <_calloc_r>
 800808a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800808c:	60e8      	str	r0, [r5, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e4      	bne.n	800805e <_Balloc+0x20>
 8008094:	2000      	movs	r0, #0
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	6802      	ldr	r2, [r0, #0]
 800809a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800809e:	2300      	movs	r3, #0
 80080a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080a4:	e7f7      	b.n	8008096 <_Balloc+0x58>

080080a6 <_Bfree>:
 80080a6:	b570      	push	{r4, r5, r6, lr}
 80080a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80080aa:	4606      	mov	r6, r0
 80080ac:	460d      	mov	r5, r1
 80080ae:	b93c      	cbnz	r4, 80080c0 <_Bfree+0x1a>
 80080b0:	2010      	movs	r0, #16
 80080b2:	f000 ff23 	bl	8008efc <malloc>
 80080b6:	6270      	str	r0, [r6, #36]	; 0x24
 80080b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080bc:	6004      	str	r4, [r0, #0]
 80080be:	60c4      	str	r4, [r0, #12]
 80080c0:	b13d      	cbz	r5, 80080d2 <_Bfree+0x2c>
 80080c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80080c4:	686a      	ldr	r2, [r5, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080cc:	6029      	str	r1, [r5, #0]
 80080ce:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80080d2:	bd70      	pop	{r4, r5, r6, pc}

080080d4 <__multadd>:
 80080d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d8:	690d      	ldr	r5, [r1, #16]
 80080da:	461f      	mov	r7, r3
 80080dc:	4606      	mov	r6, r0
 80080de:	460c      	mov	r4, r1
 80080e0:	f101 0c14 	add.w	ip, r1, #20
 80080e4:	2300      	movs	r3, #0
 80080e6:	f8dc 0000 	ldr.w	r0, [ip]
 80080ea:	b281      	uxth	r1, r0
 80080ec:	fb02 7101 	mla	r1, r2, r1, r7
 80080f0:	0c0f      	lsrs	r7, r1, #16
 80080f2:	0c00      	lsrs	r0, r0, #16
 80080f4:	fb02 7000 	mla	r0, r2, r0, r7
 80080f8:	b289      	uxth	r1, r1
 80080fa:	3301      	adds	r3, #1
 80080fc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008100:	429d      	cmp	r5, r3
 8008102:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008106:	f84c 1b04 	str.w	r1, [ip], #4
 800810a:	dcec      	bgt.n	80080e6 <__multadd+0x12>
 800810c:	b1d7      	cbz	r7, 8008144 <__multadd+0x70>
 800810e:	68a3      	ldr	r3, [r4, #8]
 8008110:	42ab      	cmp	r3, r5
 8008112:	dc12      	bgt.n	800813a <__multadd+0x66>
 8008114:	6861      	ldr	r1, [r4, #4]
 8008116:	4630      	mov	r0, r6
 8008118:	3101      	adds	r1, #1
 800811a:	f7ff ff90 	bl	800803e <_Balloc>
 800811e:	6922      	ldr	r2, [r4, #16]
 8008120:	3202      	adds	r2, #2
 8008122:	f104 010c 	add.w	r1, r4, #12
 8008126:	4680      	mov	r8, r0
 8008128:	0092      	lsls	r2, r2, #2
 800812a:	300c      	adds	r0, #12
 800812c:	f7fe fd4c 	bl	8006bc8 <memcpy>
 8008130:	4621      	mov	r1, r4
 8008132:	4630      	mov	r0, r6
 8008134:	f7ff ffb7 	bl	80080a6 <_Bfree>
 8008138:	4644      	mov	r4, r8
 800813a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800813e:	3501      	adds	r5, #1
 8008140:	615f      	str	r7, [r3, #20]
 8008142:	6125      	str	r5, [r4, #16]
 8008144:	4620      	mov	r0, r4
 8008146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800814a <__s2b>:
 800814a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800814e:	460c      	mov	r4, r1
 8008150:	4615      	mov	r5, r2
 8008152:	461f      	mov	r7, r3
 8008154:	2209      	movs	r2, #9
 8008156:	3308      	adds	r3, #8
 8008158:	4606      	mov	r6, r0
 800815a:	fb93 f3f2 	sdiv	r3, r3, r2
 800815e:	2100      	movs	r1, #0
 8008160:	2201      	movs	r2, #1
 8008162:	429a      	cmp	r2, r3
 8008164:	db20      	blt.n	80081a8 <__s2b+0x5e>
 8008166:	4630      	mov	r0, r6
 8008168:	f7ff ff69 	bl	800803e <_Balloc>
 800816c:	9b08      	ldr	r3, [sp, #32]
 800816e:	6143      	str	r3, [r0, #20]
 8008170:	2d09      	cmp	r5, #9
 8008172:	f04f 0301 	mov.w	r3, #1
 8008176:	6103      	str	r3, [r0, #16]
 8008178:	dd19      	ble.n	80081ae <__s2b+0x64>
 800817a:	f104 0809 	add.w	r8, r4, #9
 800817e:	46c1      	mov	r9, r8
 8008180:	442c      	add	r4, r5
 8008182:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008186:	4601      	mov	r1, r0
 8008188:	3b30      	subs	r3, #48	; 0x30
 800818a:	220a      	movs	r2, #10
 800818c:	4630      	mov	r0, r6
 800818e:	f7ff ffa1 	bl	80080d4 <__multadd>
 8008192:	45a1      	cmp	r9, r4
 8008194:	d1f5      	bne.n	8008182 <__s2b+0x38>
 8008196:	eb08 0405 	add.w	r4, r8, r5
 800819a:	3c08      	subs	r4, #8
 800819c:	1b2d      	subs	r5, r5, r4
 800819e:	1963      	adds	r3, r4, r5
 80081a0:	42bb      	cmp	r3, r7
 80081a2:	db07      	blt.n	80081b4 <__s2b+0x6a>
 80081a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081a8:	0052      	lsls	r2, r2, #1
 80081aa:	3101      	adds	r1, #1
 80081ac:	e7d9      	b.n	8008162 <__s2b+0x18>
 80081ae:	340a      	adds	r4, #10
 80081b0:	2509      	movs	r5, #9
 80081b2:	e7f3      	b.n	800819c <__s2b+0x52>
 80081b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081b8:	4601      	mov	r1, r0
 80081ba:	3b30      	subs	r3, #48	; 0x30
 80081bc:	220a      	movs	r2, #10
 80081be:	4630      	mov	r0, r6
 80081c0:	f7ff ff88 	bl	80080d4 <__multadd>
 80081c4:	e7eb      	b.n	800819e <__s2b+0x54>

080081c6 <__hi0bits>:
 80081c6:	0c02      	lsrs	r2, r0, #16
 80081c8:	0412      	lsls	r2, r2, #16
 80081ca:	4603      	mov	r3, r0
 80081cc:	b9b2      	cbnz	r2, 80081fc <__hi0bits+0x36>
 80081ce:	0403      	lsls	r3, r0, #16
 80081d0:	2010      	movs	r0, #16
 80081d2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80081d6:	bf04      	itt	eq
 80081d8:	021b      	lsleq	r3, r3, #8
 80081da:	3008      	addeq	r0, #8
 80081dc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80081e0:	bf04      	itt	eq
 80081e2:	011b      	lsleq	r3, r3, #4
 80081e4:	3004      	addeq	r0, #4
 80081e6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80081ea:	bf04      	itt	eq
 80081ec:	009b      	lsleq	r3, r3, #2
 80081ee:	3002      	addeq	r0, #2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	db06      	blt.n	8008202 <__hi0bits+0x3c>
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	d503      	bpl.n	8008200 <__hi0bits+0x3a>
 80081f8:	3001      	adds	r0, #1
 80081fa:	4770      	bx	lr
 80081fc:	2000      	movs	r0, #0
 80081fe:	e7e8      	b.n	80081d2 <__hi0bits+0xc>
 8008200:	2020      	movs	r0, #32
 8008202:	4770      	bx	lr

08008204 <__lo0bits>:
 8008204:	6803      	ldr	r3, [r0, #0]
 8008206:	f013 0207 	ands.w	r2, r3, #7
 800820a:	4601      	mov	r1, r0
 800820c:	d00b      	beq.n	8008226 <__lo0bits+0x22>
 800820e:	07da      	lsls	r2, r3, #31
 8008210:	d423      	bmi.n	800825a <__lo0bits+0x56>
 8008212:	0798      	lsls	r0, r3, #30
 8008214:	bf49      	itett	mi
 8008216:	085b      	lsrmi	r3, r3, #1
 8008218:	089b      	lsrpl	r3, r3, #2
 800821a:	2001      	movmi	r0, #1
 800821c:	600b      	strmi	r3, [r1, #0]
 800821e:	bf5c      	itt	pl
 8008220:	600b      	strpl	r3, [r1, #0]
 8008222:	2002      	movpl	r0, #2
 8008224:	4770      	bx	lr
 8008226:	b298      	uxth	r0, r3
 8008228:	b9a8      	cbnz	r0, 8008256 <__lo0bits+0x52>
 800822a:	0c1b      	lsrs	r3, r3, #16
 800822c:	2010      	movs	r0, #16
 800822e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008232:	bf04      	itt	eq
 8008234:	0a1b      	lsreq	r3, r3, #8
 8008236:	3008      	addeq	r0, #8
 8008238:	071a      	lsls	r2, r3, #28
 800823a:	bf04      	itt	eq
 800823c:	091b      	lsreq	r3, r3, #4
 800823e:	3004      	addeq	r0, #4
 8008240:	079a      	lsls	r2, r3, #30
 8008242:	bf04      	itt	eq
 8008244:	089b      	lsreq	r3, r3, #2
 8008246:	3002      	addeq	r0, #2
 8008248:	07da      	lsls	r2, r3, #31
 800824a:	d402      	bmi.n	8008252 <__lo0bits+0x4e>
 800824c:	085b      	lsrs	r3, r3, #1
 800824e:	d006      	beq.n	800825e <__lo0bits+0x5a>
 8008250:	3001      	adds	r0, #1
 8008252:	600b      	str	r3, [r1, #0]
 8008254:	4770      	bx	lr
 8008256:	4610      	mov	r0, r2
 8008258:	e7e9      	b.n	800822e <__lo0bits+0x2a>
 800825a:	2000      	movs	r0, #0
 800825c:	4770      	bx	lr
 800825e:	2020      	movs	r0, #32
 8008260:	4770      	bx	lr

08008262 <__i2b>:
 8008262:	b510      	push	{r4, lr}
 8008264:	460c      	mov	r4, r1
 8008266:	2101      	movs	r1, #1
 8008268:	f7ff fee9 	bl	800803e <_Balloc>
 800826c:	2201      	movs	r2, #1
 800826e:	6144      	str	r4, [r0, #20]
 8008270:	6102      	str	r2, [r0, #16]
 8008272:	bd10      	pop	{r4, pc}

08008274 <__multiply>:
 8008274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008278:	4614      	mov	r4, r2
 800827a:	690a      	ldr	r2, [r1, #16]
 800827c:	6923      	ldr	r3, [r4, #16]
 800827e:	429a      	cmp	r2, r3
 8008280:	bfb8      	it	lt
 8008282:	460b      	movlt	r3, r1
 8008284:	4688      	mov	r8, r1
 8008286:	bfbc      	itt	lt
 8008288:	46a0      	movlt	r8, r4
 800828a:	461c      	movlt	r4, r3
 800828c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008290:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008294:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008298:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800829c:	eb07 0609 	add.w	r6, r7, r9
 80082a0:	42b3      	cmp	r3, r6
 80082a2:	bfb8      	it	lt
 80082a4:	3101      	addlt	r1, #1
 80082a6:	f7ff feca 	bl	800803e <_Balloc>
 80082aa:	f100 0514 	add.w	r5, r0, #20
 80082ae:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80082b2:	462b      	mov	r3, r5
 80082b4:	2200      	movs	r2, #0
 80082b6:	4573      	cmp	r3, lr
 80082b8:	d316      	bcc.n	80082e8 <__multiply+0x74>
 80082ba:	f104 0214 	add.w	r2, r4, #20
 80082be:	f108 0114 	add.w	r1, r8, #20
 80082c2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80082c6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	9b00      	ldr	r3, [sp, #0]
 80082ce:	9201      	str	r2, [sp, #4]
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d80c      	bhi.n	80082ee <__multiply+0x7a>
 80082d4:	2e00      	cmp	r6, #0
 80082d6:	dd03      	ble.n	80082e0 <__multiply+0x6c>
 80082d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d05d      	beq.n	800839c <__multiply+0x128>
 80082e0:	6106      	str	r6, [r0, #16]
 80082e2:	b003      	add	sp, #12
 80082e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e8:	f843 2b04 	str.w	r2, [r3], #4
 80082ec:	e7e3      	b.n	80082b6 <__multiply+0x42>
 80082ee:	f8b2 b000 	ldrh.w	fp, [r2]
 80082f2:	f1bb 0f00 	cmp.w	fp, #0
 80082f6:	d023      	beq.n	8008340 <__multiply+0xcc>
 80082f8:	4689      	mov	r9, r1
 80082fa:	46ac      	mov	ip, r5
 80082fc:	f04f 0800 	mov.w	r8, #0
 8008300:	f859 4b04 	ldr.w	r4, [r9], #4
 8008304:	f8dc a000 	ldr.w	sl, [ip]
 8008308:	b2a3      	uxth	r3, r4
 800830a:	fa1f fa8a 	uxth.w	sl, sl
 800830e:	fb0b a303 	mla	r3, fp, r3, sl
 8008312:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008316:	f8dc 4000 	ldr.w	r4, [ip]
 800831a:	4443      	add	r3, r8
 800831c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008320:	fb0b 840a 	mla	r4, fp, sl, r8
 8008324:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008328:	46e2      	mov	sl, ip
 800832a:	b29b      	uxth	r3, r3
 800832c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008330:	454f      	cmp	r7, r9
 8008332:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008336:	f84a 3b04 	str.w	r3, [sl], #4
 800833a:	d82b      	bhi.n	8008394 <__multiply+0x120>
 800833c:	f8cc 8004 	str.w	r8, [ip, #4]
 8008340:	9b01      	ldr	r3, [sp, #4]
 8008342:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008346:	3204      	adds	r2, #4
 8008348:	f1ba 0f00 	cmp.w	sl, #0
 800834c:	d020      	beq.n	8008390 <__multiply+0x11c>
 800834e:	682b      	ldr	r3, [r5, #0]
 8008350:	4689      	mov	r9, r1
 8008352:	46a8      	mov	r8, r5
 8008354:	f04f 0b00 	mov.w	fp, #0
 8008358:	f8b9 c000 	ldrh.w	ip, [r9]
 800835c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008360:	fb0a 440c 	mla	r4, sl, ip, r4
 8008364:	445c      	add	r4, fp
 8008366:	46c4      	mov	ip, r8
 8008368:	b29b      	uxth	r3, r3
 800836a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800836e:	f84c 3b04 	str.w	r3, [ip], #4
 8008372:	f859 3b04 	ldr.w	r3, [r9], #4
 8008376:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800837a:	0c1b      	lsrs	r3, r3, #16
 800837c:	fb0a b303 	mla	r3, sl, r3, fp
 8008380:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008384:	454f      	cmp	r7, r9
 8008386:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800838a:	d805      	bhi.n	8008398 <__multiply+0x124>
 800838c:	f8c8 3004 	str.w	r3, [r8, #4]
 8008390:	3504      	adds	r5, #4
 8008392:	e79b      	b.n	80082cc <__multiply+0x58>
 8008394:	46d4      	mov	ip, sl
 8008396:	e7b3      	b.n	8008300 <__multiply+0x8c>
 8008398:	46e0      	mov	r8, ip
 800839a:	e7dd      	b.n	8008358 <__multiply+0xe4>
 800839c:	3e01      	subs	r6, #1
 800839e:	e799      	b.n	80082d4 <__multiply+0x60>

080083a0 <__pow5mult>:
 80083a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a4:	4615      	mov	r5, r2
 80083a6:	f012 0203 	ands.w	r2, r2, #3
 80083aa:	4606      	mov	r6, r0
 80083ac:	460f      	mov	r7, r1
 80083ae:	d007      	beq.n	80083c0 <__pow5mult+0x20>
 80083b0:	3a01      	subs	r2, #1
 80083b2:	4c21      	ldr	r4, [pc, #132]	; (8008438 <__pow5mult+0x98>)
 80083b4:	2300      	movs	r3, #0
 80083b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083ba:	f7ff fe8b 	bl	80080d4 <__multadd>
 80083be:	4607      	mov	r7, r0
 80083c0:	10ad      	asrs	r5, r5, #2
 80083c2:	d035      	beq.n	8008430 <__pow5mult+0x90>
 80083c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80083c6:	b93c      	cbnz	r4, 80083d8 <__pow5mult+0x38>
 80083c8:	2010      	movs	r0, #16
 80083ca:	f000 fd97 	bl	8008efc <malloc>
 80083ce:	6270      	str	r0, [r6, #36]	; 0x24
 80083d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083d4:	6004      	str	r4, [r0, #0]
 80083d6:	60c4      	str	r4, [r0, #12]
 80083d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083e0:	b94c      	cbnz	r4, 80083f6 <__pow5mult+0x56>
 80083e2:	f240 2171 	movw	r1, #625	; 0x271
 80083e6:	4630      	mov	r0, r6
 80083e8:	f7ff ff3b 	bl	8008262 <__i2b>
 80083ec:	2300      	movs	r3, #0
 80083ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80083f2:	4604      	mov	r4, r0
 80083f4:	6003      	str	r3, [r0, #0]
 80083f6:	f04f 0800 	mov.w	r8, #0
 80083fa:	07eb      	lsls	r3, r5, #31
 80083fc:	d50a      	bpl.n	8008414 <__pow5mult+0x74>
 80083fe:	4639      	mov	r1, r7
 8008400:	4622      	mov	r2, r4
 8008402:	4630      	mov	r0, r6
 8008404:	f7ff ff36 	bl	8008274 <__multiply>
 8008408:	4639      	mov	r1, r7
 800840a:	4681      	mov	r9, r0
 800840c:	4630      	mov	r0, r6
 800840e:	f7ff fe4a 	bl	80080a6 <_Bfree>
 8008412:	464f      	mov	r7, r9
 8008414:	106d      	asrs	r5, r5, #1
 8008416:	d00b      	beq.n	8008430 <__pow5mult+0x90>
 8008418:	6820      	ldr	r0, [r4, #0]
 800841a:	b938      	cbnz	r0, 800842c <__pow5mult+0x8c>
 800841c:	4622      	mov	r2, r4
 800841e:	4621      	mov	r1, r4
 8008420:	4630      	mov	r0, r6
 8008422:	f7ff ff27 	bl	8008274 <__multiply>
 8008426:	6020      	str	r0, [r4, #0]
 8008428:	f8c0 8000 	str.w	r8, [r0]
 800842c:	4604      	mov	r4, r0
 800842e:	e7e4      	b.n	80083fa <__pow5mult+0x5a>
 8008430:	4638      	mov	r0, r7
 8008432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008436:	bf00      	nop
 8008438:	08009350 	.word	0x08009350

0800843c <__lshift>:
 800843c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008440:	460c      	mov	r4, r1
 8008442:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	6849      	ldr	r1, [r1, #4]
 800844a:	eb0a 0903 	add.w	r9, sl, r3
 800844e:	68a3      	ldr	r3, [r4, #8]
 8008450:	4607      	mov	r7, r0
 8008452:	4616      	mov	r6, r2
 8008454:	f109 0501 	add.w	r5, r9, #1
 8008458:	42ab      	cmp	r3, r5
 800845a:	db32      	blt.n	80084c2 <__lshift+0x86>
 800845c:	4638      	mov	r0, r7
 800845e:	f7ff fdee 	bl	800803e <_Balloc>
 8008462:	2300      	movs	r3, #0
 8008464:	4680      	mov	r8, r0
 8008466:	f100 0114 	add.w	r1, r0, #20
 800846a:	461a      	mov	r2, r3
 800846c:	4553      	cmp	r3, sl
 800846e:	db2b      	blt.n	80084c8 <__lshift+0x8c>
 8008470:	6920      	ldr	r0, [r4, #16]
 8008472:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008476:	f104 0314 	add.w	r3, r4, #20
 800847a:	f016 021f 	ands.w	r2, r6, #31
 800847e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008482:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008486:	d025      	beq.n	80084d4 <__lshift+0x98>
 8008488:	f1c2 0e20 	rsb	lr, r2, #32
 800848c:	2000      	movs	r0, #0
 800848e:	681e      	ldr	r6, [r3, #0]
 8008490:	468a      	mov	sl, r1
 8008492:	4096      	lsls	r6, r2
 8008494:	4330      	orrs	r0, r6
 8008496:	f84a 0b04 	str.w	r0, [sl], #4
 800849a:	f853 0b04 	ldr.w	r0, [r3], #4
 800849e:	459c      	cmp	ip, r3
 80084a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80084a4:	d814      	bhi.n	80084d0 <__lshift+0x94>
 80084a6:	6048      	str	r0, [r1, #4]
 80084a8:	b108      	cbz	r0, 80084ae <__lshift+0x72>
 80084aa:	f109 0502 	add.w	r5, r9, #2
 80084ae:	3d01      	subs	r5, #1
 80084b0:	4638      	mov	r0, r7
 80084b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80084b6:	4621      	mov	r1, r4
 80084b8:	f7ff fdf5 	bl	80080a6 <_Bfree>
 80084bc:	4640      	mov	r0, r8
 80084be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c2:	3101      	adds	r1, #1
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	e7c7      	b.n	8008458 <__lshift+0x1c>
 80084c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80084cc:	3301      	adds	r3, #1
 80084ce:	e7cd      	b.n	800846c <__lshift+0x30>
 80084d0:	4651      	mov	r1, sl
 80084d2:	e7dc      	b.n	800848e <__lshift+0x52>
 80084d4:	3904      	subs	r1, #4
 80084d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084da:	f841 2f04 	str.w	r2, [r1, #4]!
 80084de:	459c      	cmp	ip, r3
 80084e0:	d8f9      	bhi.n	80084d6 <__lshift+0x9a>
 80084e2:	e7e4      	b.n	80084ae <__lshift+0x72>

080084e4 <__mcmp>:
 80084e4:	6903      	ldr	r3, [r0, #16]
 80084e6:	690a      	ldr	r2, [r1, #16]
 80084e8:	1a9b      	subs	r3, r3, r2
 80084ea:	b530      	push	{r4, r5, lr}
 80084ec:	d10c      	bne.n	8008508 <__mcmp+0x24>
 80084ee:	0092      	lsls	r2, r2, #2
 80084f0:	3014      	adds	r0, #20
 80084f2:	3114      	adds	r1, #20
 80084f4:	1884      	adds	r4, r0, r2
 80084f6:	4411      	add	r1, r2
 80084f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008500:	4295      	cmp	r5, r2
 8008502:	d003      	beq.n	800850c <__mcmp+0x28>
 8008504:	d305      	bcc.n	8008512 <__mcmp+0x2e>
 8008506:	2301      	movs	r3, #1
 8008508:	4618      	mov	r0, r3
 800850a:	bd30      	pop	{r4, r5, pc}
 800850c:	42a0      	cmp	r0, r4
 800850e:	d3f3      	bcc.n	80084f8 <__mcmp+0x14>
 8008510:	e7fa      	b.n	8008508 <__mcmp+0x24>
 8008512:	f04f 33ff 	mov.w	r3, #4294967295
 8008516:	e7f7      	b.n	8008508 <__mcmp+0x24>

08008518 <__mdiff>:
 8008518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800851c:	460d      	mov	r5, r1
 800851e:	4607      	mov	r7, r0
 8008520:	4611      	mov	r1, r2
 8008522:	4628      	mov	r0, r5
 8008524:	4614      	mov	r4, r2
 8008526:	f7ff ffdd 	bl	80084e4 <__mcmp>
 800852a:	1e06      	subs	r6, r0, #0
 800852c:	d108      	bne.n	8008540 <__mdiff+0x28>
 800852e:	4631      	mov	r1, r6
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff fd84 	bl	800803e <_Balloc>
 8008536:	2301      	movs	r3, #1
 8008538:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800853c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008540:	bfa4      	itt	ge
 8008542:	4623      	movge	r3, r4
 8008544:	462c      	movge	r4, r5
 8008546:	4638      	mov	r0, r7
 8008548:	6861      	ldr	r1, [r4, #4]
 800854a:	bfa6      	itte	ge
 800854c:	461d      	movge	r5, r3
 800854e:	2600      	movge	r6, #0
 8008550:	2601      	movlt	r6, #1
 8008552:	f7ff fd74 	bl	800803e <_Balloc>
 8008556:	692b      	ldr	r3, [r5, #16]
 8008558:	60c6      	str	r6, [r0, #12]
 800855a:	6926      	ldr	r6, [r4, #16]
 800855c:	f105 0914 	add.w	r9, r5, #20
 8008560:	f104 0214 	add.w	r2, r4, #20
 8008564:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008568:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800856c:	f100 0514 	add.w	r5, r0, #20
 8008570:	f04f 0e00 	mov.w	lr, #0
 8008574:	f852 ab04 	ldr.w	sl, [r2], #4
 8008578:	f859 4b04 	ldr.w	r4, [r9], #4
 800857c:	fa1e f18a 	uxtah	r1, lr, sl
 8008580:	b2a3      	uxth	r3, r4
 8008582:	1ac9      	subs	r1, r1, r3
 8008584:	0c23      	lsrs	r3, r4, #16
 8008586:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800858a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800858e:	b289      	uxth	r1, r1
 8008590:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008594:	45c8      	cmp	r8, r9
 8008596:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800859a:	4694      	mov	ip, r2
 800859c:	f845 3b04 	str.w	r3, [r5], #4
 80085a0:	d8e8      	bhi.n	8008574 <__mdiff+0x5c>
 80085a2:	45bc      	cmp	ip, r7
 80085a4:	d304      	bcc.n	80085b0 <__mdiff+0x98>
 80085a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80085aa:	b183      	cbz	r3, 80085ce <__mdiff+0xb6>
 80085ac:	6106      	str	r6, [r0, #16]
 80085ae:	e7c5      	b.n	800853c <__mdiff+0x24>
 80085b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80085b4:	fa1e f381 	uxtah	r3, lr, r1
 80085b8:	141a      	asrs	r2, r3, #16
 80085ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085be:	b29b      	uxth	r3, r3
 80085c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80085c8:	f845 3b04 	str.w	r3, [r5], #4
 80085cc:	e7e9      	b.n	80085a2 <__mdiff+0x8a>
 80085ce:	3e01      	subs	r6, #1
 80085d0:	e7e9      	b.n	80085a6 <__mdiff+0x8e>
	...

080085d4 <__ulp>:
 80085d4:	4b12      	ldr	r3, [pc, #72]	; (8008620 <__ulp+0x4c>)
 80085d6:	ee10 2a90 	vmov	r2, s1
 80085da:	401a      	ands	r2, r3
 80085dc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	dd04      	ble.n	80085ee <__ulp+0x1a>
 80085e4:	2000      	movs	r0, #0
 80085e6:	4619      	mov	r1, r3
 80085e8:	ec41 0b10 	vmov	d0, r0, r1
 80085ec:	4770      	bx	lr
 80085ee:	425b      	negs	r3, r3
 80085f0:	151b      	asrs	r3, r3, #20
 80085f2:	2b13      	cmp	r3, #19
 80085f4:	f04f 0000 	mov.w	r0, #0
 80085f8:	f04f 0100 	mov.w	r1, #0
 80085fc:	dc04      	bgt.n	8008608 <__ulp+0x34>
 80085fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008602:	fa42 f103 	asr.w	r1, r2, r3
 8008606:	e7ef      	b.n	80085e8 <__ulp+0x14>
 8008608:	3b14      	subs	r3, #20
 800860a:	2b1e      	cmp	r3, #30
 800860c:	f04f 0201 	mov.w	r2, #1
 8008610:	bfda      	itte	le
 8008612:	f1c3 031f 	rsble	r3, r3, #31
 8008616:	fa02 f303 	lslle.w	r3, r2, r3
 800861a:	4613      	movgt	r3, r2
 800861c:	4618      	mov	r0, r3
 800861e:	e7e3      	b.n	80085e8 <__ulp+0x14>
 8008620:	7ff00000 	.word	0x7ff00000

08008624 <__b2d>:
 8008624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008626:	6905      	ldr	r5, [r0, #16]
 8008628:	f100 0714 	add.w	r7, r0, #20
 800862c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008630:	1f2e      	subs	r6, r5, #4
 8008632:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008636:	4620      	mov	r0, r4
 8008638:	f7ff fdc5 	bl	80081c6 <__hi0bits>
 800863c:	f1c0 0320 	rsb	r3, r0, #32
 8008640:	280a      	cmp	r0, #10
 8008642:	600b      	str	r3, [r1, #0]
 8008644:	f8df c074 	ldr.w	ip, [pc, #116]	; 80086bc <__b2d+0x98>
 8008648:	dc14      	bgt.n	8008674 <__b2d+0x50>
 800864a:	f1c0 0e0b 	rsb	lr, r0, #11
 800864e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008652:	42b7      	cmp	r7, r6
 8008654:	ea41 030c 	orr.w	r3, r1, ip
 8008658:	bf34      	ite	cc
 800865a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800865e:	2100      	movcs	r1, #0
 8008660:	3015      	adds	r0, #21
 8008662:	fa04 f000 	lsl.w	r0, r4, r0
 8008666:	fa21 f10e 	lsr.w	r1, r1, lr
 800866a:	ea40 0201 	orr.w	r2, r0, r1
 800866e:	ec43 2b10 	vmov	d0, r2, r3
 8008672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008674:	42b7      	cmp	r7, r6
 8008676:	bf3a      	itte	cc
 8008678:	f1a5 0608 	subcc.w	r6, r5, #8
 800867c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008680:	2100      	movcs	r1, #0
 8008682:	380b      	subs	r0, #11
 8008684:	d015      	beq.n	80086b2 <__b2d+0x8e>
 8008686:	4084      	lsls	r4, r0
 8008688:	f1c0 0520 	rsb	r5, r0, #32
 800868c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008690:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008694:	42be      	cmp	r6, r7
 8008696:	fa21 fc05 	lsr.w	ip, r1, r5
 800869a:	ea44 030c 	orr.w	r3, r4, ip
 800869e:	bf8c      	ite	hi
 80086a0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80086a4:	2400      	movls	r4, #0
 80086a6:	fa01 f000 	lsl.w	r0, r1, r0
 80086aa:	40ec      	lsrs	r4, r5
 80086ac:	ea40 0204 	orr.w	r2, r0, r4
 80086b0:	e7dd      	b.n	800866e <__b2d+0x4a>
 80086b2:	ea44 030c 	orr.w	r3, r4, ip
 80086b6:	460a      	mov	r2, r1
 80086b8:	e7d9      	b.n	800866e <__b2d+0x4a>
 80086ba:	bf00      	nop
 80086bc:	3ff00000 	.word	0x3ff00000

080086c0 <__d2b>:
 80086c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086c4:	460e      	mov	r6, r1
 80086c6:	2101      	movs	r1, #1
 80086c8:	ec59 8b10 	vmov	r8, r9, d0
 80086cc:	4615      	mov	r5, r2
 80086ce:	f7ff fcb6 	bl	800803e <_Balloc>
 80086d2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80086d6:	4607      	mov	r7, r0
 80086d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086dc:	bb34      	cbnz	r4, 800872c <__d2b+0x6c>
 80086de:	9301      	str	r3, [sp, #4]
 80086e0:	f1b8 0300 	subs.w	r3, r8, #0
 80086e4:	d027      	beq.n	8008736 <__d2b+0x76>
 80086e6:	a802      	add	r0, sp, #8
 80086e8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80086ec:	f7ff fd8a 	bl	8008204 <__lo0bits>
 80086f0:	9900      	ldr	r1, [sp, #0]
 80086f2:	b1f0      	cbz	r0, 8008732 <__d2b+0x72>
 80086f4:	9a01      	ldr	r2, [sp, #4]
 80086f6:	f1c0 0320 	rsb	r3, r0, #32
 80086fa:	fa02 f303 	lsl.w	r3, r2, r3
 80086fe:	430b      	orrs	r3, r1
 8008700:	40c2      	lsrs	r2, r0
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	9201      	str	r2, [sp, #4]
 8008706:	9b01      	ldr	r3, [sp, #4]
 8008708:	61bb      	str	r3, [r7, #24]
 800870a:	2b00      	cmp	r3, #0
 800870c:	bf14      	ite	ne
 800870e:	2102      	movne	r1, #2
 8008710:	2101      	moveq	r1, #1
 8008712:	6139      	str	r1, [r7, #16]
 8008714:	b1c4      	cbz	r4, 8008748 <__d2b+0x88>
 8008716:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800871a:	4404      	add	r4, r0
 800871c:	6034      	str	r4, [r6, #0]
 800871e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008722:	6028      	str	r0, [r5, #0]
 8008724:	4638      	mov	r0, r7
 8008726:	b003      	add	sp, #12
 8008728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800872c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008730:	e7d5      	b.n	80086de <__d2b+0x1e>
 8008732:	6179      	str	r1, [r7, #20]
 8008734:	e7e7      	b.n	8008706 <__d2b+0x46>
 8008736:	a801      	add	r0, sp, #4
 8008738:	f7ff fd64 	bl	8008204 <__lo0bits>
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	2101      	movs	r1, #1
 8008742:	6139      	str	r1, [r7, #16]
 8008744:	3020      	adds	r0, #32
 8008746:	e7e5      	b.n	8008714 <__d2b+0x54>
 8008748:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800874c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008750:	6030      	str	r0, [r6, #0]
 8008752:	6918      	ldr	r0, [r3, #16]
 8008754:	f7ff fd37 	bl	80081c6 <__hi0bits>
 8008758:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800875c:	e7e1      	b.n	8008722 <__d2b+0x62>

0800875e <__ratio>:
 800875e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008762:	4688      	mov	r8, r1
 8008764:	4669      	mov	r1, sp
 8008766:	4681      	mov	r9, r0
 8008768:	f7ff ff5c 	bl	8008624 <__b2d>
 800876c:	a901      	add	r1, sp, #4
 800876e:	4640      	mov	r0, r8
 8008770:	ec57 6b10 	vmov	r6, r7, d0
 8008774:	f7ff ff56 	bl	8008624 <__b2d>
 8008778:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800877c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008780:	eba3 0c02 	sub.w	ip, r3, r2
 8008784:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008788:	1a9b      	subs	r3, r3, r2
 800878a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800878e:	ec5b ab10 	vmov	sl, fp, d0
 8008792:	2b00      	cmp	r3, #0
 8008794:	bfce      	itee	gt
 8008796:	463a      	movgt	r2, r7
 8008798:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800879c:	465a      	movle	r2, fp
 800879e:	4659      	mov	r1, fp
 80087a0:	463d      	mov	r5, r7
 80087a2:	bfd4      	ite	le
 80087a4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80087a8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80087ac:	4630      	mov	r0, r6
 80087ae:	ee10 2a10 	vmov	r2, s0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4629      	mov	r1, r5
 80087b6:	f7f8 f849 	bl	800084c <__aeabi_ddiv>
 80087ba:	ec41 0b10 	vmov	d0, r0, r1
 80087be:	b003      	add	sp, #12
 80087c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087c4 <__copybits>:
 80087c4:	3901      	subs	r1, #1
 80087c6:	b510      	push	{r4, lr}
 80087c8:	1149      	asrs	r1, r1, #5
 80087ca:	6914      	ldr	r4, [r2, #16]
 80087cc:	3101      	adds	r1, #1
 80087ce:	f102 0314 	add.w	r3, r2, #20
 80087d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80087da:	42a3      	cmp	r3, r4
 80087dc:	4602      	mov	r2, r0
 80087de:	d303      	bcc.n	80087e8 <__copybits+0x24>
 80087e0:	2300      	movs	r3, #0
 80087e2:	428a      	cmp	r2, r1
 80087e4:	d305      	bcc.n	80087f2 <__copybits+0x2e>
 80087e6:	bd10      	pop	{r4, pc}
 80087e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ec:	f840 2b04 	str.w	r2, [r0], #4
 80087f0:	e7f3      	b.n	80087da <__copybits+0x16>
 80087f2:	f842 3b04 	str.w	r3, [r2], #4
 80087f6:	e7f4      	b.n	80087e2 <__copybits+0x1e>

080087f8 <__any_on>:
 80087f8:	f100 0214 	add.w	r2, r0, #20
 80087fc:	6900      	ldr	r0, [r0, #16]
 80087fe:	114b      	asrs	r3, r1, #5
 8008800:	4298      	cmp	r0, r3
 8008802:	b510      	push	{r4, lr}
 8008804:	db11      	blt.n	800882a <__any_on+0x32>
 8008806:	dd0a      	ble.n	800881e <__any_on+0x26>
 8008808:	f011 011f 	ands.w	r1, r1, #31
 800880c:	d007      	beq.n	800881e <__any_on+0x26>
 800880e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008812:	fa24 f001 	lsr.w	r0, r4, r1
 8008816:	fa00 f101 	lsl.w	r1, r0, r1
 800881a:	428c      	cmp	r4, r1
 800881c:	d10b      	bne.n	8008836 <__any_on+0x3e>
 800881e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008822:	4293      	cmp	r3, r2
 8008824:	d803      	bhi.n	800882e <__any_on+0x36>
 8008826:	2000      	movs	r0, #0
 8008828:	bd10      	pop	{r4, pc}
 800882a:	4603      	mov	r3, r0
 800882c:	e7f7      	b.n	800881e <__any_on+0x26>
 800882e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008832:	2900      	cmp	r1, #0
 8008834:	d0f5      	beq.n	8008822 <__any_on+0x2a>
 8008836:	2001      	movs	r0, #1
 8008838:	e7f6      	b.n	8008828 <__any_on+0x30>

0800883a <_calloc_r>:
 800883a:	b538      	push	{r3, r4, r5, lr}
 800883c:	fb02 f401 	mul.w	r4, r2, r1
 8008840:	4621      	mov	r1, r4
 8008842:	f000 f809 	bl	8008858 <_malloc_r>
 8008846:	4605      	mov	r5, r0
 8008848:	b118      	cbz	r0, 8008852 <_calloc_r+0x18>
 800884a:	4622      	mov	r2, r4
 800884c:	2100      	movs	r1, #0
 800884e:	f7fe f9c6 	bl	8006bde <memset>
 8008852:	4628      	mov	r0, r5
 8008854:	bd38      	pop	{r3, r4, r5, pc}
	...

08008858 <_malloc_r>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	1ccd      	adds	r5, r1, #3
 800885c:	f025 0503 	bic.w	r5, r5, #3
 8008860:	3508      	adds	r5, #8
 8008862:	2d0c      	cmp	r5, #12
 8008864:	bf38      	it	cc
 8008866:	250c      	movcc	r5, #12
 8008868:	2d00      	cmp	r5, #0
 800886a:	4606      	mov	r6, r0
 800886c:	db01      	blt.n	8008872 <_malloc_r+0x1a>
 800886e:	42a9      	cmp	r1, r5
 8008870:	d903      	bls.n	800887a <_malloc_r+0x22>
 8008872:	230c      	movs	r3, #12
 8008874:	6033      	str	r3, [r6, #0]
 8008876:	2000      	movs	r0, #0
 8008878:	bd70      	pop	{r4, r5, r6, pc}
 800887a:	f000 fb60 	bl	8008f3e <__malloc_lock>
 800887e:	4a21      	ldr	r2, [pc, #132]	; (8008904 <_malloc_r+0xac>)
 8008880:	6814      	ldr	r4, [r2, #0]
 8008882:	4621      	mov	r1, r4
 8008884:	b991      	cbnz	r1, 80088ac <_malloc_r+0x54>
 8008886:	4c20      	ldr	r4, [pc, #128]	; (8008908 <_malloc_r+0xb0>)
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	b91b      	cbnz	r3, 8008894 <_malloc_r+0x3c>
 800888c:	4630      	mov	r0, r6
 800888e:	f000 fb17 	bl	8008ec0 <_sbrk_r>
 8008892:	6020      	str	r0, [r4, #0]
 8008894:	4629      	mov	r1, r5
 8008896:	4630      	mov	r0, r6
 8008898:	f000 fb12 	bl	8008ec0 <_sbrk_r>
 800889c:	1c43      	adds	r3, r0, #1
 800889e:	d124      	bne.n	80088ea <_malloc_r+0x92>
 80088a0:	230c      	movs	r3, #12
 80088a2:	6033      	str	r3, [r6, #0]
 80088a4:	4630      	mov	r0, r6
 80088a6:	f000 fb4b 	bl	8008f40 <__malloc_unlock>
 80088aa:	e7e4      	b.n	8008876 <_malloc_r+0x1e>
 80088ac:	680b      	ldr	r3, [r1, #0]
 80088ae:	1b5b      	subs	r3, r3, r5
 80088b0:	d418      	bmi.n	80088e4 <_malloc_r+0x8c>
 80088b2:	2b0b      	cmp	r3, #11
 80088b4:	d90f      	bls.n	80088d6 <_malloc_r+0x7e>
 80088b6:	600b      	str	r3, [r1, #0]
 80088b8:	50cd      	str	r5, [r1, r3]
 80088ba:	18cc      	adds	r4, r1, r3
 80088bc:	4630      	mov	r0, r6
 80088be:	f000 fb3f 	bl	8008f40 <__malloc_unlock>
 80088c2:	f104 000b 	add.w	r0, r4, #11
 80088c6:	1d23      	adds	r3, r4, #4
 80088c8:	f020 0007 	bic.w	r0, r0, #7
 80088cc:	1ac3      	subs	r3, r0, r3
 80088ce:	d0d3      	beq.n	8008878 <_malloc_r+0x20>
 80088d0:	425a      	negs	r2, r3
 80088d2:	50e2      	str	r2, [r4, r3]
 80088d4:	e7d0      	b.n	8008878 <_malloc_r+0x20>
 80088d6:	428c      	cmp	r4, r1
 80088d8:	684b      	ldr	r3, [r1, #4]
 80088da:	bf16      	itet	ne
 80088dc:	6063      	strne	r3, [r4, #4]
 80088de:	6013      	streq	r3, [r2, #0]
 80088e0:	460c      	movne	r4, r1
 80088e2:	e7eb      	b.n	80088bc <_malloc_r+0x64>
 80088e4:	460c      	mov	r4, r1
 80088e6:	6849      	ldr	r1, [r1, #4]
 80088e8:	e7cc      	b.n	8008884 <_malloc_r+0x2c>
 80088ea:	1cc4      	adds	r4, r0, #3
 80088ec:	f024 0403 	bic.w	r4, r4, #3
 80088f0:	42a0      	cmp	r0, r4
 80088f2:	d005      	beq.n	8008900 <_malloc_r+0xa8>
 80088f4:	1a21      	subs	r1, r4, r0
 80088f6:	4630      	mov	r0, r6
 80088f8:	f000 fae2 	bl	8008ec0 <_sbrk_r>
 80088fc:	3001      	adds	r0, #1
 80088fe:	d0cf      	beq.n	80088a0 <_malloc_r+0x48>
 8008900:	6025      	str	r5, [r4, #0]
 8008902:	e7db      	b.n	80088bc <_malloc_r+0x64>
 8008904:	2000ca1c 	.word	0x2000ca1c
 8008908:	2000ca20 	.word	0x2000ca20

0800890c <__ssputs_r>:
 800890c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008910:	688e      	ldr	r6, [r1, #8]
 8008912:	429e      	cmp	r6, r3
 8008914:	4682      	mov	sl, r0
 8008916:	460c      	mov	r4, r1
 8008918:	4690      	mov	r8, r2
 800891a:	4699      	mov	r9, r3
 800891c:	d837      	bhi.n	800898e <__ssputs_r+0x82>
 800891e:	898a      	ldrh	r2, [r1, #12]
 8008920:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008924:	d031      	beq.n	800898a <__ssputs_r+0x7e>
 8008926:	6825      	ldr	r5, [r4, #0]
 8008928:	6909      	ldr	r1, [r1, #16]
 800892a:	1a6f      	subs	r7, r5, r1
 800892c:	6965      	ldr	r5, [r4, #20]
 800892e:	2302      	movs	r3, #2
 8008930:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008934:	fb95 f5f3 	sdiv	r5, r5, r3
 8008938:	f109 0301 	add.w	r3, r9, #1
 800893c:	443b      	add	r3, r7
 800893e:	429d      	cmp	r5, r3
 8008940:	bf38      	it	cc
 8008942:	461d      	movcc	r5, r3
 8008944:	0553      	lsls	r3, r2, #21
 8008946:	d530      	bpl.n	80089aa <__ssputs_r+0x9e>
 8008948:	4629      	mov	r1, r5
 800894a:	f7ff ff85 	bl	8008858 <_malloc_r>
 800894e:	4606      	mov	r6, r0
 8008950:	b950      	cbnz	r0, 8008968 <__ssputs_r+0x5c>
 8008952:	230c      	movs	r3, #12
 8008954:	f8ca 3000 	str.w	r3, [sl]
 8008958:	89a3      	ldrh	r3, [r4, #12]
 800895a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800895e:	81a3      	strh	r3, [r4, #12]
 8008960:	f04f 30ff 	mov.w	r0, #4294967295
 8008964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008968:	463a      	mov	r2, r7
 800896a:	6921      	ldr	r1, [r4, #16]
 800896c:	f7fe f92c 	bl	8006bc8 <memcpy>
 8008970:	89a3      	ldrh	r3, [r4, #12]
 8008972:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800897a:	81a3      	strh	r3, [r4, #12]
 800897c:	6126      	str	r6, [r4, #16]
 800897e:	6165      	str	r5, [r4, #20]
 8008980:	443e      	add	r6, r7
 8008982:	1bed      	subs	r5, r5, r7
 8008984:	6026      	str	r6, [r4, #0]
 8008986:	60a5      	str	r5, [r4, #8]
 8008988:	464e      	mov	r6, r9
 800898a:	454e      	cmp	r6, r9
 800898c:	d900      	bls.n	8008990 <__ssputs_r+0x84>
 800898e:	464e      	mov	r6, r9
 8008990:	4632      	mov	r2, r6
 8008992:	4641      	mov	r1, r8
 8008994:	6820      	ldr	r0, [r4, #0]
 8008996:	f000 fab9 	bl	8008f0c <memmove>
 800899a:	68a3      	ldr	r3, [r4, #8]
 800899c:	1b9b      	subs	r3, r3, r6
 800899e:	60a3      	str	r3, [r4, #8]
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	441e      	add	r6, r3
 80089a4:	6026      	str	r6, [r4, #0]
 80089a6:	2000      	movs	r0, #0
 80089a8:	e7dc      	b.n	8008964 <__ssputs_r+0x58>
 80089aa:	462a      	mov	r2, r5
 80089ac:	f000 fb18 	bl	8008fe0 <_realloc_r>
 80089b0:	4606      	mov	r6, r0
 80089b2:	2800      	cmp	r0, #0
 80089b4:	d1e2      	bne.n	800897c <__ssputs_r+0x70>
 80089b6:	6921      	ldr	r1, [r4, #16]
 80089b8:	4650      	mov	r0, sl
 80089ba:	f000 fac3 	bl	8008f44 <_free_r>
 80089be:	e7c8      	b.n	8008952 <__ssputs_r+0x46>

080089c0 <_svfiprintf_r>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	461d      	mov	r5, r3
 80089c6:	898b      	ldrh	r3, [r1, #12]
 80089c8:	061f      	lsls	r7, r3, #24
 80089ca:	b09d      	sub	sp, #116	; 0x74
 80089cc:	4680      	mov	r8, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	4616      	mov	r6, r2
 80089d2:	d50f      	bpl.n	80089f4 <_svfiprintf_r+0x34>
 80089d4:	690b      	ldr	r3, [r1, #16]
 80089d6:	b96b      	cbnz	r3, 80089f4 <_svfiprintf_r+0x34>
 80089d8:	2140      	movs	r1, #64	; 0x40
 80089da:	f7ff ff3d 	bl	8008858 <_malloc_r>
 80089de:	6020      	str	r0, [r4, #0]
 80089e0:	6120      	str	r0, [r4, #16]
 80089e2:	b928      	cbnz	r0, 80089f0 <_svfiprintf_r+0x30>
 80089e4:	230c      	movs	r3, #12
 80089e6:	f8c8 3000 	str.w	r3, [r8]
 80089ea:	f04f 30ff 	mov.w	r0, #4294967295
 80089ee:	e0c8      	b.n	8008b82 <_svfiprintf_r+0x1c2>
 80089f0:	2340      	movs	r3, #64	; 0x40
 80089f2:	6163      	str	r3, [r4, #20]
 80089f4:	2300      	movs	r3, #0
 80089f6:	9309      	str	r3, [sp, #36]	; 0x24
 80089f8:	2320      	movs	r3, #32
 80089fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089fe:	2330      	movs	r3, #48	; 0x30
 8008a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a04:	9503      	str	r5, [sp, #12]
 8008a06:	f04f 0b01 	mov.w	fp, #1
 8008a0a:	4637      	mov	r7, r6
 8008a0c:	463d      	mov	r5, r7
 8008a0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a12:	b10b      	cbz	r3, 8008a18 <_svfiprintf_r+0x58>
 8008a14:	2b25      	cmp	r3, #37	; 0x25
 8008a16:	d13e      	bne.n	8008a96 <_svfiprintf_r+0xd6>
 8008a18:	ebb7 0a06 	subs.w	sl, r7, r6
 8008a1c:	d00b      	beq.n	8008a36 <_svfiprintf_r+0x76>
 8008a1e:	4653      	mov	r3, sl
 8008a20:	4632      	mov	r2, r6
 8008a22:	4621      	mov	r1, r4
 8008a24:	4640      	mov	r0, r8
 8008a26:	f7ff ff71 	bl	800890c <__ssputs_r>
 8008a2a:	3001      	adds	r0, #1
 8008a2c:	f000 80a4 	beq.w	8008b78 <_svfiprintf_r+0x1b8>
 8008a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a32:	4453      	add	r3, sl
 8008a34:	9309      	str	r3, [sp, #36]	; 0x24
 8008a36:	783b      	ldrb	r3, [r7, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 809d 	beq.w	8008b78 <_svfiprintf_r+0x1b8>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f04f 32ff 	mov.w	r2, #4294967295
 8008a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a48:	9304      	str	r3, [sp, #16]
 8008a4a:	9307      	str	r3, [sp, #28]
 8008a4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a50:	931a      	str	r3, [sp, #104]	; 0x68
 8008a52:	462f      	mov	r7, r5
 8008a54:	2205      	movs	r2, #5
 8008a56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008a5a:	4850      	ldr	r0, [pc, #320]	; (8008b9c <_svfiprintf_r+0x1dc>)
 8008a5c:	f7f7 fbc0 	bl	80001e0 <memchr>
 8008a60:	9b04      	ldr	r3, [sp, #16]
 8008a62:	b9d0      	cbnz	r0, 8008a9a <_svfiprintf_r+0xda>
 8008a64:	06d9      	lsls	r1, r3, #27
 8008a66:	bf44      	itt	mi
 8008a68:	2220      	movmi	r2, #32
 8008a6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a6e:	071a      	lsls	r2, r3, #28
 8008a70:	bf44      	itt	mi
 8008a72:	222b      	movmi	r2, #43	; 0x2b
 8008a74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a78:	782a      	ldrb	r2, [r5, #0]
 8008a7a:	2a2a      	cmp	r2, #42	; 0x2a
 8008a7c:	d015      	beq.n	8008aaa <_svfiprintf_r+0xea>
 8008a7e:	9a07      	ldr	r2, [sp, #28]
 8008a80:	462f      	mov	r7, r5
 8008a82:	2000      	movs	r0, #0
 8008a84:	250a      	movs	r5, #10
 8008a86:	4639      	mov	r1, r7
 8008a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a8c:	3b30      	subs	r3, #48	; 0x30
 8008a8e:	2b09      	cmp	r3, #9
 8008a90:	d94d      	bls.n	8008b2e <_svfiprintf_r+0x16e>
 8008a92:	b1b8      	cbz	r0, 8008ac4 <_svfiprintf_r+0x104>
 8008a94:	e00f      	b.n	8008ab6 <_svfiprintf_r+0xf6>
 8008a96:	462f      	mov	r7, r5
 8008a98:	e7b8      	b.n	8008a0c <_svfiprintf_r+0x4c>
 8008a9a:	4a40      	ldr	r2, [pc, #256]	; (8008b9c <_svfiprintf_r+0x1dc>)
 8008a9c:	1a80      	subs	r0, r0, r2
 8008a9e:	fa0b f000 	lsl.w	r0, fp, r0
 8008aa2:	4318      	orrs	r0, r3
 8008aa4:	9004      	str	r0, [sp, #16]
 8008aa6:	463d      	mov	r5, r7
 8008aa8:	e7d3      	b.n	8008a52 <_svfiprintf_r+0x92>
 8008aaa:	9a03      	ldr	r2, [sp, #12]
 8008aac:	1d11      	adds	r1, r2, #4
 8008aae:	6812      	ldr	r2, [r2, #0]
 8008ab0:	9103      	str	r1, [sp, #12]
 8008ab2:	2a00      	cmp	r2, #0
 8008ab4:	db01      	blt.n	8008aba <_svfiprintf_r+0xfa>
 8008ab6:	9207      	str	r2, [sp, #28]
 8008ab8:	e004      	b.n	8008ac4 <_svfiprintf_r+0x104>
 8008aba:	4252      	negs	r2, r2
 8008abc:	f043 0302 	orr.w	r3, r3, #2
 8008ac0:	9207      	str	r2, [sp, #28]
 8008ac2:	9304      	str	r3, [sp, #16]
 8008ac4:	783b      	ldrb	r3, [r7, #0]
 8008ac6:	2b2e      	cmp	r3, #46	; 0x2e
 8008ac8:	d10c      	bne.n	8008ae4 <_svfiprintf_r+0x124>
 8008aca:	787b      	ldrb	r3, [r7, #1]
 8008acc:	2b2a      	cmp	r3, #42	; 0x2a
 8008ace:	d133      	bne.n	8008b38 <_svfiprintf_r+0x178>
 8008ad0:	9b03      	ldr	r3, [sp, #12]
 8008ad2:	1d1a      	adds	r2, r3, #4
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	9203      	str	r2, [sp, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	bfb8      	it	lt
 8008adc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ae0:	3702      	adds	r7, #2
 8008ae2:	9305      	str	r3, [sp, #20]
 8008ae4:	4d2e      	ldr	r5, [pc, #184]	; (8008ba0 <_svfiprintf_r+0x1e0>)
 8008ae6:	7839      	ldrb	r1, [r7, #0]
 8008ae8:	2203      	movs	r2, #3
 8008aea:	4628      	mov	r0, r5
 8008aec:	f7f7 fb78 	bl	80001e0 <memchr>
 8008af0:	b138      	cbz	r0, 8008b02 <_svfiprintf_r+0x142>
 8008af2:	2340      	movs	r3, #64	; 0x40
 8008af4:	1b40      	subs	r0, r0, r5
 8008af6:	fa03 f000 	lsl.w	r0, r3, r0
 8008afa:	9b04      	ldr	r3, [sp, #16]
 8008afc:	4303      	orrs	r3, r0
 8008afe:	3701      	adds	r7, #1
 8008b00:	9304      	str	r3, [sp, #16]
 8008b02:	7839      	ldrb	r1, [r7, #0]
 8008b04:	4827      	ldr	r0, [pc, #156]	; (8008ba4 <_svfiprintf_r+0x1e4>)
 8008b06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b0a:	2206      	movs	r2, #6
 8008b0c:	1c7e      	adds	r6, r7, #1
 8008b0e:	f7f7 fb67 	bl	80001e0 <memchr>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d038      	beq.n	8008b88 <_svfiprintf_r+0x1c8>
 8008b16:	4b24      	ldr	r3, [pc, #144]	; (8008ba8 <_svfiprintf_r+0x1e8>)
 8008b18:	bb13      	cbnz	r3, 8008b60 <_svfiprintf_r+0x1a0>
 8008b1a:	9b03      	ldr	r3, [sp, #12]
 8008b1c:	3307      	adds	r3, #7
 8008b1e:	f023 0307 	bic.w	r3, r3, #7
 8008b22:	3308      	adds	r3, #8
 8008b24:	9303      	str	r3, [sp, #12]
 8008b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b28:	444b      	add	r3, r9
 8008b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2c:	e76d      	b.n	8008a0a <_svfiprintf_r+0x4a>
 8008b2e:	fb05 3202 	mla	r2, r5, r2, r3
 8008b32:	2001      	movs	r0, #1
 8008b34:	460f      	mov	r7, r1
 8008b36:	e7a6      	b.n	8008a86 <_svfiprintf_r+0xc6>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	3701      	adds	r7, #1
 8008b3c:	9305      	str	r3, [sp, #20]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	250a      	movs	r5, #10
 8008b42:	4638      	mov	r0, r7
 8008b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b48:	3a30      	subs	r2, #48	; 0x30
 8008b4a:	2a09      	cmp	r2, #9
 8008b4c:	d903      	bls.n	8008b56 <_svfiprintf_r+0x196>
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0c8      	beq.n	8008ae4 <_svfiprintf_r+0x124>
 8008b52:	9105      	str	r1, [sp, #20]
 8008b54:	e7c6      	b.n	8008ae4 <_svfiprintf_r+0x124>
 8008b56:	fb05 2101 	mla	r1, r5, r1, r2
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	e7f0      	b.n	8008b42 <_svfiprintf_r+0x182>
 8008b60:	ab03      	add	r3, sp, #12
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	4622      	mov	r2, r4
 8008b66:	4b11      	ldr	r3, [pc, #68]	; (8008bac <_svfiprintf_r+0x1ec>)
 8008b68:	a904      	add	r1, sp, #16
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	f3af 8000 	nop.w
 8008b70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008b74:	4681      	mov	r9, r0
 8008b76:	d1d6      	bne.n	8008b26 <_svfiprintf_r+0x166>
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	065b      	lsls	r3, r3, #25
 8008b7c:	f53f af35 	bmi.w	80089ea <_svfiprintf_r+0x2a>
 8008b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b82:	b01d      	add	sp, #116	; 0x74
 8008b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b88:	ab03      	add	r3, sp, #12
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	4b07      	ldr	r3, [pc, #28]	; (8008bac <_svfiprintf_r+0x1ec>)
 8008b90:	a904      	add	r1, sp, #16
 8008b92:	4640      	mov	r0, r8
 8008b94:	f000 f882 	bl	8008c9c <_printf_i>
 8008b98:	e7ea      	b.n	8008b70 <_svfiprintf_r+0x1b0>
 8008b9a:	bf00      	nop
 8008b9c:	0800935c 	.word	0x0800935c
 8008ba0:	08009362 	.word	0x08009362
 8008ba4:	08009366 	.word	0x08009366
 8008ba8:	00000000 	.word	0x00000000
 8008bac:	0800890d 	.word	0x0800890d

08008bb0 <_printf_common>:
 8008bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb4:	4691      	mov	r9, r2
 8008bb6:	461f      	mov	r7, r3
 8008bb8:	688a      	ldr	r2, [r1, #8]
 8008bba:	690b      	ldr	r3, [r1, #16]
 8008bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	bfb8      	it	lt
 8008bc4:	4613      	movlt	r3, r2
 8008bc6:	f8c9 3000 	str.w	r3, [r9]
 8008bca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bce:	4606      	mov	r6, r0
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	b112      	cbz	r2, 8008bda <_printf_common+0x2a>
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	f8c9 3000 	str.w	r3, [r9]
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	0699      	lsls	r1, r3, #26
 8008bde:	bf42      	ittt	mi
 8008be0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008be4:	3302      	addmi	r3, #2
 8008be6:	f8c9 3000 	strmi.w	r3, [r9]
 8008bea:	6825      	ldr	r5, [r4, #0]
 8008bec:	f015 0506 	ands.w	r5, r5, #6
 8008bf0:	d107      	bne.n	8008c02 <_printf_common+0x52>
 8008bf2:	f104 0a19 	add.w	sl, r4, #25
 8008bf6:	68e3      	ldr	r3, [r4, #12]
 8008bf8:	f8d9 2000 	ldr.w	r2, [r9]
 8008bfc:	1a9b      	subs	r3, r3, r2
 8008bfe:	42ab      	cmp	r3, r5
 8008c00:	dc28      	bgt.n	8008c54 <_printf_common+0xa4>
 8008c02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008c06:	6822      	ldr	r2, [r4, #0]
 8008c08:	3300      	adds	r3, #0
 8008c0a:	bf18      	it	ne
 8008c0c:	2301      	movne	r3, #1
 8008c0e:	0692      	lsls	r2, r2, #26
 8008c10:	d42d      	bmi.n	8008c6e <_printf_common+0xbe>
 8008c12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c16:	4639      	mov	r1, r7
 8008c18:	4630      	mov	r0, r6
 8008c1a:	47c0      	blx	r8
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d020      	beq.n	8008c62 <_printf_common+0xb2>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	68e5      	ldr	r5, [r4, #12]
 8008c24:	f8d9 2000 	ldr.w	r2, [r9]
 8008c28:	f003 0306 	and.w	r3, r3, #6
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	bf08      	it	eq
 8008c30:	1aad      	subeq	r5, r5, r2
 8008c32:	68a3      	ldr	r3, [r4, #8]
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	bf0c      	ite	eq
 8008c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c3c:	2500      	movne	r5, #0
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	bfc4      	itt	gt
 8008c42:	1a9b      	subgt	r3, r3, r2
 8008c44:	18ed      	addgt	r5, r5, r3
 8008c46:	f04f 0900 	mov.w	r9, #0
 8008c4a:	341a      	adds	r4, #26
 8008c4c:	454d      	cmp	r5, r9
 8008c4e:	d11a      	bne.n	8008c86 <_printf_common+0xd6>
 8008c50:	2000      	movs	r0, #0
 8008c52:	e008      	b.n	8008c66 <_printf_common+0xb6>
 8008c54:	2301      	movs	r3, #1
 8008c56:	4652      	mov	r2, sl
 8008c58:	4639      	mov	r1, r7
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	47c0      	blx	r8
 8008c5e:	3001      	adds	r0, #1
 8008c60:	d103      	bne.n	8008c6a <_printf_common+0xba>
 8008c62:	f04f 30ff 	mov.w	r0, #4294967295
 8008c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6a:	3501      	adds	r5, #1
 8008c6c:	e7c3      	b.n	8008bf6 <_printf_common+0x46>
 8008c6e:	18e1      	adds	r1, r4, r3
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	2030      	movs	r0, #48	; 0x30
 8008c74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c78:	4422      	add	r2, r4
 8008c7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c82:	3302      	adds	r3, #2
 8008c84:	e7c5      	b.n	8008c12 <_printf_common+0x62>
 8008c86:	2301      	movs	r3, #1
 8008c88:	4622      	mov	r2, r4
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	47c0      	blx	r8
 8008c90:	3001      	adds	r0, #1
 8008c92:	d0e6      	beq.n	8008c62 <_printf_common+0xb2>
 8008c94:	f109 0901 	add.w	r9, r9, #1
 8008c98:	e7d8      	b.n	8008c4c <_printf_common+0x9c>
	...

08008c9c <_printf_i>:
 8008c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ca0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008ca4:	460c      	mov	r4, r1
 8008ca6:	7e09      	ldrb	r1, [r1, #24]
 8008ca8:	b085      	sub	sp, #20
 8008caa:	296e      	cmp	r1, #110	; 0x6e
 8008cac:	4617      	mov	r7, r2
 8008cae:	4606      	mov	r6, r0
 8008cb0:	4698      	mov	r8, r3
 8008cb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cb4:	f000 80b3 	beq.w	8008e1e <_printf_i+0x182>
 8008cb8:	d822      	bhi.n	8008d00 <_printf_i+0x64>
 8008cba:	2963      	cmp	r1, #99	; 0x63
 8008cbc:	d036      	beq.n	8008d2c <_printf_i+0x90>
 8008cbe:	d80a      	bhi.n	8008cd6 <_printf_i+0x3a>
 8008cc0:	2900      	cmp	r1, #0
 8008cc2:	f000 80b9 	beq.w	8008e38 <_printf_i+0x19c>
 8008cc6:	2958      	cmp	r1, #88	; 0x58
 8008cc8:	f000 8083 	beq.w	8008dd2 <_printf_i+0x136>
 8008ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008cd4:	e032      	b.n	8008d3c <_printf_i+0xa0>
 8008cd6:	2964      	cmp	r1, #100	; 0x64
 8008cd8:	d001      	beq.n	8008cde <_printf_i+0x42>
 8008cda:	2969      	cmp	r1, #105	; 0x69
 8008cdc:	d1f6      	bne.n	8008ccc <_printf_i+0x30>
 8008cde:	6820      	ldr	r0, [r4, #0]
 8008ce0:	6813      	ldr	r3, [r2, #0]
 8008ce2:	0605      	lsls	r5, r0, #24
 8008ce4:	f103 0104 	add.w	r1, r3, #4
 8008ce8:	d52a      	bpl.n	8008d40 <_printf_i+0xa4>
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	6011      	str	r1, [r2, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	da03      	bge.n	8008cfa <_printf_i+0x5e>
 8008cf2:	222d      	movs	r2, #45	; 0x2d
 8008cf4:	425b      	negs	r3, r3
 8008cf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008cfa:	486f      	ldr	r0, [pc, #444]	; (8008eb8 <_printf_i+0x21c>)
 8008cfc:	220a      	movs	r2, #10
 8008cfe:	e039      	b.n	8008d74 <_printf_i+0xd8>
 8008d00:	2973      	cmp	r1, #115	; 0x73
 8008d02:	f000 809d 	beq.w	8008e40 <_printf_i+0x1a4>
 8008d06:	d808      	bhi.n	8008d1a <_printf_i+0x7e>
 8008d08:	296f      	cmp	r1, #111	; 0x6f
 8008d0a:	d020      	beq.n	8008d4e <_printf_i+0xb2>
 8008d0c:	2970      	cmp	r1, #112	; 0x70
 8008d0e:	d1dd      	bne.n	8008ccc <_printf_i+0x30>
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	f043 0320 	orr.w	r3, r3, #32
 8008d16:	6023      	str	r3, [r4, #0]
 8008d18:	e003      	b.n	8008d22 <_printf_i+0x86>
 8008d1a:	2975      	cmp	r1, #117	; 0x75
 8008d1c:	d017      	beq.n	8008d4e <_printf_i+0xb2>
 8008d1e:	2978      	cmp	r1, #120	; 0x78
 8008d20:	d1d4      	bne.n	8008ccc <_printf_i+0x30>
 8008d22:	2378      	movs	r3, #120	; 0x78
 8008d24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d28:	4864      	ldr	r0, [pc, #400]	; (8008ebc <_printf_i+0x220>)
 8008d2a:	e055      	b.n	8008dd8 <_printf_i+0x13c>
 8008d2c:	6813      	ldr	r3, [r2, #0]
 8008d2e:	1d19      	adds	r1, r3, #4
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6011      	str	r1, [r2, #0]
 8008d34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e08c      	b.n	8008e5a <_printf_i+0x1be>
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6011      	str	r1, [r2, #0]
 8008d44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d48:	bf18      	it	ne
 8008d4a:	b21b      	sxthne	r3, r3
 8008d4c:	e7cf      	b.n	8008cee <_printf_i+0x52>
 8008d4e:	6813      	ldr	r3, [r2, #0]
 8008d50:	6825      	ldr	r5, [r4, #0]
 8008d52:	1d18      	adds	r0, r3, #4
 8008d54:	6010      	str	r0, [r2, #0]
 8008d56:	0628      	lsls	r0, r5, #24
 8008d58:	d501      	bpl.n	8008d5e <_printf_i+0xc2>
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	e002      	b.n	8008d64 <_printf_i+0xc8>
 8008d5e:	0668      	lsls	r0, r5, #25
 8008d60:	d5fb      	bpl.n	8008d5a <_printf_i+0xbe>
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	4854      	ldr	r0, [pc, #336]	; (8008eb8 <_printf_i+0x21c>)
 8008d66:	296f      	cmp	r1, #111	; 0x6f
 8008d68:	bf14      	ite	ne
 8008d6a:	220a      	movne	r2, #10
 8008d6c:	2208      	moveq	r2, #8
 8008d6e:	2100      	movs	r1, #0
 8008d70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d74:	6865      	ldr	r5, [r4, #4]
 8008d76:	60a5      	str	r5, [r4, #8]
 8008d78:	2d00      	cmp	r5, #0
 8008d7a:	f2c0 8095 	blt.w	8008ea8 <_printf_i+0x20c>
 8008d7e:	6821      	ldr	r1, [r4, #0]
 8008d80:	f021 0104 	bic.w	r1, r1, #4
 8008d84:	6021      	str	r1, [r4, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d13d      	bne.n	8008e06 <_printf_i+0x16a>
 8008d8a:	2d00      	cmp	r5, #0
 8008d8c:	f040 808e 	bne.w	8008eac <_printf_i+0x210>
 8008d90:	4665      	mov	r5, ip
 8008d92:	2a08      	cmp	r2, #8
 8008d94:	d10b      	bne.n	8008dae <_printf_i+0x112>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	07db      	lsls	r3, r3, #31
 8008d9a:	d508      	bpl.n	8008dae <_printf_i+0x112>
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	6862      	ldr	r2, [r4, #4]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	bfde      	ittt	le
 8008da4:	2330      	movle	r3, #48	; 0x30
 8008da6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008daa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dae:	ebac 0305 	sub.w	r3, ip, r5
 8008db2:	6123      	str	r3, [r4, #16]
 8008db4:	f8cd 8000 	str.w	r8, [sp]
 8008db8:	463b      	mov	r3, r7
 8008dba:	aa03      	add	r2, sp, #12
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	f7ff fef6 	bl	8008bb0 <_printf_common>
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d14d      	bne.n	8008e64 <_printf_i+0x1c8>
 8008dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dcc:	b005      	add	sp, #20
 8008dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dd2:	4839      	ldr	r0, [pc, #228]	; (8008eb8 <_printf_i+0x21c>)
 8008dd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008dd8:	6813      	ldr	r3, [r2, #0]
 8008dda:	6821      	ldr	r1, [r4, #0]
 8008ddc:	1d1d      	adds	r5, r3, #4
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6015      	str	r5, [r2, #0]
 8008de2:	060a      	lsls	r2, r1, #24
 8008de4:	d50b      	bpl.n	8008dfe <_printf_i+0x162>
 8008de6:	07ca      	lsls	r2, r1, #31
 8008de8:	bf44      	itt	mi
 8008dea:	f041 0120 	orrmi.w	r1, r1, #32
 8008dee:	6021      	strmi	r1, [r4, #0]
 8008df0:	b91b      	cbnz	r3, 8008dfa <_printf_i+0x15e>
 8008df2:	6822      	ldr	r2, [r4, #0]
 8008df4:	f022 0220 	bic.w	r2, r2, #32
 8008df8:	6022      	str	r2, [r4, #0]
 8008dfa:	2210      	movs	r2, #16
 8008dfc:	e7b7      	b.n	8008d6e <_printf_i+0xd2>
 8008dfe:	064d      	lsls	r5, r1, #25
 8008e00:	bf48      	it	mi
 8008e02:	b29b      	uxthmi	r3, r3
 8008e04:	e7ef      	b.n	8008de6 <_printf_i+0x14a>
 8008e06:	4665      	mov	r5, ip
 8008e08:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e0c:	fb02 3311 	mls	r3, r2, r1, r3
 8008e10:	5cc3      	ldrb	r3, [r0, r3]
 8008e12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008e16:	460b      	mov	r3, r1
 8008e18:	2900      	cmp	r1, #0
 8008e1a:	d1f5      	bne.n	8008e08 <_printf_i+0x16c>
 8008e1c:	e7b9      	b.n	8008d92 <_printf_i+0xf6>
 8008e1e:	6813      	ldr	r3, [r2, #0]
 8008e20:	6825      	ldr	r5, [r4, #0]
 8008e22:	6961      	ldr	r1, [r4, #20]
 8008e24:	1d18      	adds	r0, r3, #4
 8008e26:	6010      	str	r0, [r2, #0]
 8008e28:	0628      	lsls	r0, r5, #24
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	d501      	bpl.n	8008e32 <_printf_i+0x196>
 8008e2e:	6019      	str	r1, [r3, #0]
 8008e30:	e002      	b.n	8008e38 <_printf_i+0x19c>
 8008e32:	066a      	lsls	r2, r5, #25
 8008e34:	d5fb      	bpl.n	8008e2e <_printf_i+0x192>
 8008e36:	8019      	strh	r1, [r3, #0]
 8008e38:	2300      	movs	r3, #0
 8008e3a:	6123      	str	r3, [r4, #16]
 8008e3c:	4665      	mov	r5, ip
 8008e3e:	e7b9      	b.n	8008db4 <_printf_i+0x118>
 8008e40:	6813      	ldr	r3, [r2, #0]
 8008e42:	1d19      	adds	r1, r3, #4
 8008e44:	6011      	str	r1, [r2, #0]
 8008e46:	681d      	ldr	r5, [r3, #0]
 8008e48:	6862      	ldr	r2, [r4, #4]
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	f7f7 f9c7 	bl	80001e0 <memchr>
 8008e52:	b108      	cbz	r0, 8008e58 <_printf_i+0x1bc>
 8008e54:	1b40      	subs	r0, r0, r5
 8008e56:	6060      	str	r0, [r4, #4]
 8008e58:	6863      	ldr	r3, [r4, #4]
 8008e5a:	6123      	str	r3, [r4, #16]
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e62:	e7a7      	b.n	8008db4 <_printf_i+0x118>
 8008e64:	6923      	ldr	r3, [r4, #16]
 8008e66:	462a      	mov	r2, r5
 8008e68:	4639      	mov	r1, r7
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	47c0      	blx	r8
 8008e6e:	3001      	adds	r0, #1
 8008e70:	d0aa      	beq.n	8008dc8 <_printf_i+0x12c>
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	079b      	lsls	r3, r3, #30
 8008e76:	d413      	bmi.n	8008ea0 <_printf_i+0x204>
 8008e78:	68e0      	ldr	r0, [r4, #12]
 8008e7a:	9b03      	ldr	r3, [sp, #12]
 8008e7c:	4298      	cmp	r0, r3
 8008e7e:	bfb8      	it	lt
 8008e80:	4618      	movlt	r0, r3
 8008e82:	e7a3      	b.n	8008dcc <_printf_i+0x130>
 8008e84:	2301      	movs	r3, #1
 8008e86:	464a      	mov	r2, r9
 8008e88:	4639      	mov	r1, r7
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	47c0      	blx	r8
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d09a      	beq.n	8008dc8 <_printf_i+0x12c>
 8008e92:	3501      	adds	r5, #1
 8008e94:	68e3      	ldr	r3, [r4, #12]
 8008e96:	9a03      	ldr	r2, [sp, #12]
 8008e98:	1a9b      	subs	r3, r3, r2
 8008e9a:	42ab      	cmp	r3, r5
 8008e9c:	dcf2      	bgt.n	8008e84 <_printf_i+0x1e8>
 8008e9e:	e7eb      	b.n	8008e78 <_printf_i+0x1dc>
 8008ea0:	2500      	movs	r5, #0
 8008ea2:	f104 0919 	add.w	r9, r4, #25
 8008ea6:	e7f5      	b.n	8008e94 <_printf_i+0x1f8>
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1ac      	bne.n	8008e06 <_printf_i+0x16a>
 8008eac:	7803      	ldrb	r3, [r0, #0]
 8008eae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008eb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eb6:	e76c      	b.n	8008d92 <_printf_i+0xf6>
 8008eb8:	0800936d 	.word	0x0800936d
 8008ebc:	0800937e 	.word	0x0800937e

08008ec0 <_sbrk_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4c06      	ldr	r4, [pc, #24]	; (8008edc <_sbrk_r+0x1c>)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	6023      	str	r3, [r4, #0]
 8008ecc:	f7fd fdc0 	bl	8006a50 <_sbrk>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_sbrk_r+0x1a>
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_sbrk_r+0x1a>
 8008ed8:	602b      	str	r3, [r5, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	2000d014 	.word	0x2000d014

08008ee0 <__ascii_wctomb>:
 8008ee0:	b149      	cbz	r1, 8008ef6 <__ascii_wctomb+0x16>
 8008ee2:	2aff      	cmp	r2, #255	; 0xff
 8008ee4:	bf85      	ittet	hi
 8008ee6:	238a      	movhi	r3, #138	; 0x8a
 8008ee8:	6003      	strhi	r3, [r0, #0]
 8008eea:	700a      	strbls	r2, [r1, #0]
 8008eec:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ef0:	bf98      	it	ls
 8008ef2:	2001      	movls	r0, #1
 8008ef4:	4770      	bx	lr
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	4770      	bx	lr
	...

08008efc <malloc>:
 8008efc:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <malloc+0xc>)
 8008efe:	4601      	mov	r1, r0
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	f7ff bca9 	b.w	8008858 <_malloc_r>
 8008f06:	bf00      	nop
 8008f08:	20000018 	.word	0x20000018

08008f0c <memmove>:
 8008f0c:	4288      	cmp	r0, r1
 8008f0e:	b510      	push	{r4, lr}
 8008f10:	eb01 0302 	add.w	r3, r1, r2
 8008f14:	d807      	bhi.n	8008f26 <memmove+0x1a>
 8008f16:	1e42      	subs	r2, r0, #1
 8008f18:	4299      	cmp	r1, r3
 8008f1a:	d00a      	beq.n	8008f32 <memmove+0x26>
 8008f1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f20:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008f24:	e7f8      	b.n	8008f18 <memmove+0xc>
 8008f26:	4283      	cmp	r3, r0
 8008f28:	d9f5      	bls.n	8008f16 <memmove+0xa>
 8008f2a:	1881      	adds	r1, r0, r2
 8008f2c:	1ad2      	subs	r2, r2, r3
 8008f2e:	42d3      	cmn	r3, r2
 8008f30:	d100      	bne.n	8008f34 <memmove+0x28>
 8008f32:	bd10      	pop	{r4, pc}
 8008f34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f38:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008f3c:	e7f7      	b.n	8008f2e <memmove+0x22>

08008f3e <__malloc_lock>:
 8008f3e:	4770      	bx	lr

08008f40 <__malloc_unlock>:
 8008f40:	4770      	bx	lr
	...

08008f44 <_free_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4605      	mov	r5, r0
 8008f48:	2900      	cmp	r1, #0
 8008f4a:	d045      	beq.n	8008fd8 <_free_r+0x94>
 8008f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f50:	1f0c      	subs	r4, r1, #4
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bfb8      	it	lt
 8008f56:	18e4      	addlt	r4, r4, r3
 8008f58:	f7ff fff1 	bl	8008f3e <__malloc_lock>
 8008f5c:	4a1f      	ldr	r2, [pc, #124]	; (8008fdc <_free_r+0x98>)
 8008f5e:	6813      	ldr	r3, [r2, #0]
 8008f60:	4610      	mov	r0, r2
 8008f62:	b933      	cbnz	r3, 8008f72 <_free_r+0x2e>
 8008f64:	6063      	str	r3, [r4, #4]
 8008f66:	6014      	str	r4, [r2, #0]
 8008f68:	4628      	mov	r0, r5
 8008f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f6e:	f7ff bfe7 	b.w	8008f40 <__malloc_unlock>
 8008f72:	42a3      	cmp	r3, r4
 8008f74:	d90c      	bls.n	8008f90 <_free_r+0x4c>
 8008f76:	6821      	ldr	r1, [r4, #0]
 8008f78:	1862      	adds	r2, r4, r1
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	bf04      	itt	eq
 8008f7e:	681a      	ldreq	r2, [r3, #0]
 8008f80:	685b      	ldreq	r3, [r3, #4]
 8008f82:	6063      	str	r3, [r4, #4]
 8008f84:	bf04      	itt	eq
 8008f86:	1852      	addeq	r2, r2, r1
 8008f88:	6022      	streq	r2, [r4, #0]
 8008f8a:	6004      	str	r4, [r0, #0]
 8008f8c:	e7ec      	b.n	8008f68 <_free_r+0x24>
 8008f8e:	4613      	mov	r3, r2
 8008f90:	685a      	ldr	r2, [r3, #4]
 8008f92:	b10a      	cbz	r2, 8008f98 <_free_r+0x54>
 8008f94:	42a2      	cmp	r2, r4
 8008f96:	d9fa      	bls.n	8008f8e <_free_r+0x4a>
 8008f98:	6819      	ldr	r1, [r3, #0]
 8008f9a:	1858      	adds	r0, r3, r1
 8008f9c:	42a0      	cmp	r0, r4
 8008f9e:	d10b      	bne.n	8008fb8 <_free_r+0x74>
 8008fa0:	6820      	ldr	r0, [r4, #0]
 8008fa2:	4401      	add	r1, r0
 8008fa4:	1858      	adds	r0, r3, r1
 8008fa6:	4282      	cmp	r2, r0
 8008fa8:	6019      	str	r1, [r3, #0]
 8008faa:	d1dd      	bne.n	8008f68 <_free_r+0x24>
 8008fac:	6810      	ldr	r0, [r2, #0]
 8008fae:	6852      	ldr	r2, [r2, #4]
 8008fb0:	605a      	str	r2, [r3, #4]
 8008fb2:	4401      	add	r1, r0
 8008fb4:	6019      	str	r1, [r3, #0]
 8008fb6:	e7d7      	b.n	8008f68 <_free_r+0x24>
 8008fb8:	d902      	bls.n	8008fc0 <_free_r+0x7c>
 8008fba:	230c      	movs	r3, #12
 8008fbc:	602b      	str	r3, [r5, #0]
 8008fbe:	e7d3      	b.n	8008f68 <_free_r+0x24>
 8008fc0:	6820      	ldr	r0, [r4, #0]
 8008fc2:	1821      	adds	r1, r4, r0
 8008fc4:	428a      	cmp	r2, r1
 8008fc6:	bf04      	itt	eq
 8008fc8:	6811      	ldreq	r1, [r2, #0]
 8008fca:	6852      	ldreq	r2, [r2, #4]
 8008fcc:	6062      	str	r2, [r4, #4]
 8008fce:	bf04      	itt	eq
 8008fd0:	1809      	addeq	r1, r1, r0
 8008fd2:	6021      	streq	r1, [r4, #0]
 8008fd4:	605c      	str	r4, [r3, #4]
 8008fd6:	e7c7      	b.n	8008f68 <_free_r+0x24>
 8008fd8:	bd38      	pop	{r3, r4, r5, pc}
 8008fda:	bf00      	nop
 8008fdc:	2000ca1c 	.word	0x2000ca1c

08008fe0 <_realloc_r>:
 8008fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	4614      	mov	r4, r2
 8008fe6:	460e      	mov	r6, r1
 8008fe8:	b921      	cbnz	r1, 8008ff4 <_realloc_r+0x14>
 8008fea:	4611      	mov	r1, r2
 8008fec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ff0:	f7ff bc32 	b.w	8008858 <_malloc_r>
 8008ff4:	b922      	cbnz	r2, 8009000 <_realloc_r+0x20>
 8008ff6:	f7ff ffa5 	bl	8008f44 <_free_r>
 8008ffa:	4625      	mov	r5, r4
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009000:	f000 f814 	bl	800902c <_malloc_usable_size_r>
 8009004:	42a0      	cmp	r0, r4
 8009006:	d20f      	bcs.n	8009028 <_realloc_r+0x48>
 8009008:	4621      	mov	r1, r4
 800900a:	4638      	mov	r0, r7
 800900c:	f7ff fc24 	bl	8008858 <_malloc_r>
 8009010:	4605      	mov	r5, r0
 8009012:	2800      	cmp	r0, #0
 8009014:	d0f2      	beq.n	8008ffc <_realloc_r+0x1c>
 8009016:	4631      	mov	r1, r6
 8009018:	4622      	mov	r2, r4
 800901a:	f7fd fdd5 	bl	8006bc8 <memcpy>
 800901e:	4631      	mov	r1, r6
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff ff8f 	bl	8008f44 <_free_r>
 8009026:	e7e9      	b.n	8008ffc <_realloc_r+0x1c>
 8009028:	4635      	mov	r5, r6
 800902a:	e7e7      	b.n	8008ffc <_realloc_r+0x1c>

0800902c <_malloc_usable_size_r>:
 800902c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009030:	1f18      	subs	r0, r3, #4
 8009032:	2b00      	cmp	r3, #0
 8009034:	bfbc      	itt	lt
 8009036:	580b      	ldrlt	r3, [r1, r0]
 8009038:	18c0      	addlt	r0, r0, r3
 800903a:	4770      	bx	lr

0800903c <_init>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	bf00      	nop
 8009040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009042:	bc08      	pop	{r3}
 8009044:	469e      	mov	lr, r3
 8009046:	4770      	bx	lr

08009048 <_fini>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	bf00      	nop
 800904c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904e:	bc08      	pop	{r3}
 8009050:	469e      	mov	lr, r3
 8009052:	4770      	bx	lr
